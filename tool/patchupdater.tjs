/*----------------------------------------------------------------------------/
/	パッチをサポートページからダウンロードするスクリプト
/----------------------------------------------------------------------------*/
Scripts.execStorage("tool/toolwindow.tjs");
@if(0)
var	GameID	= "FHAT";	//	テスト用
@endif
var	plugindir	= System.exePath+"plugin/";
Plugins.link(plugindir+"fstat.dll");
Plugins.link(plugindir+"win32ole.dll");
Plugins.link(plugindir+"base64.dll");

var	patchlisturl	= "https://www.typemoon.com/users/download/?pc="+GameID+"&m=e";
var	patchdlurl		= "https://www.typemoon.com/users/base64enc.php?fn=download/"+GameID+"/";
var	patchdir		= System.dataPath + "patches/";
var	patchreg		= /^patch[0-9]*\.xp3$/;	//	特定用途ではなく、全体向けパッチ(patch〜.xp3)
var	maxRetryCount	= 3;
var	sigext			= ".sig";	//	シグネチャ拡張子

class MyWindow extends ToolWindow
{
	function MyWindow()
	{
		super.ToolWindow(...);
		caption		= "「"+GameName+"」パッチ更新ツール";

		begin();	//	最初の状態へ

		visible	= true;
	}

	/*-----------------------------------------------------------------------*/

	//	最初
	function begin()
	{
		lf(upperspacing);
		addMessage("パッチの更新を確認しますか？");
		lf(lowerspacing);
		addButton("OK", checkPatches);
		addCancelClose();
		drawForms();
	}

	//	パッチの更新が可能か調べる
	function checkPatches()
	{
		clearForms();
		lf(upperspacing);
		addMessage("パッチの更新を確認しています ...");
		lf(lowerspacing);
		addCancelClose();
		drawForms();

		openURL(, patchlisturl, analyzePatchList, "パッチサーバーへの接続に失敗しました。\nネット接続環境に問題があるか、パッチサーバーが停止しています。");
	}

	//	パッチ一覧の解析
	var	patches	= [];
	function analyzePatchList()
	{
		dm("analyzePatchList");
		//	公開されているパッチ
		var	list	= getResponseText();
		for(var i=0; i<list.count; i+=2)
		{
			if(list[i] == "")
				continue;
			var	data	= list[i].split(/\t/);
			dm(data[0]);
			if(patchreg.test(data[0]))
			{
				var	patch	= %[
					filename	: data[0],
					md5			: data[1],
					filesize	: +data[2],
					datetime	: data[3],
					Date		: new Date(data[3]),
					comment		: list[i+1].replace(/\\n/g, "\n")
				];
				patches.add(patch);
			}
		}
		patches.sort(function(a, b){ return a.datetime < b.datetime; });	//	古い順に並び替え

		//	ダウンロード済みパッチ
		dm("list up patches");
		var	exists	= %[];
		if(Storages.isExistentDirectory(patchdir) == true)
		{
			var	files	= Storages.dirlist(patchdir);
			for(var i=0; i<files.count; i++)
			{
				var	fn	= files[i];
				if(fn[0] == ".")
					continue;
				exists[fn]	= true;
			}
		}

		//	ダウンロードしていないパッチを残す
		dm("check new patches");
		var	size	= 0;
		for(var i=0; i<patches.count; i++)
		{
			if(exists[patches[i].filename])
			{
				patches.erase(i);
				i--;
			}
			else
				size	+= +patches[i].filesize;
		}

		//	ダウンロードしていないパッチがあれば、確認を取る
		dm("update interface");
		if(patches.count > 0)
		{
			clearForms();
			lf(upperspacing);
			addMessage("新しいパッチが%d個(約%4.2fMB)見つかりました。\nダウンロードしますか？".sprintf(patches.count, size / 1048576));
			lf();
			for(var i=0; i<patches.count; i++)
				addMessage("　"+(i+1)+"個目: "+patches[i].filename);
			lf(lowerspacing);
			addButton("YES", beginPatchDownload);
			addButton("NO", close);
			drawForms();
		}
		else
		{
			clearForms();
			lf(upperspacing);
			addMessage("現在新たに取得できるパッチはありません。");
			lf(lowerspacing);
			addButton("OK", close);
			drawForms();
		}
	}

	//	パッチのダウンロード開始
	var	retryCount	= 0;
	function beginPatchDownload()
	{
		var	size	= 0;
		for(var i=0; i<patches.count; i++)
			size	+= patches[i].filesize;
		clearForms();
		lf(upperspacing);
		addMessage("パッチをダウンロードしています。\nしばらくお待ちください。　　(残り:%d個/%4.2fMB)".sprintf(patches.count, size / 1024576));
		lf(lowerspacing);
		addButton("キャンセル", displayResult);
		drawForms();

		openURL(, patchdlurl+patches[0].filename, endPatchDownload, "パッチサーバーへの接続に失敗しました。\nネット接続環境に問題があるか、パッチサーバーが停止しています。");
	}

	//	パッチのダウンロードが完了
	function endPatchDownload()
	{
		//	パッチ保存及びMD5のチェック
		var	fn		= patches[0].filename;
		if(!Storages.isExistentDirectory(patchdir))
			Storages.createDirectory(patchdir);
		var	digest	= getResponseFile(patchdir + fn);
		if(patches[0].md5 != digest)
		{
			//	リトライ
			retryCount++;
			if(retryCount < maxRetryCount)
				beginPatchDownload();
			else
			{
				clearForms();
				lf(upperspacing);
				addMessage("何らかの理由で、正常にパッチをダウンロードできませんでした。\n時間を改めて、再度パッチ更新を行ってください。");
				lf(lowerspacing);
				addButton("OK", close);
				drawForms();
			}
			return;
		}

		//	シグネチャのダウンロード開始
		beginSignatureDownload();
	}

	//	シグネチャのダウンロード開始
	function beginSignatureDownload()
	{
		openURL(, patchdlurl+patches[0].filename+sigext, endSignatureDownload, "パッチサーバーへの接続に失敗しました。\nネット接続環境に問題があるか、パッチサーバーが停止しています。");
	}

	//	ダウンロード終了
	function endSignatureDownload()
	{
		//	シグネチャを保存
		getResponseFile(patchdir + patches[0].filename + sigext);

		//	ダウンロードに成功したので次へ
		retryCount	= 0;
		patches.erase(0);
		if(patches.count > 0)
			beginPatchDownload();
		else
		{
			//	ダウンロードするファイルがなくなったので終了
			clearForms();
			lf(upperspacing);
			addMessage("パッチのダウンロードがすべて終了しました。");
			lf(lowerspacing);
			addButton("OK", close);
			drawForms();
		}
	}

	//	ダウンロードを途中でキャンセル
	function displayResult()
	{
		clearForms();
		lf(upperspacing);
		addMessage("ダウンロードをキャンセルしました。");
		lf(lowerspacing);
		addButton("OK", close);
		drawForms();
	}
}
var	win	= new MyWindow();
