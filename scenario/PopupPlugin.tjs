/*-----------------------------------------------------------------------------/
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		メッセージをポップアップさせるプラグイン
/-----------------------------------------------------------------------------*/
@if(__POPUP_PLUGIN_DEFINED__==0)
@set(__POPUP_PLUGIN_DEFINED__=1)

class PopupLayer extends Layer
{
	var textcolor		= 0xffffff;
	var edgecolor		= void;
	var	adjustTextTop	= -5;

	function PopupLayer(win, par, plugin)
	{
		super.Layer(...);

		hitType		= htMask;
		hitThreshold= 64;
		font.height	= 16;
		name		= "Popup";
		this.plugin	= plugin;
	}

	function finalize()
	{
		super.finalize(...);
	}

	property imageSource	{ getter { return plugin.imageSource; } }

	function draw(msg)
	{
		name	+= "「"+msg+"」";

		//	サイズを決定
		var	img	= imageSource;
		var	lw	= img.width \ 2;
		var	rw	= img.width - lw - 1;
		var w	= font.getTextWidth(msg) + lw + rw;
		var h	= img.height;
		setSize(w, h);

		//	背景を描画
		copyRect(0, 0, img, 0, 0, lw, img.height);
		face	= dfOpaque,	holdAlpha	= false;
		operateStretch(lw, 0, w-lw-rw, height, img, lw, 0, 1, img.height, omOpaque);
		face	= dfAlpha;
		copyRect(w-rw, 0, img, img.width-rw, 0, rw, img.height);

		//	メッセージ描画
		var l = lw;
		var t = ((height - font.getTextHeight(msg)) >> 1) + adjustTextTop;
		if(edgecolor!=void)
			drawText(l, t, msg, textcolor,,,1024,edgecolor,1);
		else
			drawText(l, t, msg, textcolor);
	}

	function popup(msg, posno=0, disptime, staytime)
	{
		//	描画
		draw(msg);

		//	初期位置と表示位置
		var	sl	= window.scWidth - (width + plugin.marginR);
		var	st	= window.scHeight;
		var	l	= sl;
		var	t	= window.scHeight - (height + plugin.marginB) * (posno + 1);
		var	dtm	= plugin.disptime, stm = plugin.staytime;
		if(sl < 0)
		{
			sl	= window.scWidth - width - plugin.marginR;	//	すべてが画面内に入らない場合は、スクロールさせる
			stm	= (l - stl) * plugin.scrollPixelPerMilliSec;
		}
		dtm	= disptime if disptime !== void;
		stm	= staytime if staytime !== void;

		stopAction();	//	実行中のアクションを停止

		//	表示・消去アクション
		//	left
		var	elmleft	= %[
			module:KeyFrameActionModule,
			props:"left",
			keys:[
				[ 0,		sl,	7, "l" ],
				[ dtm,		sl,	0, "l" ],
				[ dtm+stm,	l,	7, "l" ],
				[ dtm*2+stm,l,	0, "n" ]
			]
		];
		beginAction(elmleft);

		//	top
		var	elmtop	= %[];
		(Dictionary.assignStruct incontextof elmtop)(elmleft);
		elmtop.props	= "top";
		elmtop.keys[0][1]	= st;
		elmtop.keys[1][1]	= t;
		elmtop.keys[2][1]	= t;
//		elmtop.keys[3][1]	= st;
		elmtop.keys[3][1]	= t;	//	下に下がらない
		beginAction(elmtop);

		//	opacity
		var	elmopac	= %[];
		(Dictionary.assignStruct incontextof elmopac)(elmleft);
		elmopac.props	= "opacity";
		elmopac.keys[0][1]	= 0;
		elmopac.keys[1][1]	= 192;
		elmopac.keys[2][1]	= 192;
		elmopac.keys[3][1]	= 0;
		beginAction(elmopac);

		visible	= true;
	}

	function erase()
	{
		stopAction();
//	移動せず、その場で消える
//		ssact(plugin.disptime, "top", window.innerHeight);
		ssact(plugin.disptime, "opacity", 0);
	}

	function onMouseDown()
	{
		erase();	//	クリックされたらすぐに消去を開始する
	}

	function beginAction(elm, hide, nowait, canpause=false)
	{
		this.hide = hide if hide !== void;
		elm.norapid = true;
		return window.beginAction(this, elm, onActionCompleted, nowait, canpause);
	}

	function stopAction()
	{
		return window.stopAction(this);
	}

	function onActionCompleted()
	{
		if(!(this isvalid))
			return;
		if(opacity == 0)
			asyncCaller.call(plugin.clear, this);	//	消去
	}

	//	シンプルなアクション(メニューのmouse〜から呼び出すためのもの)
	function ssact(time, prop, value, delay=0, accel=0)
	{
		//どんな処理速度の描画でもきちんと見せるため加速させない norapid=true指定
		var	elm	= %[time:time, start:this[prop], value:value, norapid:true];
		if(time === void)
		{//	値を指定の時間後に設定
			elm.handler	= SetAction;
			elm.time	= delay;
		}
		else
		{//	キーフレームで処理
			elm.props	= prop;
			elm.keys	= [ [delay, this[prop], accel, "l"], [time + delay, value, 0, "n"] ];
			elm.module	= KeyFrameActionModule;
			beginAction(elm);
			return;
		}
		beginAction(%[prop => elm]);
	}
}

class PopUpPlugin extends KAGPlugin
{
	var window;
	var list;
	var	imageSource;

	var	popupSourceFile	= "system_ポップアップ";

	var	marginR		= 16;
	var	marginB		= 16;
	var	disptime	= 600;
	var	staytime	= 1200;
	var	scrollPixelPerMilliSec	= 10;

	function PopUpPlugin(window)
	{
		super.KAGPlugin();
		list	= [];
		this.window	= window;
	}

	function finalize()
	{
		clear();	//	全消去
		super.finalize(...);
	}

	function popup(msg)
	{
		dm("popup: "+msg);
		erase();	//	現在表示されているものすべてを消去

		create(...);
	}

	function create(msg)
	{
		var	layer	= new PopupLayer(window, window.primaryLayer, this);
		if(imageSource == void)
		{
			with(imageSource = new Layer(window, window.primaryLayer))
			{
				.name	= "ポップアップ元画像";
				.loadImages(popupSourceFile);
				.setSizeToImageSize();
			}
		}
		layer.popup(...) if msg != "";
		list.add(layer);
	}

	function invalidateSource()
	{
		if(imageSource != void && list.count == 0)
		{
			invalidate imageSource;
			imageSource	= void;
		}
	}

	function erase()
	{
		for(var i=0; i<list.count; i++)
			list[i].erase();
		list.clear();
	}

	function clear(layer)
	{
//		dmt("Popup.clear("+layer+")");
		if(layer != void)
		{
			var	idx	= list.find(layer);
			if(idx >= 0)
				list.erase(idx);
			invalidate layer;
		}
		else
		{
			for(var i=0; i<list.count; i++)
				invalidate list[i];
			list.clear();
		}
		invalidateSource();
	}
	
	var tmpvisible = [];
	function onSaveScreenShotStart()
	{
		// スクリーンショットが保存される時に呼ばれる
		// 必要に応じて表示状態の変更を行う事。
		for( var i=0; i<list.count; i++ )
		{
			if( list[i] !== void && isvalid list[i] )
			{
				tmpvisible[i] = list[i].visible;
				list[i].visible = false;
				list[i].update();
			}
		}
	}

	function onSaveScreenShotEnd()
	{
		// スクリーンショットが保存た後に呼ばれる
		// 必要に応じて表示状態の復元などを行う事。
		for( var i=0; i<list.count; i++ )
		{
			if( list[i] !== void && isvalid list[i] && tmpvisible[i] !== void )
			{
				list[i].visible = tmpvisible[i];
				list[i].update();
			}
		}
		tmpvisible = [];
	}

	function onStore(f, elm)
	{
		// 栞を保存する際に呼ばれる
		// f = 保存先の栞データ ( Dictionary クラスのオブジェクト )
		// elm = tempsave 時のオプション ( 現在は常に void )
	}

	function onRestore(f, clear, elm)
	{
		// 栞を読み出すときに呼ばれる
		// f = 読み込む栞データ ( Dictionary クラスのオブジェクト )
		// clear = メッセージレイヤをクリアするか ( tempload の時のみ false )
		// elm = tempload 時のオプション ( tempload でない場合は 常に void,
		//                                 tempload の時は Dictionary クラスのオブジェクト )
		this.clear();	//	すべてのポップアップメッセージを消去
	}

	function onStableStateChanged(stable)
	{
		// 安定 ( s l p タグで停止中 ) または 走行中 ( それ以外 )
		// の状態が変化したときに呼ばれる
		// stable = 安定の状態に true, それ以外の場合に false
	}

	function onMessageHiddenStateChanged(hidden)
	{
		// 右クリックなどでメッセージレイヤが隠されたり、または
		// その状態から抜ける時に呼ばれる
		// hidden = メッセージが隠された場合に true, 現れた場合に false
	}

	function onCopyLayer(toback)
	{
		// backlay タグ / forelay タグがすべてのレイヤに対して実行される時、
		// あるいは layer=base chidlren=true exchange=false のトランジションの終了時に、
		// 裏画面の内容を表画面にコピーする
		// 必要が発生すると呼び出される
		// toback = 表画面の内容を裏画面にコピーする時に true,
		//          裏画面の内容を表画面にコピーするときに false
		// layer=base children=true のトランジション終了時には toback = false で呼ばれる。
	}

	function onExchangeForeBack()
	{
		// layer=base children=true のトランジションの終了時に呼ばれ、
		// 表レイヤと裏レイヤの情報を交換する目的で呼ばれる
		// この時点ですでにレイヤのツリー構造は入れ替わっているので、
		// 通常、ここでは、ツリー構造の入れ替えを行うと情報が矛盾するもの
		// ( レイヤの名前とか、レイヤへの参照とか ) を裏画面と面画面の間で入れ替える
		// トランジション終了時の onCopyLayer はこのイベントより前に呼ばれるので
		// 注意
	}

	function onSaveSystemVariables()
	{
		// システム変数に情報が保存され時に呼ばれる
		// このタイミングで kag.scflags に情報を書き込めば
		// 確実にシステム変数に情報を書くことができる
	}
}
// プラグインオブジェクトを作成し、登録する
kag.addPlugin(global.popup_object = new PopUpPlugin(kag));

function popupMessage()	{ popup_object.popup(...); }
function eraseMessage()	{ popup_object.erase(); }

@if(DEBUG)
function popupMenuTest(key, shift)
{
	if(key == VK_END && shift & ssAlt)
		popupMessage("テストポップアップ");
}
kag.addHook("keyDown", popupMenuTest);
@endif

@endif
