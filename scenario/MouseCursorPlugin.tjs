@if(__MOUSECURSOR_PLUGIN_DEFINED__==0)
@set(__MOUSECURSOR_PLUGIN_DEFINED__=1)

/*-----------------------------------------------------------------------------
/	加速度をもった進行度の変化
/	in	: per	進行度(0.0〜1.0)
/		: accel	加速度(〜(-2:2)〜)
/	out	: 加減速させた進行度
/----------------------------------------------------------------------------*/
function calcAccel(per, accel)
{
	if(accel < 0)
	{
		// 上弦 ( 最初が動きが早く、徐々に遅くなる )
		per = 1.0 - per;
		per = Math.pow(per, -accel);
		per = 1.0 - per;
	}
	else if(accel > 0)
	{
		// 下弦 ( 最初は動きが遅く、徐々に早くなる )
		per = Math.pow(per, accel);
	}

	return per;	//	加減速が行われた後の進行度
}

//	フラグの初期化
cf.autoMouseMove	= true if typeof cf.autoMouseMove === "undefined";

//	自動移動中にユーザーがどれだけマウスを移動させたら、自動移動をキャンセルするか
var	cancelThreshold	= 3;

class MouseCursorPlugin extends KAGPlugin
{
	//	マウスカーソルを制御するプラグイン
	//		フォーカスされたレイヤーへカーソルを移動する
	//		一定時間操作が無ければカーソルを非表示にする

	var	defaultMoveTime	= 150;
	var	defaultMoveAccel= -2;
	var	defaultHideTime	= 1000;

	var	enableHide	= false;	//	カーソルを隠すかどうか

	function MouseCursorPlugin()
	{
		super.KAGPlugin(...);

		hideTimer	= new Timer(onTimeout4HideCursor, "");
		hideTimer.interval	= defaultHideTime;
	}

	function finalize()
	{
		invalidate moveTimer if moveTimer != void;
		invalidate hideTimer if hideTimer != void;
		super.finalize(...);
	}

	//	カーソルを指定レイヤーの指定位置へ移動させる

	var	targetLayer, moveTime, moveAccel, moveDelay;
	var	startx, starty;
	var	targetx, targety;
	var	moveTimer, starttick;
	function moveCursor(layer, x, y, time, accel, delay)
	{
//		dm("MouseCursorPlugin.moveCursor("+layer+") : "+kag.inputDevice+", "+cf.autoMouseMove);
		if(!cf.autoMouseMove || layer == void || layer == null)
			return false;

		layer		= kag.focusedLayer if layer == void;
		targetx		= (x === void ? layer.width \ 2 : x) - layer.window.sysbase.left;
		targety		= (y === void ? layer.height \ 2 : y) - layer.window.sysbase.top;
		targetLayer	= layer;
		layer		= layer.parent;
		while(!(layer instanceof "BaseLayer") && layer != null)
		{
			targetx	+= layer.left;
			targety	+= layer.top;
			layer	= layer.parent;
		}

		//	マウス以外の操作の場合は、カーソル位置だけ変更する
		if(kag.inputDevice != "mouse")
		{
			targetLayer.setCursorPos(targetx, targety);
			targetLayer.window.hideMouseCursor();
			return false;
		}

		if(moveTimer == void)
		{
			moveTimer	= new Timer(onTimeout4MouseMove, "");
			moveTimer.interval	= 16;
		}
//		dm("moveTimer.enabled = "+moveTimer.enabled+" / "+targetx+", "+targety);
		if(moveTimer.enabled)
			return;
		moveTimer.enabled	= true;

		moveTime	= time === void ? defaultMoveTime : time;
		moveAccel	= accel === void ? defaultMoveAccel : accel;
		moveDelay	= +delay;
		startx		= kag.fore.base.cursorX;
		starty		= kag.fore.base.cursorY;
		starttick	= System.getTickCount();
		return true;
	}

	var	lastx, lasty;
	function onTimeout4MouseMove()
	{
		if(!(targetLayer isvalid))
		{
//			dm("stop move cursor by invalidate");
			stopMoveCursor();
			return;
		}

		var	past	= System.getTickCount() - starttick - moveDelay;

		var	cx	= kag.fore.base.cursorX, cy = kag.fore.base.cursorY;
		if(lastx !== void && Math.abs(cx - lastx) + Math.abs(cy - lasty) > cancelThreshold)
		{
			//	ユーザーによるマウスの移動が閾値を越えていたので、カーソル移動を終了
//			dm("stop move cursor by cancel");
			stopMoveCursor();
			return;
		}
		if(past < 0)
			return;	//	まだ移動開始しない

		//	移動量
		var	per		= past / moveTime;
		if(per > 1)
			per	= 1.0;
		else
			per	= calcAccel(per, moveAccel);

		//	レイヤーの指定位置へ向かってカーソルを移動
		kag.fore.base.setCursorPos(startx + int((targetx + targetLayer.left - startx) * per),
			starty + int((targety + targetLayer.top  - starty) * per));
		lastx	= kag.fore.base.cursorX;	//	ウィンドウを縮小していると、指定した座標と実際に設定された座標で
		lasty	= kag.fore.base.cursorY;	//	異なることがあるため、設定された座標を記録する

		if(per == 1.0)
			stopMoveCursor();
	}

	function stopMoveCursor()
	{
		if(moveTimer != void)
		{
			moveTimer.enabled	= false;
			lastx = lasty = void;
		}
	}

	//	操作をしていない間、カーソルを隠す

	var	hideTimer;
	function setHideCursor(enabled, time, appearfunc=void, hidefunc=void)
	{
		var	lastEnableHide	= enableHide;
		enableHide			= enabled === void ? true : enabled;
		if(!enableHide)
			kag.mouseCursorState	= mcsVisible;
		hideTimer.interval	= time === void ? defaultHideTime : time;
		appearCallback		= appearfunc;
		hideCallback		= hidefunc;
		hided				= kag.mouseCursorState !== mcsVisible;
		return lastEnableHide;
	}

	var	appearCallback;
	var	hideCallback;
	var	_hided;
	property hided
	{
		setter(v)
		{
			if(hided !== v)
			{
//				dmt("hided: "+hided+" → "+v);
				_hided	= v;
				if(v)
					hideCallback() if hideCallback != void;
				else
					appearCallback() if appearCallback != void;
			}
		}
		getter	{ return _hided; }
	}

	function onMouseMove()
	{
		if(enableHide)
		{
			with(hideTimer)
			{
				.enabled	= false;	//	一度リセット
				.interval	= .interval;
				.enabled	= true;
			}
			hided	= false;
		}
	}

	function onTimeout4HideCursor()
	{
		if(enableHide)
		{
			kag.hideMouseCursor();
			hided	= true;
		}
		hideTimer.enabled	= false;
	}

	function onStore(f, elm)
	{
		// 栞を保存する際に呼ばれる
		// f = 保存先の栞データ ( Dictionary クラスのオブジェクト )
		// elm = tempsave 時のオプション ( 現在は常に void )

		f.mousecursor_enableHide	= enableHide;
		f.mousecursor_hideTime		= hideTimer.interval;
	}

	function onRestore(f, clear, elm)
	{
		// 栞を読み出すときに呼ばれる
		// f = 読み込む栞データ ( Dictionary クラスのオブジェクト )
		// clear = メッセージレイヤをクリアするか ( tempload の時のみ false )
		// elm = tempload 時のオプション ( tempload でない場合は 常に void,
		//                                 tempload の時は Dictionary クラスのオブジェクト )
		stopMoveCursor();
		enableHide			= f.mousecursor_enableHide;
		hideTimer.interval	= f.mousecursor_hideTime;
	}

	function onStableStateChanged(stable)
	{
		// 安定 ( s l p タグで停止中 ) または 走行中 ( それ以外 )
		// の状態が変化したときに呼ばれる
		// stable = 安定の状態に true, それ以外の場合に false
	}

	function onMessageHiddenStateChanged(hidden)
	{
		// 右クリックなどでメッセージレイヤが隠されたり、または
		// その状態から抜ける時に呼ばれる
		// hidden = メッセージが隠された場合に true, 現れた場合に false
	}

	function onCopyLayer(toback)
	{
		// backlay タグ / forelay タグがすべてのレイヤに対して実行される時、
		// あるいは layer=base chidlren=true exchange=false のトランジションの終了時に、
		// 裏画面の内容を表画面にコピーする
		// 必要が発生すると呼び出される
		// toback = 表画面の内容を裏画面にコピーする時に true,
		//          裏画面の内容を表画面にコピーするときに false
		// layer=base children=true のトランジション終了時には toback = false で呼ばれる。
	}

	function onExchangeForeBack()
	{
		// layer=base children=true のトランジションの終了時に呼ばれ、
		// 表レイヤと裏レイヤの情報を交換する目的で呼ばれる
		// この時点ですでにレイヤのツリー構造は入れ替わっているので、
		// 通常、ここでは、ツリー構造の入れ替えを行うと情報が矛盾するもの
		// ( レイヤの名前とか、レイヤへの参照とか ) を裏画面と面画面の間で入れ替える
		// トランジション終了時の onCopyLayer はこのイベントより前に呼ばれるので
		// 注意
	}

	function onSaveSystemVariables()
	{
		// システム変数に情報が保存され時に呼ばれる
		// このタイミングで kag.scflags に情報を書き込めば
		// 確実にシステム変数に情報を書くことができる
	}
}

//	オブジェクトを生成
kag.addPlugin(global.mousecursor_object = new MouseCursorPlugin(kag));

//	ウィンドウメッセージをフック
kag.addHook("mouseMove", global.mousecursor_object.onMouseMove);
/*
kag.original_onMouseMove_by_mousecursorplugin	= kag.onMouseMove;
kag.onMouseMove	= function(x, y)
{
	global.mousecursor_object.onMouseMove(...);
	return 	original_onMouseMove_by_mousecursorplugin(...);
} incontextof kag;
*/

//	カーソルを指定レイヤーの指定位置へ移動させる
function moveCursor(layer, x, y, time, accel, delay)
{
	mousecursor_object.moveCursor(...);
}

//	カーソルを自動的に隠す設定
function setHideCursor(enable, time)
{
	return mousecursor_object.setHideCursor(...);
}

{
	var	kt	= kag.tagHandlers;

	/**TAG
	 *	カーソルを一定時間で隠すようにするか設定する.
	 *	設定されていると、マウスカーソルが動かなくなってから指定時間後に隠す
	 *	@param enabled 隠すかどうか
	 *	@param time 隠すまでの時間
	 */
	kt.hidecursor	= function(elm)
	{
		mousecursor_object.setHideCursor(elm.enabled, elm.time);
		return 0;
	} incontextof kag;
}

@endif
