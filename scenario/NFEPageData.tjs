/*-----------------------------------------------------------------------------
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		フローチャートデータ - ページ(処理単位)
/----------------------------------------------------------------------------*/
@if(__NFEPAGEDATA_DEFINED__==0)
@set(__NFEPAGEDATA_DEFINED__=1)

Scripts.execStorage("NFEBlockData.tjs");

//	データ処理クラス(フローチャート実行時使用)
class NFEPageData
{
	var	id;			//	ページID
	var	title;		//	ページ名
	var	blocks;		//	ブロック
	var	_owner;		//	オーナー(チャート)

	function NFEPageData(owner, id, title)
	{
		this._owner	= owner;
		this.id		= id;
		this.title	= title;

		blocks	= [];

		owner.registObject(this);
	}

	function finalize()
	{
		owner.unregistObject(this);

		if(blocks != void)
		{
			for(var i=0; i<blocks.count; i++)
				invalidate blocks[i] if blocks[i] != void;
			invalidate blocks;
		}
	}

	property owner	{ getter { return _owner; } }
	property chart	{ getter { return _owner; } }

	function getSaveData()
	{
		var	data	= %[];
		with(data)
		{
			.id		= id;
			.title	= title;
			.blocks	= [];
			for(var i=0; i<blocks.count; i++)
				.blocks.add(blocks[i].getSaveData());
		}
		return data;
	}

	function setLoadData(data)
	{
		with(data)
		{
			id		= .id;
			title	= .title;
			blocks	= [];
			for(var i=0; i<.blocks.count; i++)
			{
				blocks[i]	= createBlock(this, .blocks[i].id);
				blocks[i].setLoadData(.blocks[i]);
			}
		}
	}

	function clear()
	{
		for(var i=0; i<blocks.count; i++)
			blocks[i].clear();
		blocks.clear();

		invalidate this;
	}

	function createBlock()
	{
		return new NFEBlockData(...);
	}

	//	IDでオブジェクトを取得
	function getObjectByID(id)
	{
		return owner.getObjectByID(id);
	}
}

@endif
