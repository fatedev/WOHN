@if(__TITLEMENU_DEFINED__==0)
@set(__TITLEMENU_DEFINED__=1)

/*
 *	タイトルメニュー
 */
//	タイトルメニューを開く
var	fixedTitleMenuItems	= %[タイトルロゴ:1, タイトル背景:1, タイトルsince:1];	//	動かさないアイテム
function clearHistory()
{
	with(kag)
	{
		.historyOfStore.clear();
		.historyLayer.clear();
		(Dictionary.clear incontextof .pcflags.historyData)();
	}
}
function openTitleMenu()
{
	inMenu("title");
	tf.tt_opened	= true;

	//	履歴その他の消去
	with(kag)
	{
		.resetAllState();
		._lastPageName = "";
		._lastLabel = "";
//		dm("■openTitleMenu: lastPageName,lastLabel CLEAR");
		.stopAllTransitions();
		.stopAllActions(true);
		var pages = ["fore","back"];
		for( var i=0; i<pages.count; i++ )
		{
			var pg = kag[pages[i]];
			for( var j=0; j<pg.messages.count; j++ )
				pg.messages[j].clear();
		}
		.mainConductor.clear();
		.extraConductor.clear();
		.isFirstProcess = true;
		.skipMode = -1;

		//	背景を指定
		//	→	黒か白以外なら、白にする
		.fore.base.storage	= "white" if .fore.base.storage != "white" && .fore.base.storage != "black";
	}
	clearHistory();

	Scripts.execStorage("title.ttd") if typeof global.__get_title_timelinedata == "undefined";
	var	tdata	= __get_title_timelinedata(4);	//	タイトル開く
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000],,, true,, true);

	Menu_object.setClick();	//	右クリックには何も割り当てない

	//	自動移動
	if(cf.autoMouseMove)
	{
		//	セーブデータが存在するかどうか
		var	found	= false;
		var	cnt		= kag.pageBookMarks * kag.bookMarkPages;
		for(var i=0; i<cnt; i++)
		{
			if(kag.bookMarkDates[i] != void)
			{
				found	= true;
				break;
			}
		}
		moveCursor(Menu_object.find(found ? "タイトルload" : "タイトルstart"));	//	load/start へ
	}
}
//	クリア後かどうかでタイトル画像を変更したり、する
function TTsetProps(creates)
{
	//	本編終了
	if(sf.finishTitle)
	{//	クリア直後にSP1へ誘導するポップアップ
		if(!sf["popupedChapter13"])
		{
			popupMessage("新しく本が書庫へ追加されました。",,, 5000);
			sf["popupedChapter13"]	= true;
		}
	}
	//	オールクリア
	if(isAllCleared)
	{//	画像変更
		for(var i=0; i<creates.count; i++)
			addCreateStorageProp(creates[i], "_b");
	}
	//	左右のキー移動を無効化
	for(var i=0; i<creates.count; i++)
	{
		setCreateProp(creates[i], "leftItems", "");
		setCreateProp(creates[i], "rightItems", "");
	}
}
//	タイトルカーソルをすべて解放する
function TTfreeCursors(carry=false)
{
//	dm("TTfreeCursors()");
	//	複数存在するであろうタイトルカーソルを解放する
	if(!(Menu_object isvalid))
		return;	//	終了時に呼び出されたとき、すでに Menu_object が破棄されている可能性があるため
	var	list	= Menu_object.getMenuItems();
	var	cursors	= [];
	for(var i=0; i<list.count; i++)
	{
		if(list[i] != void && list[i] isvalid && list[i].name == "タイトルカーソル")
		{
			with(list[i])
			{
				if(.opacity < 32)
				{
					if(carry && cursors.count < 2)
						cursors.add(list[i]);
					else
						list[i].doInvalidate();
				}
				else
				{
					.ibv	= true;
					.ssact(600 * .opacity / 255, "opacity", 0);
					.name	= "no name(free)";	//	再度検索されないよう、名前を変更
				}
			}
		}
	}
	return cursors;
}
//	タイトルメニューを閉じる
function closeTitleMenu()
{
	delete tf.tt_opened;
	outMenu("title");

	Scripts.execStorage("title.ttd") if typeof global.__get_title_timelinedata == "undefined";
	var	tdata	= __get_title_timelinedata(7);	//	タイトル閉じる
	muteAllMenuItem(tdata);		//	すべて効果音mute
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000],, true);

	TTfreeCursors();
}
function clearTitleMenuEvents(tdata)
{
	//	クリアしておかないと、消去途中のボタンにマウスが合って表示されることがある
	//	mouseUp で、もう一度メニューを表示しようとしてしまう
	var	clearprops	= [ "mouseEnter", "mouseUp" ];
	for(var i=0; i<tdata[1].count; i++)
	{
		var	target	= tdata[1][i];
		for(var i=0; i<clearprops.count; i++)
		setCreateProp(target, clearprops[i], "");
	}
}
//	タイトルメニューからエクストラメニューへ
function openExtraMenu()
{
//	dm("openExtraMenu()");
	Scripts.execStorage("title.ttd") if typeof global.__get_title_timelinedata == "undefined";
	var	tdata	= __get_title_timelinedata(12);	//	タイトル→EXTRA
	clearTitleMenuEvents(tdata);
	muteAllMenuItem(tdata);		//	すべて効果音mute
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000], fixedTitleMenuItems, true);
	var	tdata	= __get_title_timelinedata(9);	//	EXTRA開く
	muteAllMenuItem(tdata, false);	//	効果音ON(素早くメニュー間の移動を行うと、レイヤーが残っていて再利用される可能性があるので)
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000], fixedTitleMenuItems,, true);

	Menu_object.setClick(, "returnTitleMenu()");	//	タイトルへ戻る

	TTfreeCursors();
}
//	エクストラメニューからタイトルメニューへ
function returnTitleMenu()
{
//	dm("returnTitleMenu()");
	//	他のメニューからエクストラメニューに戻ってきた時のトランジションが終了していなかったら止める
	kag.fore.base.stopTransition();
	kag.back.base.stopTransition();

	Scripts.execStorage("title.ttd") if typeof global.__get_title_timelinedata == "undefined";
	var	tdata	= __get_title_timelinedata(11);	//	EXTRA→タイトル
	clearTitleMenuEvents(tdata);
	muteAllMenuItem(tdata);		//	すべて効果音mute
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000], fixedTitleMenuItems, true);
	var	tdata	= __get_title_timelinedata(13);	//	タイトル開く
	muteAllMenuItem(tdata, false);	//	効果音ON(素早くメニュー間の移動を行うと、レイヤーが残っていて再利用される可能性があるので)
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("fore", tdata[1], tdata[2], %[absolute:1000000], fixedTitleMenuItems,, true);
	//	↑これだとボタンが出るのが時間掛かるから、専用のタイムラインが必要

	Menu_object.resetClick();
	Menu_object.setClick() if Menu_object._lclickstack.count == 0;	//	archive のデータをロードしたとき、Titleのスタックが無いので

	TTfreeCursors();
}
//	エクストラメニューから他のメニューへ
function goExtra2Next(func)
{
	if(func == void)
		return;
	delete tf.tt_opened;
//	dm("goExtra2Next("+func+")");

	//	トランジション停止
	kag.fore.base.stopTransition();
	kag.back.base.stopTransition();

	//	裏には黒背景を読み込む
	kag.back.base.storage	= "black";
	kag.back.base.setPos(-48, -48);	//	定位置へ移動

	Menu_object.doInvalidateByInvisible("fore");	//	裏へ行ったら消す、ついでにボタン無効化
	func("back");					//	裏にメニューを構成

	//	ボタンが処理を受け付けないようにする
	var	buttons	= [ "back", "soundmenu", "cgmenu", "archive" ];
	for(var i=0; i<buttons.count; i++)
	{
		var	item	= Menu_object.find("EXTRA"+buttons[i]);
		item.itemMode	= imParts if item != void;	//	パーツにする
	}

	//	トランジション
	kag.fore.base.beginTransition(%[time:(func == openArchiveMenu ? 800 : 300), method:"crossfade"]);
}
//	他のメニューからエクストラメニューへ
function returnExtraMenu()
{
//	dm("returnExtraMenu()");
	tf.tt_opened	= true;

	//	トランジション停止
	kag.fore.base.stopTransition();
	kag.back.base.stopTransition();

	Menu_object.doInvalidateByInvisible("fore");	//	裏へ行ったら消す、ついでにボタン無効化

	//	裏にメニューを構成
	Scripts.execStorage("title.ttd") if typeof global.__get_title_timelinedata == "undefined";
	var	tdata	= __get_title_timelinedata(9);	//	EXTRA開く
	TTsetProps(tdata[1]);
	Menu_object.playTimeline("back", tdata[1], tdata[2], %[absolute:1000000],,, true);

	Menu_object.setClick(, "returnTitleMenu()") if Menu_object.rclick != "returnTitleMenu()";	//	タイトルへ戻るを設定

	//	トランジション
	kag.fore.base.beginTransition(%[time:600, method:"crossfade"]);
}
//	シナリオ開始
function goTitle2Start()
{
	delete tf.tt_opened;
	with(Menu_object)
	{
		.resetClick();
		.setDisfocusableAll();	//	全てのボタンを無効化
		.doInvalidateByInvisible("fore");	//	メニューアイテムを無効化
	}
	onceIgnoreUnlockQuickMenu	= true;	//	outMenu での unlockQuickMenu を実行しない
	outMenu("title");	//	メッセージレイヤーを表示しないと、経路によって一回だけメッセージレイヤーの復帰がうまくいかないことがあるので、メッセージレイヤーは表示を戻すようにした

//	kag.tagHandlers.resetfont();//	タイトルのコンフィグで設定した状態を即座に反映させる
	kag.historyOfStore.clear();	//	履歴の消去	
	kag.historyLayer.clear();	//	通過履歴の消去
	kag.process('call.ks','*title2start');
}
function TTgetCursorVCenter()
{
	return target isvalid ? target.vcenter : vcenter;
}
function TTgetCursorCenterToLeft()
{
	return target isvalid ? (target.center - (target.width >> 1) - spacing - (width >> 1)) : center;
}
function TTgetCursorCenterToRight()
{
	return target isvalid ? (target.center + (target.width >> 1) + spacing + (width >> 1)) : center;
}
//	ボタンにカーソルが乗った
//var	tbcl = 117, tbct = 17;
function TTenterButton(btn)
{
//	dm("TTenterButton("+btn.name+")");
	btn.enter();

	//	残っていたら隠す
	var	cursors	= TTfreeCursors(false);

	//	毎回レイヤーを取得する
	var	fliplrs	= [ false, true ];
	for(var i=0; i<fliplrs.count; i++)
	{
		var	titlecursor	= Menu_object.getLayerFromElm(%[page:"fore", name:"タイトルカーソル", menuitem:-2]);	//	必ず新規に作成(-2で同じ名前のものが存在しても新規に作成する)
		titlecursor.fliplr	= void;
		with(titlecursor)
		{
			.ibv	= true;
			if(.fliplr !== fliplrs[i])
			{
				.loadImages(%[storage:"titleCursor" + (sf.finishTitle ? "_b" : ""), fliplr:fliplrs[i]]);	//	fliplr をアニメでも有効にするには、この方法で呼び出す(Anim_loadParams.fliplr で判定しているので)
				.fliplr	= fliplrs[i];
			}
			.target	= btn;
			//	ボタン画像に統一性がないので、綺麗に配置するにはすべてのボタンで調節するしかない
			if(fliplrs[i])
				.getCenter	= TTgetCursorCenterToLeft incontextof titlecursor;
			else
				.getCenter	= TTgetCursorCenterToRight incontextof titlecursor;
			.getVCenter	= TTgetCursorVCenter incontextof titlecursor;
			.spacing	= -2;
			.absolute	= 1001300;
			.opacity	= 0;
			.ssact(600, "opacity", 255);
			.holdact(1000, "center", .getCenter);
			.holdact(1000, "vcenter", .getVCenter);
			.type		= ltAlpha;
			.visible	= true;
		}
	}
}
//	ボタンからカーソルが離れた
function TTleaveButton(btn)
{
//	dm("TTleaveButton("+btn.name+")");
	btn.leave();
	TTfreeCursors();	//	アニメカーソルを消す
}

@endif
