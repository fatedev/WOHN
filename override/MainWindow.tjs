//;# MainWindow.tjs - KAG メインウィンドウ
//;# Copyright (C)2001-2008, W.Dee and contributors	 改変・配布は自由です
//;<<'END_OF_TJS_SCRIPT';

//	左右同時押しで自動実行を開始するか？
@set(ATONCECLICK_TO_AUTOMODE=0)

// このスクリプトは有効な perl5 スクリプトでもある

class KAGWindowOriginal extends Window
{
	// KAG のウィンドウ クラス
	// KAG の動作のメインな部分はここに記述してある

	// 以下のうち、/*C*/ のつく変数は、末端の perl スクリプトによって
	// 自動的に栞にコピーされるコードが生成される変数

	var scWidth = 640; // 画面横幅
	var scHeight = 480; // 画面縦幅
	var exWidth, exHeight; // 拡張画面サイズ⇒sysbase/fore.base/back.baseレイヤサイズ
	var pxWidth, pxHeight; // 現在のサイズ（sc〜exまでの値）

	var aboutWidth = 320; // 「このソフトについて」ウィンドウの横幅
	var aboutHeight = 200; // 同縦幅
	var aboutStorage = "about.ks";

	var isFirstProcess = true; // 一番最初の process の呼び出しかどうか

	var freeSaveDataMode = false; // 栞をメニューバーなどで管理せずに、個別のファイルとして管理する
	var saveThumbnail = false; // サムネイルを保存するかどうか
	var thumbnailWidth = 133; // サムネイルの横幅
	var thumbnailDepth = 8; // サムネイルのBMPモード。8か24
		// サムネイルの フルカラー化およびサイズフリー化のパッチは
		// ゆん氏からいただきました。
		// この場を借りてお礼申し上げます。


	var snapshotLayer = void; // 画像のスナップショットを一時的に保存するレイヤ
	var snapshotLockCount = 0; // ロックカウント

	var lastSaveDataNameGlobal = ""; // 最後に保存したフリーセーブモードでのファイル名
	/*C*/var lastSaveDataName = ""; // 最後に保存したフリーセーブモードでのファイル名

	var saveDataLocation = System.dataPath; // セーブデータ保存場所

	var saveDataID = "00000000-0000-0000-0000-000000000000"; // セーブデータの ID

	var readOnlyMode = false; // 読み込み専用モード(データをディスクに書かない)
	var dataName = "data"; // セーブデータ名
	var saveDataMode = ""; // データ保存モード( "c" で暗号化 )

	var recordHistoryOfStore = 0; // 通過履歴を記録するかどうか
		// 0 = 自動的には記録しない	 1 = 保存可能なラベルごと
		// 2 = 選択肢 ( @s タグ ) ごと
	var maxHistoryOfStore = 5; // 通過記録の最大数
	var historyOfStore = []; // 通過履歴データ
	var nextRecordHistory = false;
		// 次の保存可能なラベル通過時に現在の情報を保存するかどうか

	var stablePosibility = false;
		// 栞を保存可能なラベル間で stable になる可能性があるかどうか

	var fullScreened = false; // 現在フルスクリーンかどうか

	var isMain = true; // これがメインウィンドウかどうか

	var askOnClose = true; // 終了時に終了するかをユーザに聞くかどうか

	var helpFile = ""; // 「ヘルプ > 目次」で開くファイル

	var chDefaultAntialiased; // 文字にアンチエイリアスをかけるかどうか
	var chDefaultFace; // 文字のデフォルトのフォント

	var initialMessageLayerVisible = true;

	var historyLayer; // メッセージ履歴レイヤ
	/*C*/var historyWriteEnabled = true; // メッセージレイヤに文字を出力するか
	/*C*/var historyEnabled = true; // メッセージ履歴レイヤを表示可能か
	var historyShowing = false; // メッセージ履歴レイヤを表示中か
	var lastHistoryHiddenTick = 0; // 最後に履歴レイヤが非表示になったときの tick

	/*C*/var numCharacterLayers = 0; // 前景レイヤの数
	/*C*/var numMessageLayers = 1; // メッセージレイヤの数

	var sysbase;  // ベースレイヤ
	var _primaryLayer;
	property primaryLayer { getter { return sysbase; } };
	var exEventEnabled = false; // registerExEvent されたかどうか

	var fore = %[]; // 表レイヤ
	var back = %[]; // 裏レイヤ

	var scPositionX = %[]; // 立ち絵の中心座標(X)

	var tempLayer = void; // 一時的なレイヤ

	var lineBreak; // 行待ち用アニメーションレイヤ
	var pageBreak; // ページ待ち用グリフのアニメーションレイヤ
	var clickWaiting = false; // クリック待ちかどうか

	var mainConductor; // メインのコンダクタ
	var extraConductor; // 予備のコンダクタ
	var conductor; // 現在のコンダクタ
	var usingExtraConductor = false; // 予備のコンダクタを使用中かどうか
	var onExtraConductorReturn; // extraConductor から通常のコンダクタに戻るときによぶ関数

	var tagHandlers; // タグのハンドラ群辞書配列

	var saveMacros = true; // マクロを栞に保存するかどうか

	var current; // 現在操作中のメッセージレイヤ
	/*C*/var currentNum; // 現在操作中のメッセージレイヤ番号
	/*C*/var currentPage; // 現在操作中のメッセージレイヤのページ(表0/裏1)
	/*C*/var currentWithBack = false; // 裏画面にも文字を描画するかどうか

	var bgm; // BGM オブジェクト

	var numSEBuffers = 1; // 効果音バッファの数
	var se = []; // 効果音バッファオブジェクト

	var numMovies = 1; // ムービーオブジェクト数
//	var movie; // ムービーオブジェクト
	var movies = []; // ムービーオブジェクト

	var transCount; // 現在進行中のトランジションの数
	var moveCount; // 現在進行中の自動移動の数

	var chSpeeds = %[
		fast: 10, // 「高速」文字表示スピード
		normal: 30, // 「普通」文字表示スピード
		slow: 50, // 「遅い」文字表示スピード
		];

	var userChSpeed = 30; // ユーザの選んだ文字表示スピード
	var userCh2ndSpeed = -1; // ユーザの選んだ 既読部分の文字表示スピード
	var chNonStopToPageBreak = false; // ページ末まで一気に読み進むか ( l タグを無視するか )
	var ch2ndNonStopToPageBreak = false; // 既読の部分でページ末まで一気に読み進むか
	/*C*/var chUserMode = true; // 文字表示速度は現在ユーザの選んだものか
	/*C*/var chSpeed = 30; // 現在の文字表示スピード
	/*C*/var actualChSpeed = chSpeed; // 実際の文字表示スピード

	/*C*/var beforeNoWaitActualChSpeed; // nowait に入る前の actualChSpeed
	/*C*/var beforeNoWaitChUserMode; // nowait に入る前の chUserMode

	/*C*/var clickSkipEnabled = true; // クリックスキップが有効か
	/*C*/var nextSkipEnabled = true; // 次の選択肢(/未読)まで進むが有効か
@set(CHECK_CHANGE_SKIPMODE=0)
@if(!CHECK_CHANGE_SKIPMODE)
	var skipMode = 0; // スキップのモード
		// 0=スキップなし, 1=クリック待ち記号まで, 2=改ページ待ち記号まで, 3=次の停止まで
		// 4=早送り
@endif
@if(CHECK_CHANGE_SKIPMODE)
	var	_skipMode = 0;
	property skipMode
	{
		getter	{ return _skipMode; }
		setter(v)
		{
			if(v != skipMode)
			{
				dmt("skipMode = "+skipMode+" → "+v);
				_skipMode	= v;
			}
		}
	}
@endif
	var autoMode = false; // 自動読みすすみモードかどうか
	var autoModePageWait = 350; // 自動読みすすみモード時の改ページ時のウェイト
	var autoModeLineWait = 50; // 自動読みすすみモード時の行クリック待ち時のウェイト
		// 上の二つは、ノーウェイトにしたい場合は 0 ではなくて -4 を指定すること

	var skipKeyRepressed = false; // return あるいは space キー ( f キーなどではない )
								// が押されると true になる ( スキップ解除時に false

	var autoModePageWaits = %[
		fast: 400,	// 自動読みすすみモードの改ページ時 ウェイト「短い」
		faster: 700,  // 自動読みすすみモードの改ページ時 ウェイト「やや短い」
		medium: 1000,  // 自動読みすすみモードの改ページ時 ウェイト「普通」
		slower: 1300, // 自動読みすすみモードの改ページ時 ウェイト「やや遅い」
		slow: 2000, // 自動読みすすみモードの改ページ時 ウェイト「遅い」
		];

	var autoModeLineWaits = %[
		fast: 180,	// 自動読みすすみモードの行末 ウェイト「短い」
		faster: 240,  // 自動読みすすみモードの行末 ウェイト「やや短い」
		medium: 300,  // 自動読みすすみモードの行末 ウェイト「普通」
		slower: 360, // 自動読みすすみモードの行末 ウェイト「やや遅い」
		slow: 500, // 自動読みすすみモードの行末 ウェイト「遅い」
		];

	/*C*/var canCancelSkipByClick = true; // クリックによりスキップ状態のキャンセルができるか

	/*C*/var autoWCEnabled = false; // 自動ウェイトが有効かどうか
	/*C*/var autoWCChars = ""; // 自動ウェイトをかける文字
	var autoWCWaits = []; // 自動ウェイトのウェイト

	var timeOrigin; // resetWait で設定された時間原点
	var lastWaitTime; // wait mode=until で実際に待った時間

	var stableHandlers = []; // システムが安定(クリック待ち/停止)したときに呼ばれる
	var runHandlers = []; // システムが走り始めたときに呼ばれる
	var inStable = true; // 安定しているとき(走行中でないとき) true
	var inSleep = false; // s タグで停止しているとき true

	var updateBeforeCh = 0; // 文字を描画する前にいったん画面描画に入るかどうかのカウント

	var messageLayerHiding = false; // ユーザによりメッセージレイヤが隠されているか

	/*C*/var rightClickEnabled = true; // 右クリックが有効か
	/*C*/var rightClickCall = false; // 右クリックで特定のルーチンを呼ぶか
	/*C*/var rightClickJump = false; // 右クリックかで特定のラベルにジャンプするか
	/*C*/var rightClickExp = ""; // 右クリックで実行するスクリプト
	/*C*/var rightClickTarget = ""; // 右クリックでの呼び出し先
	/*C*/var rightClickStorage = ""; // 右クリックでの呼び出し先
	/*C*/var rightClickName = "default"; // 右クリックのメニュー表示名
	/*C*/var rightClickCurrentMenuName = ""; // 右クリックのメニューに現在設定されている名前
	var rightClickDefaultName = ""; // 右クリックのデフォルトのメニュー表示名

	/*C*/var lastClickGlyphVisible; // extraConductor を使用する直前にクリック待ち記号が可視だったかどうか
	var lastClickGlyphMessagePage;
		// extraConductor を使用する直前のクリック待ち記号の表示されているメッセージレイヤのページ
	var lastClickGlyphMessageNum; // 〃 番号
	var lastClickGlyphWhich; // 〃 "page" か "line" か
	var inSleepBeforeExtraConductor; // extraConductor を使用する直前が inSleep だったか

	// 通常のマウスカーソル
	/*C*/var cursorDefault = crArrow;  // 通常のマウスカーソル
	/*C*/var cursorPointed = crHandPoint;  // ボタン、リンク等をポイントした時のマウスカーソル
	/*C*/var cursorWaitingClick = crArrow;	// クリック待ちのマウスカーソル
	/*C*/var cursorDraggable = crSizeAll; // ドラッグ可能な場所用のマウスカーソル

	/*C*/var startAnchorEnabled = false; // 「最初に戻る」が使用可能かどうか

	/*C*/var storeEnabled = true; // ユーザが「栞をはさむ」メニューにアクセス可能かどうか
	/*C*/var restoreEnabled = true; // ユーザが「栞をたどる」メニューにアクセス可能かどうか
	var storeLabelPassed = false; // 保存可能なラベルを通過したかどうか
	/*C*/var currentLabel = ""; // 現在のラベル
	/*C*/var currentPageName = ""; // 現在のページ名
	var currentRecordName = ""; // 現在の記録名 ( trail_ストレージ_ラベル )
	var autoRecordPageShowing = false; // ラベル通過記録をするか

	var numBookMarks = 10; // メニューに用意する栞のサブメニュー項目の数
	var showBookMarkDate = false; // メニューに栞をはさんだ日付時刻を表示するか

	var bookMarkNames = []; // メニューに設定されている栞の名前
	var bookMarkDates = []; // 栞の日付
	var bookMarkProtectedStates = []; // 栞が保護されているかの情報

	var showFixedPitchOnlyInFontSelector = false; // フォント選択で固定ピットフォントのみを表示するか

	var flags = %[]; // フラグ(ユーザ)
	var pflags = %[]; // 「保存可能なラベル」を通過した時点でのフラグ(ユーザ)
	var pcflags = %[]; // 〃 (コア)
	var sflags = %[]; // システム変数領域(ユーザ)
	var scflags = %[]; // システム変数領域(コア)
	var tflags = %[]; // 一時フラグ

	var tempBookMarks = []; // 一時的に保存した栞

	var clickCount = 0; // 左クリックカウント
	var lastMouseDownX; // 最後にクリックされた X 座標
	var lastMouseDownY; // 最後にクリックされた Y 座標

	var mouseKeyEnabledCount = 0; // マウスキーが有効かどうか

	var kagPlugins = []; // KAG プラグイン

	var keyDownHook = []; // キーが押されたときに呼び出される物
	var leftClickHook = []; // 左クリックされたときに呼び出される物
	var rightClickHook = []; // 右クリックされたときに呼び出される物

	var padKeyMap; // パッドボタン -> ハンドラ(キーコード)。コンストラクタ内で設定
	var padKeyMapReverse; // キーコード -> パッドボタン。コンストラクタ内で設定


	var holdPeriodEventQueue = [];	// 保留にされたムービーのピリオドイベントキュー
	var isLeavePeriodEvent = false;	// ムービーのピリオドイベントを保留にするかどうか
	var isWaitPeriodEvent = false;	// ムービーのピリオドイベント待ち状態かどうか
	var waitedPeriodEventStorageName = void;	// ピリオドイベント待ちをコールしたストレージ名

	//------------------------------------------------------ コンストラクタ --

	function KAGWindowOriginal(ismain = true, width = 0, height = 0, invisible = false)
	{
		// コンストラクタ
		// 引数 : ismain : メインウィンドウとして作成されるのかどうか
		super.Window();

		// コンフィギュレーション
		isMain = ismain;
		if(ismain)
		{
			(KAGWindow_config incontextof this)();
			(KAGWindow_config_override incontextof this)()
				if typeof global.KAGWindow_config_override != "undefined";
		}

		userChSpeed = chSpeed = actualChSpeed = chSpeeds.normal;
		autoModePageWait = autoModePageWaits.medium;
		autoModeLineWait = autoModeLineWaits.medium;

		askOnClose = false if !ismain;

		// saveDataLocation がフルパスでないようならば System.exePath を
		// 付け加える
		if(saveDataLocation.indexOf(":") == -1)
			saveDataLocation = System.exePath + saveDataLocation;

		// セーブ可能かどうかの確認
		checkSave();

		// ログの出力先を saveDataLocation にする
		if(ismain) Debug.logLocation = saveDataLocation;

		// メニューアイテムの作成
		if(ismain) (KAGWindow_createMenus incontextof this)();
		noneMagnifyMenuItem.enabled	= false if System.getArgument("-fullscreenmode") == "primaryonly";
		if(typeof this.rightClickMenuItem != "undefined")
			rightClickDefaultName = rightClickCurrentMenuName = rightClickMenuItem.caption;

		if(typeof this.autoModeMediumMenuItem != "undefined")
			autoModeMediumMenuItem.checked = true;
		if(typeof this.windowedMenuItem != "undefined")
			windowedMenuItem.checked = true;
		if(typeof this.chNormalMenuItem != "undefined")
			chNormalMenuItem.checked = true;
		if(typeof this.ch2ndNoChangeMenuItem != "undefined")
			ch2ndNoChangeMenuItem.checked = true;

		if(ismain) (Menu_visible_config incontextof this)();

		createBookMarkSubMenus();

		// ウィンドウ外見の調整
		// ウィンドウ外見の調整
		if(ismain)
		{
			if (typeof this.registerExEvent != "undefined") {
				// windoeEx 拡張イベントを使用可能
				borderStyle = bsSizeable;
				innerSunken = false;
				registerExEvent();
				exEventEnabled = true;
			} else {
				// 拡張イベントなし
				borderStyle = bsSingle;
				innerSunken = true;
			}
		}
		else
		{
			borderStyle = bsDialog;
			innerSunken = false;
		}
		showScrollBars = false;
		if(ismain) caption = System.title;

		// システムタイトルをキャプションと同じに
//		if(ismain) System.title = caption;

		// ウィンドウサイズの調整
		if(width != 0 && height != 0)
		{
			// 与えられたサイズを適用
			scWidth = width;
			scHeight = height;
		}
		exWidth	 = scWidth	if (exWidth	 === void || exWidth  < scWidth );
		pxWidth	 = scWidth	if (pxWidth	 === void || pxWidth  < scWidth );
		pxWidth	 = exWidth	if (					 pxWidth  > exWidth );
		exHeight = scHeight if (exHeight === void || exHeight < scHeight);
		pxHeight = scHeight if (pxHeight === void || pxHeight < scHeight);
		pxHeight = exHeight if (					 pxHeight > exHeight);

		//	プライマリレイヤーの作成
		add(_primaryLayer = new Layer(this, null));
		with (_primaryLayer) {
			.name = "プライマリレイヤ";
			.setSize(exWidth, exHeight);
			.fillRect(0,0,exWidth, exHeight,0);
			.hasImage = false;
			//	画像のない領域でもマウスクリックが効くように
			.onMouseDown	= function(x, y, button)
			{
				if(button == mbLeft)
					window.onPrimaryClick();
				else if(button == mbRight)
					window.onPrimaryRightClick();
			} incontextof _primaryLayer;
		}
		// ベースになるレイヤ
		sysbase = new Layer(this, _primaryLayer);
		with (sysbase) {
			.setSize(exWidth, exHeight);
			.name = "トップレイヤ";
			.fillRect(0,0,exWidth, exHeight,0);
			.type = ltOpaque;
			.visible = true;
		}
		add(sysbase);

		// 背景レイヤの作成
		fore.messages = [];
		back.messages = [];
		fore.layers = [];
		back.layers = [];
		fore.base = new BaseLayer(this, primaryLayer, "表-背景");
		fore.base.order = 0;
		add(fore.base);
		fore.base.setImageSize(scWidth, scHeight);
		fore.base.setSizeToImageSize();
		fore.base.visible = true;
		back.base = new BaseLayer(this, primaryLayer, "裏-背景");
		back.base.order = 0;
		add(back.base);
		back.base.setImageSize(scWidth, scHeight);
		back.base.setSizeToImageSize();
		fore.base.setCompLayer(back.base);
		back.base.setCompLayer(fore.base);
		fore.base.freeImage();
		back.base.freeImage();

		fore.base.setDefaultCursor(cursorDefault);
		back.base.setDefaultCursor(cursorDefault);

		// メッセージ履歴レイヤの作成
		historyLayer = new HistoryLayer(this, fore.base);
		add(historyLayer);

		// 前景レイヤの作成
		allocateCharacterLayers(numCharacterLayers);

		// メッセージレイヤの作成
		allocateMessageLayers(numMessageLayers, false);
		current = fore.messages[0];
		currentNum = 0;
		currentPage = 0;
		currentWithBack = false;
		if(initialMessageLayerVisible)
		{
			fore.messages[0].visible = true;
			back.messages[0].visible = true;
		}

		chDefaultAntialiased = fore.messages[0].defaultAntialiased;
			// 文字にアンチエイリアスをかけるかどうか
		chDefaultFace = fore.messages[0].userFace;
			// 文字のデフォルトのフォント

		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;

		// 行待ち/ページ待ちアニメーションレイヤの作成
		lineBreak = new ClickGlyphLayer(this, fore.base);
		add(lineBreak);
		lineBreak.name = "行クリック待ち記号";
		pageBreak = new ClickGlyphLayer(this, fore.base);
		add(pageBreak);
		pageBreak.name = "ページ末クリック待ち記号";

		// タグハンドラ/コンダクタを作成
		tagHandlers = getHandlers();
		mainConductor = new Conductor(this, tagHandlers);
		add(mainConductor);
		conductor = mainConductor;
		extraConductor = new Conductor(this, tagHandlers);
		add(extraConductor);

		// BGM オブジェクトを作成
		bgm = new BGM(this);
		add(bgm);

		// 効果音オブジェクトを作成
		for(var i = 0; i < numSEBuffers; i++)
			add(se[i] = new SESoundBuffer(this, i));

		// ムービーオブジェクトを作成
		if(ismain)
		{
			for( var i = 0; i < numMovies; i++)
				add(movies[i] = new Movie(this,i));
		}

		// デフォルトのハンドラを追加
		stableHandlers.add(defaultStableHandler);
		runHandlers.add(defaultRunHandler);

		// システム変数の読み込み
		if(ismain) loadSystemVariables();

		// システム変数を反映
		if(ismain)
		{
			setSystemStateFromSystemVariables();
			setBookMarkMenuCaptions();
		}

		// メッセージレイヤのクリア
		clearMessageLayers(false);

		var forcefull = false; // 強制フルスクリーンフラグ
		with (System) {
			// 座標・サイズを決定
			var x = left,  y = top;			 // ウィンドウ座標
			var w = width, h = height;		 // ウィンドウサイズ
			var pw = pxWidth, ph = pxHeight; // 実サイズ
			var iw = pw, ih = ph;			 // インナーサイズ
			var mw = 0, mh = 0;				 // 最小補正サイズ
			//	フルスクリーン状態で終了した後、再起動後にウィンドウへ切り替えると、フルスクリーン状態の拡大率のまま
			//	ウィンドウに戻ってしまうので、フルスクリーンだった場合は拡大率を復帰させない
			var	numer = 1, denom = 1;
			if(!scflags.fullScreen)
			{
				numer = scflags.zoomNumer;
				denom = scflags.zoomDenom;
			}
			var zoom  = (numer > 0 && denom > 0) ? (numer / denom) : 0;
			var max;

			if (ismain) {
				// ウィンドウ実サイズ
				iw = pw * zoom if (zoom > 0);
				ih = ph * zoom if (zoom > 0);

				// 位置を復帰
				if (System.getArgument("-restorewindowpos") != "no") with (scflags) {
					x = .windowLeft	  if (.windowLeft	 !== void);
					y = .windowTop	  if (.windowTop	 !== void);
					w = .windowWidth  if (.windowWidth	 !== void);
					h = .windowHeight if (.windowHeight	 !== void);
					max = .windowMaximized;
					// コンソール表示状態もついでに復帰
@if(DEBUGWINDOWENABLED)
					if (debugWindowEnabled) with (Debug.console) try {
						var vis =  +scflags.consoleVisible;
						var place = scflags.consolePlacement;
						.visible = vis;
						if (vis && typeof place == "Object" && typeof .setPos == "Object") {
							var x, y, w, h;
							with (place) x=.normalLeft, y=.normalTop, w=.normalRight-x, h=.normalBottom-y;
							var mon = System.getMonitorInfo(false, x, y, w, h), setPos = .setPos;
							if (mon !== void) with (mon.work) {
								var resize = false;
								if (.w < w) w=.w, resize=true;
								if (.h < h) h=.h, resize=true;
								if (.x+.w < x+w) x=.x+.w-w;
								if (.y+.h < y+h) y=.y+.h-h;
								if (.x > x) x=.x;
								if (.y > y) y=.y;
								if (resize) setPos(x, y, w, h);
								else		setPos(x, y);
							}
							.maximize() if (place.showCmd == 3/*SW_SHOWMAMIMIZED*/ && typeof .maximize == "Object");
						}
					} catch {}
@endif
				}
			}
			w = iw if (w <= 0);
			h = ih if (h <= 0);
			mw = w\3, mh = h\3 if (ismain);

			// モニタ情報の取得
			var info;
			var desktop = %[ /**/  x:.desktopLeft,	 y:.desktopTop,
							 /**/  w:.desktopWidth,	 h:.desktopHeight ];
			var screen	= %[ /**/  x: 0,			 y: 0,
							 /**/  w:.screenWidth,	 h:.screenHeight  ];

			// WindowExプラグインが使える場合はそちらを使用する
			if (typeof .getMonitorInfo != "undefined") {
				var info = .getMonitorInfo(true, x, y, w, h);
				if (typeof info == "Object") {
					(Dictionary.assign incontextof desktop)(info.work,	  true);
					(Dictionary.assign incontextof screen )(info.monitor, true);
				}
			}

			// ズーム状態補正
			var sw = screen.w, sh = screen.h;
			var over = (iw > sw || ih >= sh);
			if (!ismain || over || !zoom) {
				numer = denom = 1;
				// 標準サイズでも画面からはみ出す場合
				if (ismain && over && (pw > sw || ph >= sh)) {
					// 3/4〜1/4 まで縮小できるか試す
					for (numer=3, denom=4; numer > 1; numer--) 
						if (pw*numer/denom < sw && ph*numer/denom < sh) break;
					// 強制でフルスクリーン
					forcefull = true;
				}
			}
			setZoom(numer, denom);

			// ウィンドウ位置の調節
			with (desktop) {
				x = .x+.w - w if (x	  + mw > .x+.w);
				y = .y+.h - h if (y	  + mh > .y+.h);
				x = .x		  if (x+w - mw < .x	  );
				y = .y		  if (y		   < .y	  );
			}
			setPos(x, y) if (left != x || top != y);
			maximize() if (max && typeof this.maximize != "undefined");
		}

		// パッドボタンハンドラの作成
		createPadKeyMap();

		// ウィンドウを表示
		if(ismain) visible = !invisible;

		// -fszoom が設定されていなければ、前回選択されていたものを選ぶ
		var	fszoom	= System.getArgument("-fszoom");
		dm("-fszoom = "+fszoom+" / scflags.fszoom = "+scflags.fszoom);
		if(fszoom === void)
		{
			switch(scflags.fszoom)
			{
			case "inner":	onInnerMagnifyMenuItemClick();	break;
			case "outer":	onOuterMagnifyMenuItemClick();	break;
			case "none":	onNoneMagnifyMenuItemClick();	break;
			}
		}
		else
			this[fszoom+"MagnifyMenuItem"].checked	= true if typeof this[fszoom+"MagnifyMenuItem"] != "undefined";

		// 前回起動時にフルスクリーンだった場合はフルスクリーンにしてみる
		// または画面サイズがウィンドウサイズよりも小さい場合はフルスクリーンにしてみる
		if(ismain && visible)
		{
			if ((scflags.fullScreen !== void && +scflags.fullScreen) || forcefull)
				onFullScreenMenuItemClick(this);
		}

		// いったんシステム変数を書き出す
		if(ismain) {
			// scflags.fullScreen が破棄されてしまうため保存
			var origfs = scflags.fullScreen;

			saveSystemVariables();

			// !visible 時は scflags.fullScreen を復帰
			scflags.fullScreen = origfs if (!visible);
		}
	}

	//------------------------------------------------------------- finalize --

	function finalize()
	{
		// finalize メソッド
		clearBgmStop();
		clearBgmLabel();

		// プラグインの無効化
		for(var i = 0; i < kagPlugins.count; i++) invalidate kagPlugins[i];

		// 前景、メッセージレイヤを無効化
		for(var i = 0; i< fore.layers.count; i++) invalidate fore.layers[i];
		for(var i = 0; i< back.layers.count; i++) invalidate back.layers[i];
		for(var i = 0; i< fore.messages.count; i++) invalidate fore.messages[i];
		for(var i = 0; i< back.messages.count; i++) invalidate back.messages[i];

		// snapshotLayer を無効化
		invalidate snapshotLayer if snapshotLayer !== void;

		// tempLayer を無効化
		invalidate tempLayer if tempLayer !== void;

		// スーパークラスの finalize を呼ぶ
		super.finalize(...);
	}

	//-------------------------------------------------- onCloseQuery/close --

	function onCloseYes() {
		shutdown();
	}

	function onCloseQuery()
	{
		saveSystemVariables();
		if(!askOnClose) {
			// コンソールを最大化で閉じないように
			with (Debug.console) .restoreMaximize() if (.visible && typeof .restoreMaximize != "undefined");
			return super.onCloseQuery(true);
		}
		showRestore() if _minimized;	//	最小化状態を解除
		askYesNo("終了しますか？", "確認", onCloseYes);
		super.onCloseQuery(false);
	}

	function close()
	{
		// ウィンドウを閉じる
		saveSystemVariables();
		super.close(...);
	}

	function shutdown()
	{
		// ウィンドウを閉じるが、終了確認を行わない
		// このメソッド内で close をすると、様々な
		// オブジェクトが無効化されてしまい、この
		// 関数から戻った先でエラーが発生する。
		// そのため、いったん AsyncTrigger を介して、
		// 全てのメソッドから帰ったあとにシャットダウン
		// 処理を行う。
		global.shutdownTrigger =
			new AsyncTrigger(handleShutdown, '');
		global.shutdownTrigger.cached = true;
		global.shutdownTrigger.trigger();
		if(conductor.status == conductor.mRun)
			conductor.interrupt();
			// コンダクタが走行中の時は
			// コンダクタに中断を伝える
	}

	function handleShutdown()
	{
		// shutdown() からのシャットダウン要求を
		// 実際に処理するメソッド
		var askOnClose_save = askOnClose;
		askOnClose = false;
		close();
		if(this isvalid) askOnClose = askOnClose_save;
	}

	function closeByScript(elm)
	{
		// ウィンドウを閉じる
		// ちょっと面倒くさいとをやっているのは
		// shutdown と同じ理由
		// 「いいえ」が選択されてウィンドウが閉じなかった場合は
		// 'not_closed' トリガが発行され、実行は再開する。
		var askOnClose_save = askOnClose;
		if(elm.ask !== void && !(+elm.ask)) askOnClose = false;
		global.shutdownTrigger =
			new AsyncTrigger(handleCloseByScript, '');
		global.shutdownTrigger.cached = true;
		global.shutdownTrigger.trigger();

		// closeByScript は、このハンドラが終わった直後に
		// 「終了しますか？」のダイアログを表示する。
		// 終了する場合はそのまま終了する。
		// 終了しない場合は 'not_closed' トリガが発行され、
		// 実行は継続する。
		conductor.wait(%[
			not_closed : askOnClose_save
			? (function
			{
				// 実際にこれが呼ばれることはないが、一応
				askOnClose = true;
			} incontextof this)
			: (function
			{
			} incontextof this)
			]);
	}

	function handleCloseByScript()
	{
		// shutdown() からのシャットダウン要求を
		// 実際に処理するメソッド
		close();
		if(this isvalid) // いいえ が選択された場合
			conductor.trigger('not_closed');
	}

	//------------------------------------------------------ プラグイン処理 --

	function forEachEventHook(method, func, arg)
	{
		// すべてのプラグインオブジェクトの method にたいして
		// func を実行する
		// func の引数には各要素と arg が渡される
		if(kagPlugins.count)
		{
			var array = [];
			array.assign(kagPlugins); // いったんコピーし、コピーした物に対して実行する
			var arraycount = array.count;
			for(var i =0; i<arraycount; i++)
			{
				var obj = array[i];
				if(typeof obj[method] != "undefined")
					func(obj[method], arg);
			}
		}
	}

	function addPlugin(plugin)
	{
		// プラグインオブジェクトを追加
		kagPlugins.add(plugin);
	}

	function removePlugin(plugin)
	{
		// プラグインオブジェクトを削除
		kagPlugins.remove(plugin);
	}

	//---------------------------------------------------------- フック処理 --

	var hookMap = %[ keyDown:this.keyDownHook, leftClick:this.leftClickHook, rightClick:this.rightClickHook ];
	function callHook(tag, *)
	{
		// 文字列を渡されたときはテーブルから参照
		var array = (typeof tag == "String" && tag != "") ? hookMap[tag] : tag;
		if (typeof array != "Object" || array.count <= 0) return false;

		// 順番に呼び出し
		var ret = false, tmp = [];
		tmp.assign(array);
		for (var i = 0, cnt = tmp.count; i < cnt; i++) {
			var func = tmp[i];
			ret |= func(*) if (typeof func == "Object");
		}
		return !!ret;
	}
	function addHook(tag, func) {
		var array = tag;
		if (typeof tag == "String" && tag != "") {
			array = hookMap[tag];
			array = hookMap[tag] = [] if (array === void);
		}
		array.add(func) if (typeof array == "Object");
	}
	function removeHook(tag, func) {
		var array = (typeof tag == "String" && tag != "") ? hookMap[tag] : tag;
		array.remove(func, true) if (typeof array == "Object");
	}

	//------------------------------------------ パッドのキーマッピング作成 --

	function createPadKeyMap()
	{
		// パッド入力とそれに対応する動作のマッピング。
		// 標準では十字キーはキーボードのカーソルキーにマッピング、
		// ボタン1 は Return、ボタン2 は ESC、ボタン3 は メッセージ履歴の表示
		// にマッピングされる。
		// 関数を指定した場合はボタンを押したときにはその関数が呼ばれる。

		padKeyMap = %[
			VK_PADLEFT =>		VK_LEFT,
			VK_PADRIGHT =>		VK_RIGHT,
			VK_PADUP =>			VK_UP,
			VK_PADDOWN =>		VK_DOWN,
			VK_PAD1 =>			VK_RETURN,
			VK_PAD2 =>			VK_ESCAPE,
			VK_PAD3 =>
				function(ev) {
					showHistoryByKey(this);
				},
			];

		// padKeyMapReverse を作成
		padKeyMapReverse = %[];
		var ar = [];
		ar.assign(padKeyMap);
		for(var i = 0; i < ar.count; i += 2)
		{
			if(typeof(ar[i+1]) != "Object")
			{
				padKeyMapReverse[ar[i+1]] = ar[i];
			}
		}
	}

	function getKeyState(key)
	{
		// System.getKeyState 関数と同等だが、パッドのキーに関しても
		// 反応を返す
		var sg = System.getKeyState;
		var state = sg(key);
		if(state) return true;
		var pad_key = padKeyMapReverse[key];
		if(pad_key !== void)
		{
			// キーコード -> パッドのキーコードの変換が見つかった
			return sg(pad_key);
		}
		return false;
	}

	//-------------------------------------------------------------- action --

	function action(ev)
	{
		if(ev.type == 'onKeyDown' && ev.target === this)
		{
			// パッド入力に対応する処理
			var handler = padKeyMap[ev.key];
			if(handler !== void)
			{
				// ハンドラが見つかった
				if(typeof(handler) == "Object")
				{
					// ハンドラは関数
					(handler incontextof this)(ev);
				}
				else
				{
					// ハンドラはキーコード
					postInputEvent('onKeyDown', %[key: handler]);
					postInputEvent('onKeyUp', %[key: handler]);
				}
			}
		}
	}

	//------------------------------------------------------ tempLayer 関連 --

	property temporaryLayer
	{
		// ワークエリアとして一時的に使用できるレイヤを返す
		getter()
		{
			if(tempLayer === void)
			{
				tempLayer = new KAGLayer(this, primaryLayer);
				tempLayer.name = "一時ワークレイヤ";
			}
			return tempLayer;
		}
	}

	//------------------------------------------ フルスクリーン・ズーム処理 --

	property fullScreenMode { getter {
		var tag = System.getArgument("-fullscreenmode");
		var map = %[ auto:-1, primaryonly:0, usepseudo:1, pseudoall:3 ];
		return (tag != "" && typeof map[tag] != "undefined") ? map[tag] : -1;
	} }

	function isPseudoMode() {
		if (pseudoFullScreened) return true;
		var info, mode = fullScreenMode;
		mode = 0 if (!exEventEnabled);
		switch (mode) {
		case -1:
			// マルチモニタ環境の場合は擬似フルスクリーン
			mode = (typeof	System.getDisplayMonitors != "undefined" &&
					(info = System.getDisplayMonitors()) !== void &&
					(info.count > 1));
			break;
		case 1:
			// ウィンドウがセカンダリ以降なら擬似フルスクリーン
			mode = (typeof	System.getMonitorInfo != "undefined" &&
					(info = System.getMonitorInfo(true, this)) !== void &&
					!info.primary);
			break;
		}
		return !!mode;
	}

	var _pseudoFullScreen;
	property pseudoFullScreened { getter { return (_pseudoFullScreen !== void); } }

	var _lastWindowSize;
	property fullScreen {
		getter { return super.fullScreen || pseudoFullScreened; }
		setter(v) {
			if (!fullScreen == !v) return;
			if (typeof this.screenModeChangedTrigger == "undefined") {
				add(   this.screenModeChangedTrigger = new AsyncTrigger(this, "screenModeChanged"));
				with (		screenModeChangedTrigger) .cached = true, .mode = atmAtIdle, .trigged = false;
			}
			var trig =		screenModeChangedTrigger;
			with (trig) {
				.maximize = .resetIcon = .callResize = .windowPos = void;
				if (.trigged) throw new Exception("Cant set fullScreen, changed trigger not completed.");
			}

			// フック
			callHook("prepareChangeScreenMode", v);
			onMovieScreenChanging(v);

			// フルスクリーンモードチェック
			if (v) {
				var min = 1;
				_lastWindowSize = %[
					/**/window: ((typeof getNormalRect == "Object") ? getNormalRect() :
								 /**/%[ x:left, y:top, w:width, h:height ]) ];
				_lastWindowSize.window	= %[ x:left, y:top, w:width, h:height ] if _lastWindowSize.window.left === void;
				if (isPseudoMode()) {
					// 擬似フルスクリーン
					var max = (typeof this.maximized != "undefined") ? maximized : false;
					_pseudoFullScreen =
						%[	/**/x:left, y:top, w:width, h:height,
							/**/max:max, restmax:(System.getArgument("-restoremaximizebyf2w") == "yes"),
							/**/rect:getNormalRect(), bs:borderStyle, menu:menu.visible,
							/**/shortcut:(menu.visible ? makePseudoMenuTable(menu) : void) ];
					if (!max) {
						visible = false;
						trig.maximize = true;
					}
					menu.visible = false;
					borderStyle = bsNone;
				} else {
					// プライマリフルスクリーン
					setInnerSize(pxWidth, pxHeight);
					resetPrimaryPos();
					trig = void;
					super.fullScreen = true;
					min = -1;
					// 解像度が変わる場合があるので
					_lastWindowSize.fullscreen = %[ 
						/**/w:System.screenWidth, h:System.screenHeight, x:0, y:0 ];
				}
				SetWindowControlMenu(this, min, 0, 1, 1);
			} else {
				super.fullScreen = false;
				if (pseudoFullScreened) with (_pseudoFullScreen) {
					visible = false;
					setPos (.x, .y);
					setSize(.w, .h);
					menu.visible  = .menu;
					borderStyle	  = .bs;

					trig.callResize = true;
					if (.max) {
						trig.windowPos = .rect;
						trig.maximize = .restmax;;
					}
					showRestore();
					_pseudoFullScreen = void;
				} else {
					setZoom(origZoomNumer, origZoomDenom);
					trig.resetIcon = true;
				}

				// メニューを消す
				SetWindowControlMenu(this);
				_lastWindowSize = void;
			}
			windowSizeMenu.enabled	= !fullScreen;	//	ウィンドウサイズの設定はウィンドウ表示のときのみ
			if (trig !== void) with (trig) {
				.trigged = true;
				.trigger();
			} else
				callHook("afterChangeScreenMode");
		}
	}
	function screenModeChanged() {
		with (screenModeChangedTrigger) {
			resetWindowIcon() if (.resetIcon && typeof this.resetWindowIcon != "undefined");
			if (.windowPos !== void) with (.windowPos) {
				setPos (.x, .y);
				setSize(.w, .h);
			}
			if (	 .maximize	) maximize();
			else if (.callResize) onResize();

			.maximize = .resetIcon = .callResize = .windowPos = void;
			.trigged = false;
		}
		visible = true if !visible;

		// フック
		callHook("afterChangeScreenMode");
	}
	function resetPrimaryPos(z = 0, w, h) {
		with (_primaryLayer) {
			if (z > 0) {
				var x = (innerWidth	 - w) / (z*2);
				var y = (innerHeight - h) / (z*2);
				w = Math.ceil(innerWidth  / z);
				h = Math.ceil(innerHeight / z);
				sysbase.setPos(x, y);
				.hasImage = true;
				.setImageSize(w, h);
				.fillRect(0, 0, w, h, 0);
				.setSize(w, h);
			} else {
				sysbase.setPos(0, 0);
				.hasImage = false;
				.setSize(pxWidth, pxHeight);
			}
		}
		with (sysbase) onMoviePrimaryPosChanged(.left, .top);
	}

	var _zoomNumer, _zoomDenom;
	property origZoomNumer { setter(v) { super.zoomNumer = v; } getter { return tempZoomed ? _zoomNumer : super.zoomNumer; } }
	property origZoomDenom { setter(v) { super.zoomDenom = v; } getter { return tempZoomed ? _zoomDenom : super.zoomDenom; } }
	property tempZoomed	   { getter { return _zoomNumer !== void; } }
	function setZoom(numer, denom, resize = true) {
//		dm("setZoom("+numer+", "+denom+", "+resize+")");
		if (super.fullScreen) return;
		_zoomNumer = _zoomDenom = void;
		var zn = super.zoomNumer;
		var zd = super.zoomDenom;
		super.setZoom(numer, denom);
//		dm("super.setZoom("+numer+", "+denom+") → "+zoomNumer+", "+zoomDenom);
		var z = zoomNumer / zoomDenom;
		var w = pxWidth	 * z;
		var h = pxHeight * z;
		if (resize) {
//			dm("setInnerSize("+w+", "+h+")");
			setInnerSize(w, h);
			resetPrimaryPos();
		} else {
			resetPrimaryPos(z, w, h);
			_zoomNumer = zn;
			_zoomDenom = zd;
		}
		top++, top--; // VCRなムービーが追従するようにおまじない XXX
//		dm("callHook(afterChangeWindowSize)");
		callHook("afterChangeWindowSize");
	}

	// MenuItem.shortcut からテーブルを作成
	function makePseudoMenuTable(menu, table) {
		var list = menu.children, first = (table === void);
		table = %[] if (first);
		for (var i = list.count-1; i >= 0; i--) {
			var item = list[i];
			if (item.children.count > 0) makePseudoMenuTable(item, table);
			else if (item.shortcut != "") {
				var sc = item.shortcut.split("+");
				var key = sc[sc.count-1], sft = 0, vk;
				if (key == "") continue;
				sc.erase(sc.count-1);
				key = key.toUpperCase();
				vk	= shortcutTextToVirtualKeyString[key];
				key = vk if (vk != "");
				if (typeof global["VK_"+key] == "undefined") continue;
				key =	  +global["VK_"+key];
				table[key] = %[] if (table[key] === void);
				for (var j = sc.count-1; j >= 0; j--) {
					var tag = sc[j];
					tag = tag.toLowerCase() if (tag != "");
					switch (tag) {
					case "shift":	sft |= ssShift; break;
					case "ctrl":	sft |= ssCtrl;	break;
					case "alt":		sft |= ssAlt;	break;
					}
				}
				table[key][sft] = item.onClick;
			}
		}
		if (first) {
			var f10 = table[VK_F10];
			f10 = table[VK_F10] = %[] if (f10 === void);
			f10[0] = trackPseudoMenu;
		}
		return table;
	}
	// shortcut ⇒ VK_* 例外変換用テーブル
	var shortcutTextToVirtualKeyString = (const)%[
		"ENTER"=>"RETURN",
		"PAGEUP"=>"PRIOR",
		"PAGEDOWN"=>"NEXT"//,
		];
	// 擬似フルスクリーン時ショートカットキー処理
	function pseudoMenuShortcut(key, shift) {
		var table, info, func;
		if (pseudoFullScreened &&
			(table = _pseudoFullScreen.shortcut) !== void &&
			(info  = table[key])  !== void &&
			(func  = info[+shift]) !== void &&
			!(shift & ssRepeat))
		{
			func();
			return true;
		}
		return false;
	}
	var ignoreTrackPseudoMenu = false;
	function trackPseudoMenu(bykey = true) {
		if (ignoreTrackPseudoMenu) return;
		var popup = new PopupMenuWindow(this, bykey ? 1: -1);
		invalidate popup;
	}

	// スクリーンセーバー抑制
	function onScreenSave()		  { return true; }
	function onMonitorPower(mode) { return (mode > 0); }

	//-------------------------------------------------------- リサイズ処理 --

	property maximizeMode { getter {
/*		var tag = System.getArgument("-maximizemode");
		var map = %[ auto:-1, maximize:0, fullscreen:1 ];
		return (tag != "" && typeof map[tag] != "undefined") ? map[tag] : -1;
*/		return 1;
	} }

	function onMaximizeQuery() {
		if (pseudoFullScreened) return;
		var mode = maximizeMode;
		if (!mode || (mode < 0 && windowResizeable)) return;
		onFullScreenMenuItemClick();
		return true;
	}
	function onMouseMove(x, y) {
		if (pseudoFullScreened && y == 0) trackPseudoMenu(false);
		return super.onMouseMove(...);
	}
	var _minimized;
	function onMinimize() { _minimized = true;	}
	function onHide()	  { _minimized = true;	}
	function onShow()	  { _minimized = false; }

	function limitSize(mon)
	{
		var	szchg	= false;
		if(!fullScreen)
		{
			mon	= System.getMonitorInfo(true, this) if mon == void;
			var	ml	= mon.work.x, mt = mon.work.y;
			var	mw	= mon.work.w, mh = mon.work.h;
			if(mw < width)
			{
				var rate = innerHeight / innerWidth;
				width	= mw;
				innerHeight	= int(rate * innerWidth);
				szchg	= true;
			}
			if(mh < height)
			{
				var rate = innerWidth / innerHeight;
				height	= mh;
				innerWidth	= int(rate * innerHeight);
				szchg	= true;
			}
			if(left < ml)
				left	= ml;
			else if(left + width > ml + mw)
				left	= ml + mw - width;
			if(top < mt)
				top	= mt;
			else if(top + height > mt + mh)
				top	= mt + mh - height;
		}
		return szchg;
	}

	var _onResizeProcess = true;
	function onResize() {
//		dmt("onResize: "+innerWidth+", "+innerHeight);
		if(limitSize())
			return;
//		dm("→ "+innerWidth+", "+pxWidth);
		if (!_minimized && _onResizeProcess && _resizeSnapshot === void) {
			_onResizeProcess = false;
			var numer = innerWidth, denom = pxWidth;
			var max = (typeof this.maximized != "undefined") ? maximized : false;
			if (max) {
				var vert = (innerWidth/innerHeight > pxWidth/pxHeight);
				var zoom = System.getArgument("-fszoom");
				if (!pseudoFullScreened) {
					var mz = System.getArgument("-maximizezoom");
					zoom = mz if (mz != "fszoom");
				}
				switch (zoom) {
				case "outer": vert = !vert; break;
				case "no":
				case "none":	numer = denom = 1; vert = false; break;
				case "middle": // 中間拡大
					var per = System.getArgument("-mzpercent");
					per = (per == "") ? 50 : (int)(+per);
					if (per < 0) {
						numer = -per;
						denom = 100;
					} else {
						per = 100 if (per > 100);
						var iw = innerWidth, ih = innerHeight;
						var pw =	pxWidth, ph =	 pxHeight;
						if (vert) iw <-> ih, pw <-> ph;
						numer = (int)(iw + (ih - iw) * per / 100);
						denom = (int)(pw + (ph - pw) * per / 100);
					}
					vert = false;
					break;
				}
				if (vert) numer = innerHeight, denom = pxHeight;
			}
			setZoom(numer, denom, !max);	//	通常はここでは設定されない(_resizeSnapshot !== void のときだけ)
			callResizeHook();
			_onResizeProcess = true;
		}
		return super.onResize();
	}
	var _windowResizeable = true; // フレームを掴んでリサイズ可能かどうか
	property windowResizeable {
		getter { return _windowResizeable; }
		setter(v) {
			_windowResizeable = v;
			disableResize = !v if (exEventEnabled);
			callHook("afterChangeWindowResizeable");
		}
	}
	function onResizing(rect) {
//		dmt("onResizing("+rect.x+", "+rect.y+", "+rect.w+", "+rect.h+")");
		if (_resizeSnapshot === void) onMoveSizeBegin();
		if (!windowResizeable) {
			with (_resizeSnapshot.window) {
				rect.x = .x;
				rect.y = .y;
				rect.w = .w;
				rect.h = .h;
			}
			return true;
		}
		var w, h, dw, dh, cw, ch;
		with (_resizeSnapshot) dw=.dw, dh=.dh, cw=.cw, ch=.ch;
		with (rect) {
			w = .w - dw;
			h = .h - dh;
			var sel;
			switch (.type) {
			case 1: case 2: sel = true;	 break;
			case 3: case 6: sel = false; break;
			default: sel = (w / h) > (pxWidth / pxHeight); break;
			}
			if (sel) h = w * pxHeight \ pxWidth;
			else	 w = h * pxWidth  \ pxHeight;
			if (w < pxWidth\4) {
				w = pxWidth\4;
				h = w * pxHeight \ pxWidth;
			}
			w += dw;
			h += dh;
			const repos = function(type, p, o, n, sel) {
				switch (type % 3) {
				case 0:	 return sel ? p+(o-n)\2 : p;
				case 1:	 return p+o-n;
				default: return p;
				}
			};
			var x = repos(.type,   .x, .w, w, true);
			var y = repos(.type\3, .y, .h, h, false);
			if (.x == x && .y == y && .w == w && .h == h) return false;
			.x = x;
			.y = y;
			.w = w;
			.h = h;
		}
		return true;
	}
	var _resizeSnapshot = void;
	function onMoveSizeBegin() {
		_resizeSnapshot = %[
		window:		 getWindowRect(),
		client:		 getClientRect(),
		innerWidth:	 innerWidth,
		innerHeight: innerHeight
			];
		with (_resizeSnapshot) {
			.dw = .window.w	 - .innerWidth;
			.dh = .window.h - .innerHeight;
		}
	}
	function onMoveSizeEnd() {
//		dm("onResizeEnd/zoomed", innerWidth, innerHeight);
		limitSize();					//	サイズを制限して位置を補正
		setZoom(innerWidth, pxWidth);	//	Zoomを変更
		_resizeSnapshot = void;
		callResizeHook();
	}
	function callResizeHook() {
//		dm("callResizeHook");
		callHook("onWindowResizeHook", this, innerWidth, innerHeight);
		updateWindowSizeChecked(fullScreen ? 0 : innerWidth);
	}
	function onDisplayChanged() {
//		dm("callDisplayChanged");
		callHook("onDisplayChangedHook", this);
	}

	function onMove()
	{
		var	mon	= System.getMonitorInfo(true, this);
		var	mw	= mon.work.w, mh = mon.work.h;

		//	zoomNumer == zoomDenom 以外のときは、複数のモニターに重ならないよう修正する
		if(!fullScreen && zoomNumer != zoomDenom && limitSize(mon))
			return;

		//	表示されているモニタが変化したか、そのウィンドウサイズにできるかを調べ、メニューを更新
		var	bw	= width - innerWidth, bh = height - innerHeight;	//	ウィンドウの枠のサイズ
		for(var i=0; i<windowWidthes.count; i++)
		{
			var	w	= windowWidthes[i];
			var	h	= (w * 9) \ 16;
//			dm("monitor: "+mw+", "+mh+" / "+w+", "+h);
			this["window"+w+"MenuItem"].enabled	= mw >= w + bw && mh >= h + bh;
		}
	}

	//------------------------------------------------ メニューアイテム関連 --

	function onExitMenuItemClick(sender)
	{
		close();
	}

	function onRightClickMenuItemClick(sender)
	{
		onPrimaryRightClick(); // 右クリックの動作
	}

	function onShowHistoryMenuItemClick(sender)
	{
		if(historyLayer.visible) hideHistory(); else showHistory();
	}

	function onSkipToNextStopMenuItemClick(sender)
	{
		if (skipMode) cancelSkip(); else skipToStop();
		setMenuAccessibleAll();
	}


	function onAutoLabelSaveModeMenuItemClick(sender)
	{
		autoLabelSaveMode = !autoLabelSaveMode;
		if (autoLabelSaveMode) {
			canDebugControl();
		} 
		if (typeof this.autoLabelSaveModeMenuItem != "undefined") {
			autoLabelSaveModeMenuItem.checked = autoLabelSaveMode;
		}
		if (typeof this.skipToPrevLabelMenuItem != "undefined") {
			skipToPrevLabelMenuItem.enabled = autoLabelSaveMode;
		}
	}

	
	function onSkipToNextLabelMenuItemClick(sender)
	{
		if (skipMode) cancelSkip(); else skipToLabel();
		setMenuAccessibleAll();
	}

	function onSkipToPrevLabelMenuItemClick(sender)
	{
		if (autoLabelSaveMode) {
			// 外部ツールに頼る
			var exefile = "%stools\\searchprev.exe".sprintf(
				Storages.getLocalName(System.exePath));
			var param = "\"%s\" \"%s\" %d".sprintf(
				Storages.getLocalName(System.exeName),
				Storages.getLocalName(Storages.getPlacedPath(pcflags.mainConductor.storageName)),
				pcflags.mainConductor.curLine);
			System.shellExecute(exefile, param);
		}
	}
	
	function onAutoModeMenuItemClick(sender)
	{
		if(autoMode) {
			cancelAutoMode();
		} else {
			enterAutoMode();
		}
		setMenuAccessibleAll();
	}

	function onAutoModeWaitMenuClick(sender)
	{
		sender.checked = true;
		autoModePageWait = sender.wait;
		autoModeLineWait = sender.lwait;
	}

	function onBackStartMenuItemClick(sender)
	{
		goBackHistory();
	}

	function onGoToStartMenuItemClick(sender)
	{
		goToStartWithAsk();
	}

	function onAllSkipMenuItemClick(sender)
	{
		sender.checked = true;
//		  allskip = sender.skip;
		saveSystemVariables();
	}

	function onCancelAutoWhenClickMenuItemClick(sender)
	{
		sender.checked = true;
		cancelAutoWhenClick = sender.cancel;
		saveSystemVariables();
	}

	function onCancelSkipWhenClickMenuItemClick(sender)
	{
		sender.checked = true;
		cancelSkipWhenClick = sender.cancel;
		saveSystemVariables();
	}
	
	function onChSpeedMenuItemClick(sender)
	{
		sender.checked = true;
		userChSpeed = sender.speed;
		setUserSpeed();
		saveSystemVariables();
	}

	function onChNonStopToPageBreakItemClick(sender)
	{
		chNonStopToPageBreak = ! chNonStopToPageBreak;
		if(typeof this.chNonStopToPageBreakItem != "undefined")
			chNonStopToPageBreakItem.checked = chNonStopToPageBreak;
			saveSystemVariables();
	}

	function onCh2ndNonStopToPageBreakItemClick(sender)
	{
		ch2ndNonStopToPageBreak = ! ch2ndNonStopToPageBreak;
		if(typeof this.ch2ndNonStopToPageBreakItem != "undefined")
			ch2ndNonStopToPageBreakItem.checked = ch2ndNonStopToPageBreak;
			saveSystemVariables();
	}

	function onCh2ndSpeedMenuItemClick(sender)
	{
		sender.checked = true;
		userCh2ndSpeed = sender.speed;
		setUserSpeed();
		saveSystemVariables();
	}

	function onChAntialiasMenuItemClick(sender)
	{
		chDefaultAntialiased = !chDefaultAntialiased;
		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;
		setMessageLayerUserFont();
		saveSystemVariables();
	}

	function onChChangeFontMenuItem(sender)
	{
		selectFont();
		saveSystemVariables();
	}

	function onRestoreMenuClick(sender)
	{
		if(!freeSaveDataMode) return;
		loadBookMarkFromFileWithAsk();
	}

	function onStoreMenuClick(sender)
	{
		if(!freeSaveDataMode) return;
		saveBookMarkToFileWithAsk();
	}

	function onWindowedMenuItemClick(sender)
	{
		if(fullScreened)
		{
			try
			{
				fullScreen = false;
			}
			catch(e)
			{
				Debug.notice("ウィンドウモードに移行できませんでした : " + e.message);
			}
			fullScreened = fullScreen;
			if(fullScreened)
				fullScreenMenuItem.checked = true;
			else
				windowedMenuItem.checked = true;
		}
		saveSystemVariables();
	}

	function onFullScreenMenuItemClick(sender)
	{
		if(!fullScreened)
		{
			try
			{
				fullScreen = true;
			}
			catch(e)
			{
				Debug.notice("フルスクリーンモードに移行できませんでした : " + e.message);
			}
			fullScreened = fullScreen;
			if(fullScreened)
				fullScreenMenuItem.checked = true;
			else
				windowedMenuItem.checked = true;
		}
		saveSystemVariables();
	}

	function resetFullScreen()
	{
		if(fullScreened)
		{
			try
			{
				fullScreen	= false;
				with(this.reFSTimer = new Timer(onCheckFS, ""))
					.interval	= 8, .enabled	= true;
			}
			catch(e)
				Debug.notice("フルスクリーンのリセットに失敗しました。: "+e.message);
		}
	}

	function onCheckFS
	{
		//	フルスクリーンの解除処理が終了したら、再度フルスクリーンにする
		if(typeof this.screenModeChangedTrigger == "undefined" || !screenModeChangedTrigger.trigged)
		{
			try
				fullScreen	= true;
			catch(e)
				Debug.notice("フルスクリーンのリセットに失敗しました。: "+e.message);
			reFSTimer.enabled	= false;
			invalidate reFSTimer;
			reFSTimer	= void;
			callHook("afterChangeMagnifyType");
		}
@if(DEBUG)
		else
			dm("フルスクリーン解除待ち");
@endif
	}

	function onInnerMagnifyMenuItemClick(sender)
	{
		System.setArgument("-fszoom", "inner");
		innerMagnifyMenuItem.checked	= true;
		outerMagnifyMenuItem.checked = noneMagnifyMenuItem.checked	= false;
		resetFullScreen();
	}

	function onOuterMagnifyMenuItemClick(sender)
	{
		System.setArgument("-fszoom", "outer");
		outerMagnifyMenuItem.checked	= true;
		innerMagnifyMenuItem.checked = noneMagnifyMenuItem.checked	= false;
		resetFullScreen();
	}

	function onNoneMagnifyMenuItemClick(sender)
	{
		System.setArgument("-fszoom", "none");
		noneMagnifyMenuItem.checked	= true;
		outerMagnifyMenuItem.checked = innerMagnifyMenuItem.checked	= false;
		resetFullScreen();
	}

	function onWindowSizeMenuItemClick(sender, w)
	{
		if(!w)
		{
			windowResizeable = !windowResizeable;
			updateWindowResizeable();
			return;
		}
		if(!fullScreen)
			setInnerSize(w, (w * 9) \ 16);
	}

	var	windowWidthes	= [ 1024, 1280, 1440, 1600, 1920, 640, 800 ];
	function updateWindowSizeChecked(size)
	{
		if(typeof this["window"+windowWidthes[0]+"MenuItem"] != "undefined")
		{
			for(var i=0; i<windowWidthes.count; i++)
				this["window"+windowWidthes[i]+"MenuItem"].checked	= size == windowWidthes[i];
		}
		updateWindowResizeable();
	}
	
	function updateWindowResizeable()
	{
		if(typeof this["windowResizeableMenuItem"] != "undefined")
			this["windowResizeableMenuItem"].checked = !windowResizeable;
	}

	function onMoveToYesMenuItemClick(sender)
	{
		sf.moveCursorToDialog	= "Yes";
		updateMoveToMenuItemChecked();
	}

	function onMoveToNoMenuItemClick(sender)
	{
		sf.moveCursorToDialog	= "No";
		updateMoveToMenuItemChecked();
	}

	function onMoveToCenterMenuItemClick(sender)
	{
		sf.moveCursorToDialog	= "Center";
		updateMoveToMenuItemChecked();
	}

	function updateMoveToMenuItemChecked()
	{
		sflags.moveCursorToDialog	= "Yes" if sflags.moveCursorToDialog == void;

		var	labels	= [ "Yes", "No", "Center" ];
		for(var i=0; i<labels.count; i++)
			this["moveTo"+labels[i]+"MenuItem"].checked	= sflags.moveCursorToDialog == labels[i];
	}

	function onHelpSupportMenuItemClick(sender)
	{
		// サポートツールを起動する
		askYesNo("サポートツールを起動してゲームを終了します。よろしいですか？\n(サポートツールの結果を反映させるため、ゲームの再起動が必要です)",
			"確認", function { global.System.shellExecute(global.Storages.getLocalName(global.System.exePath) + "SupportTools.exe"); global.System.exit(); });
	}

	function onHelpIndexMenuItemClick(sender)
	{
		// ヘルプファイルを開く
		System.shellExecute(Storages.getLocalName(System.exePath) + helpFile);
	}

	function onHelpAboutMenuItemClick(sender)
	{
		// 「このソフトについて」ウィンドウを表示
		var win = this.helpAboutWindow = new global.KAGWindow(false, aboutWidth, aboutHeight);
		win.debugLevel = tkdlNone;
		win.borderStyle = bsToolWindow;
		win.setInnerSize(aboutWidth, aboutHeight);
		win.setPos(left + ((width - win.width)>>1), top + ((height - win.height)>>1));
		win.rightClickMenuItem = new KAGMenuItem(this, "RightClick", 0, win.onRightClickMenuItemClick, false); // ESCで消せるように
		win.process(aboutStorage ,,, true); // about.ks を immediate で表示
		win.showModal(); // モード付きで表示
		invalidate win.rightClickMenuItem;
		invalidate win;
		delete this.helpAboutWindow;
	}

	// シナリオ実行ダイアログ呼び出し
	function onExecDialogMenuItemClick(sender)
	{
//		execDialog();
		var	elm	= %[
			filter:["KAGScriptファイル(*.ks)|*.ks"],
			filterIndex:1,
			initialDir:System.exePath+"data/scenario/scenario",
			title:"シナリオ実行",
			save:false,
			defaultExt:"ks"
		];
		if(Storages.selectFile(elm) && elm.name != "")
		{
			setConductorToMain();
			conductor.clear();
			process(sf.lastloadedscenario = Storages.extractStorageName(elm.name), "");
		}
	}

	function onChDebugLogMenuItemClick(sender) {
		logMode = !logMode;
		if (logMode) initLogPad(true);
		else if (logPad !== void) logPad.visible = false;
		if (typeof sender != "undefined") {
			sender.checked = logMode;
		}
		initLog();
	}

	function onOutputDebugLogMenuItemClick(sender) {
		outputLog();
	}
	
	function onReloadScenarioMenuItemClick(sender)
	{
		saveBookMark(1000, false);
		loadBookMark(1000);
	}

	//	前回「シナリオの読込み」したシナリオを再度読み込む
	function onLoadLastScenarionMenuItemClick(sender)
	{
		if(sf.lastloadedscenario)
		{
			setConductorToMain();
			conductor.clear();
			process(sf.lastloadedscenario, "");
		}
	}

	function onShowConsoleMenuItemClick(sender)
	{
		Debug.console.visible = true;
	}

	function onShowContollerMenuItemClick(sender)
	{
		Debug.controller.visible = true;
	}

	function internalSetMenuAccessibleAll(menu, state)
	{
		// autoEnable が true のすべてのメニュー項目の accessible に値 state を
		// 設定する
		if(typeof menu.autoEnable != "undefined" && menu.autoEnable)
			menu.accessible = state;
		if(typeof menu.stopRecur == "undefined" || !menu.stopRecur)
		{
			var children = menu.children;
			for(var i = children.count -1; i >= 0; i--)
				internalSetMenuAccessibleAll(children[i], state); // 再帰
		}
	}

	function canStore()
	{
		return storeEnabled && storeLabelPassed/* && !isRecollection*/;
	}

	function canRestore()
	{
		return restoreEnabled/* && !isRecollection*/;
	}

	function setMenuAccessibleAll()
	{
		// メニュー項目の使用可/不可を設定する

		var modal = historyLayer.visible || messageLayerHiding/* || currentDialog || panelModal*/;
		var state = inStable && !modal;
//		var selShow = selectShowing ||	mapSelectShowing ||	 transShowing ||  panelShowing;
		var canRun	= !modal && !inSleep/*	&& !selShow*/;
		var canSkip = canRun && (inStable || skipMode) && nextSkipEnabled && (/*allskip || */getCurrentRead());
		var canAuto = canRun && (inStable || autoMode) && !skipMode;

		// autoEnable が true のすべてのメニュー項目の accessible の
		// 値を設定する
		internalSetMenuAccessibleAll(menu, state);

		// その他のメニューの使用可/不可
		if(typeof this.skipToNextStopMenuItem != "undefined")
			skipToNextStopMenuItem.enabled = canSkip;

		if(typeof this.rightClickMenuItem != "undefined")
			rightClickMenuItem.enabled = inStable && !historyLayer.visible/* && !currentDialog*/;

		if(typeof this.showHistoryMenuItem != "undefined")
			showHistoryMenuItem.enabled = inStable && ((!messageLayerHiding/* && !mapSelectShowing && !transShowing && !currentDialog && !panelModal*/ &&
				historyEnabled) || historyLayer.visible);

		if(typeof this.autoModeMenuItem != "undefined")
			autoModeMenuItem.enabled = canAuto;

		if(typeof this.goBackMenuItem != "undefined")
			goBackMenuItem.enabled = state && isHistoryOfStoreAlive();

		if(typeof this.goToStartMenuItem != "undefined")
			goToStartMenuItem.enabled = state && startAnchorEnabled;

/*		if(typeof this.exitMenuItem != "undefined")
			exitMenuItem.enabled = !currentDialog;*/

		if(typeof this.storeMenu != "undefined")
		{
			var st = state && canStore();
			var children = storeMenu.children;
			if(freeSaveDataMode) storeMenu.enabled = st;
			for(var i = children.count - 1; i >= 0; i--)
			{
				var obj = children[i];
				obj.enabled = obj.orgEnabled && st;
			}
		}

		if(typeof this.restoreMenu != "undefined")
		{
			var st = state && canRestore();
			var children = restoreMenu.children;
			if(freeSaveDataMode) restoreMenu.enabled = st;
			for(var i = children.count - 1; i >= 0; i--)
			{
				var obj = children[i];
				obj.enabled = obj.orgEnabled && st;
			}
		}

		// 全制御
		if (this == global.Window.mainWindow && typeof global.onModeChange !== "undefined") {
			global.onModeChange(this, autoMode, skipMode, canAuto, canSkip, selShow, modal, canRun);
		}
	}

	//----------------------------------------------- マウスキーを有効にする --

	function enableMouseKey()
	{
		// マウスキーを有効にする
		if(mouseKeyEnabledCount == 0)
		{
			useMouseKey = true;
			mouseCursorState = mcsVisible;
		}
		mouseKeyEnabledCount++; // 参照カウンタ方式
	}

	function disableMouseKey()
	{
		// マウスキーを無効にする
		mouseKeyEnabledCount --;
		if(mouseKeyEnabledCount == 0) useMouseKey = false;
	}

	//----------------------------------------------------- システム変数関連 --

	/**
	 * 書き込みテストを行う
	 */
	function checkSave()
	{
		if(!readOnlyMode) {
			
			var appName = (typeof global.ENV_Maker != "undefined") ? global.ENV_Maker + "/" + global.ENV_GameName : System.title;
/*
			// セーブ場所の差し替え
			var udp = Storages.chopStorageExt(System.exeName) + ".udp";
			if(Storages.isExistentStorage(udp)) {
				var vars = [];
				vars.load(udp);
				if (vars[0] == "document") {
					if (System.personalPath != System.exePath) {
						saveDataLocation = System.personalPath + appName;
					}
				} else if (vars[0] == "application") {
					if (System.appDataPath != System.exePath) {
						saveDataLocation = System.appDataPath + appName;
					}
				}
			}
*/
			// 書き込み権限テスト
			var dummy = ["test"];
			var fn = saveDataLocation + "/" + "savecheck";
			try {
				(Array.saveStruct incontextof dummy)(fn);
			} catch(e) {
				if (System.personalPath != System.exePath) {
					errorInform("savemydoc");
					saveDataLocation = System.personalPath + appName;
				} else {
					readOnlyMode = true;
					errorInform("readonly");
				}
			}

			dm("セーブデータ保存場所:" + saveDataLocation );
		}
	}
	
	function loadSystemVariables()
	{
		// システム変数の読み込み
		try
		{
			var fn = saveDataLocation + "/" + dataName +
				"sc.ksd";
			if(Storages.isExistentStorage(fn))
			{
				scflags = Scripts.evalStorage(fn);
				scflags = %[] if scflags === void;
			}
			else
			{
				scflags = %[];
			}

			var fn = saveDataLocation + "/" + dataName +
				"su.ksd";
			if(Storages.isExistentStorage(fn))
			{
				sflags = Scripts.evalStorage(fn);
				sflags = %[] if sflags === void;
			}
			else
			{
				sflags = %[];
			}
		}
		catch(e)
		{
			throw new Exception("システム変数データを読み込めないか、"
				"あるいはシステム変数データが壊れています(" + e.message + ")");
		}
	}

	function setSystemStateFromSystemVariables()
	{
		// システム変数に基づいてシステムを設定
		// (フルスクリーン関連をのぞく)
		if(scflags.autoModePageWait !== void)
		{
			if(typeof this.autoModeWaitMenu !== "undefined")
			{
				var children = autoModeWaitMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.wait !== "undefined" && item.wait == scflags.autoModePageWait)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		if(scflags.userChSpeed !== void)
		{
			if(typeof this.chSpeedMenu !== "undefined")
			{
				var children = chSpeedMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.speed !== "undefined" && item.speed == scflags.userChSpeed)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		if(scflags.userCh2ndSpeed !== void)
		{
			if(typeof this.chSpeedMenu !== "undefined")
			{
				var children = ch2ndSpeedMenu.children;
				for(var i = children.count-1; i >= 0; i--)
				{
					var item = children[i];
					if(typeof item.speed !== "undefined" && item.speed == scflags.userCh2ndSpeed)
					{
						item.checked = true;
						break;
					}
				}
			}
		}

		lastSaveDataNameGlobal = scflags.lastSaveDataNameGlobal if scflags.lastSaveDataNameGlobal !== void;

		bookMarkNames = scflags.bookMarkNames if scflags.bookMarkNames !== void;
		bookMarkDates = scflags.bookMarkDates if scflags.bookMarkDates !== void;
		bookMarkProtectedStates = scflags.bookMarkProtectedStates if scflags.bookMarkProtectedStates !== void;

		windowResizeable = scflags.windowResizeable if scflags.windowResizeable !== void;
		autoModePageWait = scflags.autoModePageWait if scflags.autoModePageWait !== void;
		autoModeLineWait = scflags.autoModeLineWait if scflags.autoModeLineWait !== void;
		userChSpeed = scflags.userChSpeed if scflags.userChSpeed !== void;
		userCh2ndSpeed = scflags.userCh2ndSpeed if scflags.userCh2ndSpeed !== void;

		setUserSpeed();

		chNonStopToPageBreak = scflags.chNonStopToPageBreak if scflags.chNonStopToPageBreak !== void;
		if(typeof this.chNonStopToPageBreakItem != "undefined")
			chNonStopToPageBreakItem.checked = chNonStopToPageBreak;

		ch2ndNonStopToPageBreak = scflags.ch2ndNonStopToPageBreak if scflags.ch2ndNonStopToPageBreak !== void;
		if(typeof this.ch2ndNonStopToPageBreakItem != "undefined")
			ch2ndNonStopToPageBreakItem.checked = ch2ndNonStopToPageBreak;

		chDefaultAntialiased = scflags.chDefaultAntialiased if scflags.chDefaultAntialiased !== void;
		if(typeof this.chAntialiasMenuItem != "undefined")
			chAntialiasMenuItem.checked = chDefaultAntialiased;
		chDefaultFace = scflags.chDefaultFace if scflags.chDefaultFace !== void;

		setMessageLayerUserFont();

		bgm.restoreSystemState(scflags);

		for(var i = 0; i<numSEBuffers; i++)
		{
			se[i].restoreSystemState(scflags);
		}

		updateMoveToMenuItemChecked();
	}

	function clearSystemVariables()
	{
		// システム変数のクリア
		(Dictionary.clear incontextof sflags)();
	}

	function saveSystemVariables()
	{
		// システム変数の保存
		if(!isMain) return;

		// プラグインを呼ぶ
		forEachEventHook('onSaveSystemVariables',
			function(handler, f) { handler(); } incontextof this);

		// フルスクリーン
		scflags.fullScreen = fullScreened;
		scflags.zoomNumer = zoomNumer;
		scflags.zoomDenom = zoomDenom;

		scflags.fszoom = System.getArgument("-fszoom");

		scflags.windowResizeable = windowResizeable;
		scflags.windowMaximized	 = false;
		var rect;
		if (typeof this.maximized != "undefined" && maximized) {
			scflags.windowMaximized	 = !fullScreen;
			if (_pseudoFullScreen !== void) with (_pseudoFullScreen) {
				rect = .rect;
				scflags.windowMaximized = .max && .restmax;
			} else if (typeof getNormalRect != "undefined")
				rect = getNormalRect();
		} else if (fullScreened && typeof _lastWindowSize == "Object") {
			rect = _lastWindowSize.window; //if (!pseudoFullScreened);
		}
		if (rect !== void) {
			scflags.windowLeft	 = rect.x;
			scflags.windowTop	 = rect.y;
			scflags.windowWidth	 = rect.w;
			scflags.windowHeight = rect.h;
		} else {
			scflags.windowLeft	 = left;
			scflags.windowTop	 = top;
			scflags.windowWidth	 = width;
			scflags.windowHeight = height;
		}

		// 文字表示速度
		scflags.autoModePageWait = autoModePageWait;
		scflags.autoModeLineWait = autoModeLineWait;
		scflags.userChSpeed = userChSpeed;
		scflags.userCh2ndSpeed = userCh2ndSpeed;
		scflags.chDefaultAntialiased = chDefaultAntialiased;
		scflags.chDefaultFace = chDefaultFace;
		scflags.chNonStopToPageBreak = chNonStopToPageBreak;
		scflags.ch2ndNonStopToPageBreak = ch2ndNonStopToPageBreak;

		// ブックマーク名
		scflags.bookMarkNames = bookMarkNames; // (コピーではなくて)参照で十分
		scflags.bookMarkDates = bookMarkDates;
		scflags.bookMarkProtectedStates = bookMarkProtectedStates;

		scflags.lastSaveDataNameGlobal = lastSaveDataNameGlobal;

		// ファイルに書き込む
		if(!readOnlyMode)
		{
			var fn = saveDataLocation + "/" + dataName +
				"sc.ksd";
			(Dictionary.saveStruct incontextof scflags)(fn, saveDataMode);

			var fn = saveDataLocation + "/" + dataName +
				"su.ksd";
			(Dictionary.saveStruct incontextof sflags)(fn, saveDataMode);
		}
	}

	//------------------------------------------------------- ゲーム変数関連 --

	function internalStoreFlags(f)
	{
		// f に現在の状態を記録する

		// KAGWindow に関するもの
		(Dictionary.clear incontextof f)(); // クリア
		// ここの [start_store_vars] から [end_store_vars] で囲まれた部分は
		// 末端の perl スクリプトによって自動的に処理されるので、このマークを消したり
		// このマークの間を編集したりしないこと。
		// [start_store_vars]
		f.lastSaveDataName = lastSaveDataName;
		f.historyWriteEnabled = historyWriteEnabled;
		f.historyEnabled = historyEnabled;
		f.numCharacterLayers = numCharacterLayers;
		f.numMessageLayers = numMessageLayers;
		f.currentNum = currentNum;
		f.currentPage = currentPage;
		f.currentWithBack = currentWithBack;
		f.chUserMode = chUserMode;
		f.chSpeed = chSpeed;
		f.actualChSpeed = actualChSpeed;
		f.beforeNoWaitActualChSpeed = beforeNoWaitActualChSpeed;
		f.beforeNoWaitChUserMode = beforeNoWaitChUserMode;
		f.clickSkipEnabled = clickSkipEnabled;
		f.nextSkipEnabled = nextSkipEnabled;
		f.canCancelSkipByClick = canCancelSkipByClick;
		f.autoWCEnabled = autoWCEnabled;
		f.autoWCChars = autoWCChars;
		f.rightClickEnabled = rightClickEnabled;
		f.rightClickCall = rightClickCall;
		f.rightClickJump = rightClickJump;
		f.rightClickExp = rightClickExp;
		f.rightClickTarget = rightClickTarget;
		f.rightClickStorage = rightClickStorage;
		f.rightClickName = rightClickName;
		f.rightClickCurrentMenuName = rightClickCurrentMenuName;
		f.lastClickGlyphVisible = lastClickGlyphVisible;
		f.cursorDefault = cursorDefault;
		f.cursorPointed = cursorPointed;
		f.cursorWaitingClick = cursorWaitingClick;
		f.cursorDraggable = cursorDraggable;
		f.startAnchorEnabled = startAnchorEnabled;
		f.storeEnabled = storeEnabled;
		f.restoreEnabled = restoreEnabled;
		f.currentLabel = currentLabel;
		f.currentPageName = currentPageName;
		// [end_store_vars]

		// perl スクリプトによって自動的に処理されないもの、いくつか。
		// 自動ウェイト
		f.autoWCWaits = [];
		f.autoWCWaits.assign(autoWCWaits); // 自動ウェイトのウェイト

		// bgm
		f.bgm = bgm.store();

		// 効果音
		f.se = [];
		for(var i = 0; i<numSEBuffers; i++)
		{
			f.se[i] = se[i].store();
		}

		// メッセージレイヤ
		f.foreMessageLayers = [];
		f.backMessageLayers = [];
		for(var i = 0; i < numMessageLayers; i++)
		{
			f.foreMessageLayers[i] = fore.messages[i].store();
			f.backMessageLayers[i] = back.messages[i].store();
		}

		// 前景レイヤ
		f.foreCharacterLayers = [];
		f.backCharacterLayers = [];
		for(var i = 0; i < numCharacterLayers; i++)
		{
			f.foreCharacterLayers[i] = fore.layers[i].store();
			f.backCharacterLayers[i] = back.layers[i].store();
		}

		// 背景レイヤ
		f.foreBaseLayer = fore.base.store();
		f.backBaseLayer = back.base.store();

		// ウィンドウキャプション
		f.caption = caption;

		// コンダクタ
		f.mainConductor = mainConductor.store();
		if(!saveMacros) f.mainConductor.macros = void;
			// マクロ情報を void で上書きすると栞中のマクロ情報は無効になる

		// メッセージ履歴
		if(historyLayer.storeState)
		{
			f.historyData = historyLayer.save();
		}

		// ムービー
		if( isMain )
		{
			f.movies = [];
			for( var i = 0; i < numMovies; i++)
				f.movies[i] = movies[i].store();
		}

		// storeHook
		forEachEventHook('onStore',
			function(handler, f) { handler(f.flags, f.options); } incontextof this,
			%[flags:f, options:void]);
	}

	function storeFlags()
	{
		// pcflags, pflags に値を書き込む

		// flags -> pflags
		(Dictionary.assignStruct incontextof pflags)(flags);

		internalStoreFlags(pcflags);
	}

	function internalRestoreFlags(f, clear = true, elm = void)
	{
		// f から情報を読み出す
		// clear が true ならばメッセージレイヤをクリアする
		// se, bgm がそれぞれ true ならばその情報も反映させる
		// backlay が true の場合は、表画面にロードすべきものを裏画面にロードする

		// KAGWindow に関するもの
		// ここの [start_restore_vars] から [end_restore_vars] で囲まれた部分は
		// (略)
		// [start_restore_vars]
		lastSaveDataName = f.lastSaveDataName if f.lastSaveDataName !== void;
		historyWriteEnabled = f.historyWriteEnabled if f.historyWriteEnabled !== void;
		historyEnabled = f.historyEnabled if f.historyEnabled !== void;
		numCharacterLayers = f.numCharacterLayers if f.numCharacterLayers !== void;
		numMessageLayers = f.numMessageLayers if f.numMessageLayers !== void;
		currentNum = f.currentNum if f.currentNum !== void;
		currentPage = f.currentPage if f.currentPage !== void;
		currentWithBack = f.currentWithBack if f.currentWithBack !== void;
		chUserMode = f.chUserMode if f.chUserMode !== void;
		chSpeed = f.chSpeed if f.chSpeed !== void;
		actualChSpeed = f.actualChSpeed if f.actualChSpeed !== void;
		beforeNoWaitActualChSpeed = f.beforeNoWaitActualChSpeed if f.beforeNoWaitActualChSpeed !== void;
		beforeNoWaitChUserMode = f.beforeNoWaitChUserMode if f.beforeNoWaitChUserMode !== void;
		clickSkipEnabled = f.clickSkipEnabled if f.clickSkipEnabled !== void;
		nextSkipEnabled = f.nextSkipEnabled if f.nextSkipEnabled !== void;
		canCancelSkipByClick = f.canCancelSkipByClick if f.canCancelSkipByClick !== void;
		autoWCEnabled = f.autoWCEnabled if f.autoWCEnabled !== void;
		autoWCChars = f.autoWCChars if f.autoWCChars !== void;
		rightClickEnabled = f.rightClickEnabled if f.rightClickEnabled !== void;
		rightClickCall = f.rightClickCall if f.rightClickCall !== void;
		rightClickJump = f.rightClickJump if f.rightClickJump !== void;
		rightClickExp = f.rightClickExp if f.rightClickExp !== void;
		rightClickTarget = f.rightClickTarget if f.rightClickTarget !== void;
		rightClickStorage = f.rightClickStorage if f.rightClickStorage !== void;
		rightClickName = f.rightClickName if f.rightClickName !== void;
		rightClickCurrentMenuName = f.rightClickCurrentMenuName if f.rightClickCurrentMenuName !== void;
		lastClickGlyphVisible = f.lastClickGlyphVisible if f.lastClickGlyphVisible !== void;
		cursorDefault = f.cursorDefault if f.cursorDefault !== void;
		cursorPointed = f.cursorPointed if f.cursorPointed !== void;
		cursorWaitingClick = f.cursorWaitingClick if f.cursorWaitingClick !== void;
		cursorDraggable = f.cursorDraggable if f.cursorDraggable !== void;
		startAnchorEnabled = f.startAnchorEnabled if f.startAnchorEnabled !== void;
		storeEnabled = f.storeEnabled if f.storeEnabled !== void;
		restoreEnabled = f.restoreEnabled if f.restoreEnabled !== void;
		currentLabel = f.currentLabel if f.currentLabel !== void;
		currentPageName = f.currentPageName if f.currentPageName !== void;
		// [end_restore_vars]

		// perl スクリプトによって自動的に処理されないもの、いくつか。

		// 自動ウェイト
		autoWCWaits.assign(f.autoWCWaits) if f.autoWCWaits !== void;

		// ムービー
		if( isMain && f.movies != void )
		{
			for( var i = 0; i < numMovies; i++)
				movies[i].restore(f.movies[i]);
		}

		// 背景レイヤ
		var backlay = elm != void && elm.backlay != void && +elm.backlay;
		if(backlay)
		{
			back.base.restore(f.foreBaseLayer);
		}
		else
		{
			fore.base.restore(f.foreBaseLayer);
			back.base.restore(f.backBaseLayer);
		}

		// メッセージレイヤ
		allocateMessageLayers(numMessageLayers);
		if(backlay)
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				back.messages[i].restore(f.foreMessageLayers[i]);
			}
		}
		else
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				fore.messages[i].restore(f.foreMessageLayers[i]);
				back.messages[i].restore(f.backMessageLayers[i]);
			}
		}

		if(clear)
		{
			for(var i = 0; i < numMessageLayers; i++)
			{
				fore.messages[i].clear();
				back.messages[i].clear();
			}
			if(historyLayer.storeState)
			{
				historyLayer.load(f.historyData);
			}
			else
			{
				if(historyWriteEnabled)
				{
					if(historyLayer.everypage)
						historyLayer.repage();
					else
						historyLayer.reline(), historyLayer.reline();
				}
				historyLayer.clearAction();
			}
		}

		// 前景レイヤ
		allocateCharacterLayers(numCharacterLayers);
		if(backlay)
		{
			for(var i = 0; i < numCharacterLayers; i++)
			{
				back.layers[i].restore(f.foreCharacterLayers[i]);
			}
		}
		else
		{
			for(var i = 0; i < numCharacterLayers; i++)
			{
				fore.layers[i].restore(f.foreCharacterLayers[i]);
				back.layers[i].restore(f.backCharacterLayers[i]);
			}
		}

		// bgm
		if(elm === void || elm.bgm === void || +elm.bgm)
		{
			bgm.restore(f.bgm);
		}

		// 効果音
		if(elm === void || elm.se === void || +elm.se)
		{
			for(var i = 0; i<numSEBuffers; i++)
			{
				se[i].restore(f.se[i]);
			}
		}

		// ウィンドウキャプション
		caption = f.caption;
		System.title = caption;

		// current の設定し直し
		current = (currentPage?back:fore).messages[currentNum];

		// 右クリックメニュー名
		if(typeof this.rightClickMenuItem != "undefined")
			rightClickMenuItem.caption = rightClickCurrentMenuName;

		// restoreHook
		forEachEventHook('onRestore',
			function(handler, f) { handler(f.flags, f.clear, f.options); } incontextof this,
			%[flags:f, clear:clear, options:elm]);

	}

	function restoreFlags()
	{
		// pcflags, pflags から情報を読み出す

		// ロード時、ムービーのピリオドイベント情報をクリアする
		purgeMoviePeriod();

		// スナップショットの破棄
		freeSnapshot();

		// トランジション、自動移動の停止
		stopAllTransitions();
		stopAllMoves();

		// クリック待ち記号を隠す
		hideClickGlyphs();

		// メッセージ履歴を隠す
		hideHistory();

		// スキップのキャンセル
		cancelSkip();

		// pflags -> flags
		(Dictionary.assignStruct incontextof flags)(pflags);

		// 栞管理関連
		storeLabelPassed = true;
		nextRecordHistory = false;
		stablePosibility = false;

		// コンダクタ
		currentRecordName = "";
		mainConductor.restore(pcflags.mainConductor);
		extraConductor.clear();
		setConductorToMain();

		// 読み込み
		internalRestoreFlags(pcflags);

		// メニュー関連
		setMenuAccessibleAll();

		// 実行開始
		processGo();
	}

	function clearVariables()
	{
		// ゲーム変数のクリア
		(Dictionary.clear incontextof flags)();
	}

	//--------------------------------------------------------- 通過記録管理 --

	function pushHistoryOfStore()
	{
		// 通過記録を行う
		// pflags, pcflags に情報を格納した後に呼ぶこと

		if(nextRecordHistory)
		{
			if(stablePosibility)
			{
				// stablePosibility が false の場合は、
				// そこのラベルで通過記録を行っても
				// そこよりも前に戻るすべがないので通過記録をしない

				// 辞書配列を作成
				var dic = %[];

				// user と core を記録
				dic.user = %[];
				(Dictionary.assignStruct incontextof dic.user)(pflags);
				dic.core = %[];
				(Dictionary.assignStruct incontextof dic.core)(pcflags);

				// dic を historyOfStore の先頭に挿入
				historyOfStore.insert(0, dic);

				// はみ出た分を削除
				if(historyOfStore.count > maxHistoryOfStore)
					historyOfStore.count = maxHistoryOfStore;
			}

			nextRecordHistory = false;
		}
	}

	function setToRecordHistory()
	{
		// 次の「保存可能なラベル」通過時に
		// 通過記録を行うように設定する
		// ( ただし、そのときに記録されるのは、現在の状態 )
		nextRecordHistory = true;
	}

	function isHistoryOfStoreAlive()
	{
		// 通過記録が利用可能かどうかを返す
		return historyOfStore.count;
	}

	function goBackYes() {
		// user と core を pflags, pcflags に戻す
		(Dictionary.assignStruct incontextof pflags)(historyOfStore[0].user);
		(Dictionary.assignStruct incontextof pcflags)(historyOfStore[0].core);
		
		// 記録の先頭を削除する
		historyOfStore.erase(0);

		if (historyWriteEnabled) {
			historyLayer.clearAction();
		}
		
		// データを元に、栞をたどる動作をする
		restoreFlags();
	}

	function goBackHistory(ask = true)
	{
		// 通過記録をたどり、戻る

		if(!isHistoryOfStoreAlive())
			return false;

		var result;
		if(ask)
		{
			var prompt = "「"+ historyOfStore[0].core.currentPageName + "」まで戻りますか？";
			result = askYesNo(prompt, "確認", goBackYes);
		}
		else
		{
			goBackYes();
		}
	}

	//--------------------------------------------------------------- 栞管理 --

	function createBookMarkSubMenus()
	{
		// 「栞をたどる」「栞をはさむ」以下にサブメニュー項目を追加
		if(freeSaveDataMode) return; // フリーセーブモードではなにもしない
		if(typeof this.storeMenu !== "undefined" && storeMenu.visible)
		{
			for(var i = 0; i<numBookMarks; i++)
			{
				var item;
				storeMenu.add(item = new KAGMenuItem(this, string i, 0, onBookMarkStore,
					false));
				item.bmNum = i;
				item.orgEnabled = false;
			}
		}
		if(typeof this.restoreMenu !== "undefined" && restoreMenu.visible)
		{
			for(var i = 0; i<numBookMarks; i++)
			{
				var item;
				restoreMenu.add(item = new KAGMenuItem(this, string i, 0, onBookMarkRestore,
					false));
				item.bmNum = i;
				item.orgEnabled = false;
			}
		}
	}

	function setBookMarkMenuCaptions()
	{
		// 「栞をたどる」「栞をはさむ」以下のサブメニューに
		// キャプションを設定

		// 栞を挟む
		if(typeof this.storeMenu !== "undefined")
		{
			var children = storeMenu.children;
			for(var i = children.count - 1; i >= 0; i--)
			{
				if(bookMarkDates[i] != '') // 空文字列の場合は栞がないということ
				{
					// 栞が存在する
					var caption;
					if(showBookMarkDate) caption = bookMarkDates[i] + " ";
					caption += bookMarkNames[i];
					var item = children[i];
					item.caption = caption;
					item.enabled = false;
					item.orgEnabled = !bookMarkProtectedStates[i];
				}
				else
				{
					// 栞が存在しない
					var item = children[i];
					item.caption = "(未設定)";
					item.enabled = false;
					item.orgEnabled = !bookMarkProtectedStates[i];
				}
			}
		}

		// 栞をたどる
		if(typeof this.restoreMenu !== "undefined")
		{
			var children = restoreMenu.children;
			for(var i = children.count - 1; i >= 0; i--)
			{
				if(bookMarkDates[i] != '') // 空文字列の場合は栞がないということ
				{
					// 栞が存在する
					var caption;
					if(showBookMarkDate) caption = bookMarkDates[i] + " ";
					caption += bookMarkNames[i];
					var item = restoreMenu.children[i];
					item.caption = caption;
					item.enabled = false;
					item.orgEnabled = true;
				}
				else
				{
					var item = restoreMenu.children[i];
					item.caption = "(未設定)";
					item.enabled = false;
					item.orgEnabled = false;
				}
			}
		}
		setMenuAccessibleAll();
	}

	function setBookMarkProtectedState(num, s)
	{
		// n 番の栞の保護フラグを設定する
		// s = true ならば栞に書き込み保護をする
		bookMarkProtectedStates[num] = s;
		setBookMarkMenuCaptions();
	}

	function onBookMarkStore(sender)
	{
		// 栞をはさむメニューが選択された
//		if(!sender.parent.accessEnabled) return;
		saveBookMarkWithAsk(sender.bmNum);
	}

	function onBookMarkRestore(sender)
	{
		// 栞をたどるメニューが選択された
//		if(!sender.parent.accessEnabled) return;
		loadBookMarkWithAsk(sender.bmNum);
	}

	function getBookMarkPageName(num)
	{
		// 栞番号 num のブックマーク名を得る
		if(bookMarkDates[num] != '') // 空文字列の場合は栞がないということ
			return bookMarkNames[num];
		return "(未設定)";
	}

	function getBookMarkDate(num)
	{
		// 栞番号 num の日付を得る
		return bookMarkDates[num];
	}

	function getBookMarkFileNameAtNum(num)
	{
		if(num >= 999) // 999 番以降は特殊なデータに用いるので
			return saveDataLocation + "/" + dataName + num + ".ksd";
		else
			return saveDataLocation + "/" + dataName + num + (saveThumbnail?".bmp":".kdt");
	}

	function lockSnapshot()
	{
		// スナップショットをロックする
		// 初めてスナップショットがロックされた時点での画面を保存する
		if(snapshotLockCount == 0)
		{
			if(snapshotLayer === void)
				snapshotLayer = new Layer(this, primaryLayer);
			snapshotLayer.setImageSize(scWidth, scHeight);
			snapshotLayer.face = dfAlpha;
			snapshotLayer.piledCopy(0, 0, primaryLayer, 0, 0, scWidth, scHeight);
		}
		snapshotLockCount ++;
	}

	function unlockSnapshot()
	{
		// スナップショットのロックを解除する
		if(snapshotLockCount == 0)
			throw new Exception("snapshotLockCount がアンダーフローしました");
		snapshotLockCount --;
		if(snapshotLockCount == 0)
		{
			if(snapshotLayer !== void)
				invalidate snapshotLayer, snapshotLayer = void;
		}
	}

	function calcThumbnailSize()
	{
		// サムネイルのサイズを計算する
		// 横幅は 133 に
		var ratio = scHeight / scWidth;
		var w = thumbnailWidth;
		var h = (int)(w * ratio);

		// サムネイル用ビットマップのサイズを計算
		// サムネイル用画像は 256 色 BMP または 24bit フルカラー BMP
		var size;
		if (thumbnailDepth == 8)
		  size = ((((w - 1) >> 2) + 1) << 2) * h + 1024 + 54;
		else
		  size = (((w * 3 + 3) >> 2) << 2) * h + 54;

		return %[width : w, height : h, size : size];
	}

	function freeSnapshot()
	{
		// スナップショットを強制的に破棄し、snapshotLockCount を 0 に設定する
		snapshotLockCount = 0;
		if(snapshotLayer !== void)
			invalidate snapshotLayer, snapshotLayer = void;
	}

	function createThumbnail(w, h)
	{
		var tmp = new Layer(this, primaryLayer);
		tmp.setImageSize(w, h);
		tmp.face = dfAlpha;
		tmp.stretchCopy(0, 0, w, h, snapshotLayer,
			0, 0, snapshotLayer.imageWidth, snapshotLayer.imageHeight, stLinear);
		return tmp;
	}

	function saveBookMarkToFile(fn, savehist = true)
	{
		// ファイル fn に栞を保存する
		if(readOnlyMode) return false;
		pcflags.storeTime = (new Date()).getTime(); // 日付を保存

		// セーブデータをまとめる
		var data = %[];
		data.id = saveDataID;
		data.core = pcflags;
		data.user = pflags;
		if(savehist) data.history = historyOfStore;

		if(saveThumbnail)
		{
			// サムネイルを保存
			lockSnapshot();
			try
			{
				// サムネイルのサイズまで縮小
				var size = calcThumbnailSize();
				var tmp;
				try
				{
					tmp	= createThumbnail(size.width, size.height);

					processThumbnail(tmp);	//	サムネイルに加工を施す

					try
					{
						// サムネイルを保存
						tmp.saveLayerImage(fn, "bmp" + thumbnailDepth);

						// データを保存
						var mode = saveDataMode;
						mode += "o" + size.size; // モード文字列に 書き込みオフセットを指定
						(Dictionary.saveStruct incontextof data)(fn, mode);
					}
					catch(e)
					{
						invalidate tmp if tmp != void;
						unlockSnapshot();
						readOnlyMode = true;
						errorInform("savefail");
						return false;
					}
				}
				catch(e)
				{
					invalidate tmp if tmp != void;
					throw e;
				}
				invalidate tmp;
			}
			catch(e)
			{
				unlockSnapshot();
				throw e;
			}
			unlockSnapshot();
		}
		else
		{
			// 通常のファイルに保存
			try
			{
				(Dictionary.saveStruct incontextof data)(fn, saveDataMode);
			}
			catch(e)
			{
				readOnlyMode = true;
				errorInform("savefail");
				return false;
			}
		}
		return true;
	}

	function processThumbnail(thumbnail)
	{
		//	サムネイルに追加の加工を施す
		//	例) Hシーンのサムネイルをモザイク加工
	}

	function saveBookMark(num, savehist = true)
	{
		// 栞番号 num に栞を保存する
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[num]) return false;

		var ret = saveBookMarkToFile(getBookMarkFileNameAtNum(num), savehist);
		if(ret)
		{
			// メニュー / bookMarkNames / bookMarkDates を更新
			getBookMarkInfoFromData(pcflags, num);
		}
		return ret;
	}

	function getBookMarkInfoFromData(dic, num)
	{
		// 辞書配列 dic から栞のページ名と日付を読み出し、
		// bookMarkDates[num] や bookMarkNames[num] に設定する
		if(num < numBookMarks)
		{
			bookMarkNames[num] = dic.currentPageName;
			var date = new Date();
			date.setTime(dic.storeTime);
			date = "%04d/%02d/%02d %02d:%02d".sprintf(
				date.getYear(), date.getMonth() + 1, date.getDate(),
				date.getHours(), date.getMinutes() );
			bookMarkDates[num] = date;
			setBookMarkMenuCaptions();
			saveSystemVariables();
		}
	}

	function loadBookMarkFromFile(fn, loaduser = true)
	{
		// ファイル fn から栞を読み込む
		// loaduser が false の時は user を読み込まない
		try
		{
			if(!Storages.isExistentStorage(fn)) return false; //ファイルがない

			var data;

			var modestr;

			if(saveThumbnail)
			{
				// 指定オフセットからデータを読み込む
				modestr += "o" + calcThumbnailSize().size;
			}

			data = Scripts.evalStorage(fn, modestr);

			if(data.id != saveDataID)
			{
				errorInform("loadfail");
				return false;
			}

			pcflags = data.core;
			pcflags = %[] if pcflags === void;
			if(loaduser)
			{
				pflags = data.user;
				pflags = %[] if pflags === void;
			}
			else
			{
				(Dictionary.assignStruct incontextof pflags)(flags);
			}
			historyOfStore = data.history;
			historyOfStore = [] if historyOfStore === void;
		}
		catch(e)
		{
			errorInform("loadexception", e.message);
			return false;
		}

		restoreFlags();
		return true;
	}

	function loadBookMark(num, loaduser = true)
	{
		// 栞番号 num からデータを読み出す
		return loadBookMarkFromFile(getBookMarkFileNameAtNum(num), loaduser);
	}

	function saveBookMarkWithAsk(num)
	{
		// 栞番号 num に栞を設定する
		// そのとき、設定するかどうかをたずねる
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[num]) return false;
		var prompt = "栞 ";
		if(num < numBookMarks) prompt += (num + 1);
		if(bookMarkDates[num] != "") // bookMarkDates が空文字の場合は栞は存在しない
			prompt += "「" + bookMarkNames[num] + "」";
		prompt += "に「"+ pcflags.currentPageName + "」をはさみますか?";
		askYesNo(prompt, "確認", saveBookMark, void, num);
		return true;
	}

	function loadBookMarkWithAsk(num)
	{
		// 栞番号 num から栞を読み出す
		// そのとき、読み出すかどうかをたずねる
		if(num < numBookMarks && bookMarkDates[num] == "") // bookMarkDates が空文字の場合は栞は存在しない
			return false;
		var prompt = "栞 ";
		if(num < numBookMarks) prompt += (num + 1);
		prompt += "「"+ bookMarkNames[num] + "」をたどりますか?";
		askYesNo(prompt, "確認", loadBookMark, void, num);
		return true;
	}

	function saveBookMarkToFileWithAsk()
	{
		// 任意のファイルに栞を保存する
		// currentPageName をファイル名として適合するように
		// 変形する
		var invalid = "\\/:,;*?\"<>!.";
		var valid = "￥／：，；＊？”＜＞！．";

		var initialname = saveDataLocation + "/";
		var through = false;
		var orgname = currentPageName;

		if(lastSaveDataNameGlobal != "")
		{
			try
			{
				initialname = Storages.extractStoragePath(lastSaveDataNameGlobal);
			}
			catch(e)
			{
				initialname = saveDataLocation + "/";
			}
		}

		if(orgname == "")
		{
			// 栞の見出しがないので
			if(lastSaveDataName == "")
				orgname = System.title; // System.title を代わりに使う
			else
				initialname = lastSaveDataName, through = true;
		}

		if(!through)
		{
			var length = orgname.length;
			for(var i = 0; i < length; i++)
			{
				var ch = orgname[i];
					var ind = invalid.indexOf(ch);
				if(ind != -1)
					initialname += valid[ind];
				else if(#ch >= 32)
					initialname += ch;
			}
		}

		// 保存するファイル名を得る
		var selectdata = %[
			title:"栞をはさむ",
			filter: [saveThumbnail ?
					"サムネイル画像付き栞データ(*.bmp)|*.bmp" :
					"栞データ(*.kdt)|*.kdt"],
			filterIndex : 1,
			name : initialname,
			initialDir : "",
			defaultExt : saveThumbnail?"bmp":"kdt",
			save : true,
		];
		if(Storages.selectFile(selectdata))
		{
			// 保存
			saveBookMarkToFile(lastSaveDataName = lastSaveDataNameGlobal = selectdata.name);
			lastSaveDataName = Storages.chopStorageExt(lastSaveDataName);
		}
	}

	function loadBookMarkFromFileWithAsk()
	{
		// 任意のファイルから栞を読み込む
		var initialdir = "";
		if(lastSaveDataNameGlobal == "")
			initialdir = saveDataLocation + "/";

		var selectdata = %[
			title:"栞をたどる",
			filter: [saveThumbnail ?
					"サムネイル画像付き栞データ(*.bmp)|*.bmp" :
					"栞データ(*.kdt)|*.kdt"],
			filterIndex : 1,
			name : lastSaveDataNameGlobal,
			initialDir : initialdir,
			defaultExt : saveThumbnail?"bmp":"kdt",
			save : false,
		];
		if(Storages.selectFile(selectdata))
		{
			loadBookMarkFromFile(lastSaveDataName = lastSaveDataNameGlobal = selectdata.name);
			lastSaveDataName = Storages.chopStorageExt(lastSaveDataName);
		}
	}


	function copyBookMark(from, to)
	{
		// 栞番号 from から栞番号 to に栞をコピーする
		if(readOnlyMode) return false;
		if(bookMarkProtectedStates[to]) return;

		var fn = getBookMarkFileNameAtNum(from);

		if(!Storages.isExistentStorage(fn)) return; //ファイルがない

		var data = Scripts.evalStorage(fn);

		fn = getBookMarkFileNameAtNum(to);

		(Dictionary.saveStruct incontextof data)(fn, saveDataMode);
		getBookMarkInfoFromData(data.core, to);
	}

	function eraseBookMark(num)
	{
		// 栞を消す
		// num < numBookMarks の時にしか動作しないようになったので注意
		if(num < numBookMarks)
		{
			if(!bookMarkProtectedStates[num])
			{
				bookMarkDates[num] = "";
				setBookMarkMenuCaptions();
			}
		}
	}

	function tempDisableStore(elm)
	{
		// 栞を一時的に保存不可能にする
		storeEnabled = true;
		if(elm.store === void)
			storeLabelPassed = false;
		else
			storeLabelPassed = !(+elm.store);
		if(elm.restore == void)
			restoreEnabled = true;
		else
			restoreEnabled = !(+elm.restore);
		setMenuAccessibleAll();
	}

	function setStoreEnabled(enabled)
	{
		// 栞メニューの有効/無効の設定
		storeEnabled = enabled;
		restoreEnabled = enabled;
		setMenuAccessibleAll();
	}

	function setStartAnchorEnabled(enabled)
	{
		// 「最初に戻る」の有効/無効の設定
		startAnchorEnabled = enabled;
		if(enabled) saveBookMark(999, false); // 999 番に保存
		setMenuAccessibleAll();
	}

	function goToStart()
	{
		// 最初に戻る
		if(!startAnchorEnabled) return;
		loadBookMark(999, false); // 栞を読み込む
	}

	function goToStartWithAsk()
	{
		// 最初に戻る(確認あり)
		askYesNo("最初に戻ります。よろしいですか ?", "確認", goToStart);
	}

	function tempSave(num)
	{
		// tempBookMarks[num] に現在の状態を保存する
		tempBookMarks[num] = %[];
		internalStoreFlags(tempBookMarks[num]);
	}

	function tempLoad(num, elm)
	{
		// tempBookMarks[num] から状態を読み込む
		internalRestoreFlags(tempBookMarks[num], false, elm);
	}

	function restoreBookMark(num, ask = true)
	{
		// KAG 2.x 互換用
		if(ask)
			return loadBookMarkWithAsk(num);
		else
			return loadBookMark(num);
	}

	function storeBookMark(num, ask = true)
	{
		// KAG 2.x 互換用
		if(ask)
			return saveBookMarkWithAsk(num);
		else
			return saveBookMark(num);
	}

	//------------------------------------------------- 未読/既読/ラベル記録 --

	function setRecordLabel(storage, label)
	{
		// 現在のラベルを設定する
		if(autoRecordPageShowing)
		{
			if(label != '')
			{
				if(label[0] == '*') label = label.substring(1);
				if(label[1] == '-') return; // ローカルラベル
			}
			currentRecordName = 'trail_' + Storages.chopStorageExt(
				Storages.extractStorageName(storage)) + '_' + label;
		}
	}

	function incRecordLabel(count)
	{
		// sflags[currentRecordName]++
		if(autoRecordPageShowing)
		{
			if(currentRecordName != "")
			{
				if(count)
				{
					if(sflags[currentRecordName] === void)
						sflags[currentRecordName] = 0;
					sflags[currentRecordName]++;
				}
				currentRecordName = "";
			}
		}
	}

	//------------------------------------------- システム全体に関係するもの --

	function setTitle(title)
	{
		// タイトルを設定
		if(isMain) System.title = title;
		caption = title;
	}

	function setCursor(elm)
	{
		// マウスカーソルの設定
		var conv = function(variable, value)
		{
			if(value !== void)
			{
				if(!(typeof value == "String" &&
					(value.indexOf('.cur')!=-1 || value.indexOf('.ani')!=-1) ))
						value = +value;
				this[variable] = value;
			}
		} incontextof this;

		conv('cursorDefault', elm['default']); 
		conv('cursorPointed', elm.pointed);
		conv('cursorWaitingClick', elm.click);
		conv('cursorDraggable', elm.draggable);
		fore.base.setDefaultCursor(cursorDefault);
		back.base.setDefaultCursor(cursorDefault);
	}

	//---------------------------------------------------- トリガ管理(TJS用) --

	function waitTrigger(elm)
	{
		// elm.name で示されたトリガを待つ
		if((elm.canskip !== void && +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				if(elm.onskip !== void) Scripts.eval(elm.onskip);
				return 0; // すぐに返る
			}
			conductor.wait(%[
				click : function(arg)
				{
					if(arg !== void) Scripts.eval(arg);
				} incontextof this,
				click_arg : elm.onskip,
				elm.name => function
				{
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				elm.name => function
				{
				} incontextof this
				]);
		}
		return -2;
	}

	function trigger(name)
	{
		// name で示したトリガを発動する
		conductor.trigger(name);
	}

	//------------------------------------------------------- メッセージ履歴 --

	function showHistory()
	{
		// メッセージ履歴レイヤを表示する
		historyLayer.parent = fore.base; // メッセージ履歴レイヤの親も再設定
		historyLayer.absolute = 2000000;
		historyLayer.dispInit();
		historyShowing = true;
		if(typeof this.showHistoryMenuItem != "undefined")
			showHistoryMenuItem.checked = true;
		setMenuAccessibleAll();
	}

	function hideHistory()
	{
		// メッセージ履歴レイヤを非表示にする
		historyLayer.dispUninit(...);
		historyShowing = false;
		if(typeof this.showHistoryMenuItem != "undefined")
			showHistoryMenuItem.checked = false;
//		setMenuAccessibleAll();	//	フェードアウトさせるため、dispUninit で一度 invisible になった historyLayer を visible にしているので、ここで setMenuAccessibleAll を実行すると canAuto=false になってしまう
		lastHistoryHiddenTick = System.getTickCount();
		conductor.trigger('history'); // 'history' を送る
	}

	function setHistoryOptions(elm)
	{
		// elm からメッセージ履歴レイヤのオプションを設定する
		historyWriteEnabled = +elm.output if elm.output !== void;
		historyEnabled = +elm.enabled if elm.enabled !== void;
		if(elm.enabled !== void && !historyEnabled)
			historyLayer.clearAction();
		historyLayer.setOptions(elm); // その他のオプション
		setMenuAccessibleAll();
	}

	function showHistoryByScenario(elm)
	{
		// メッセージ履歴をシナリオ中から表示させる
		showHistory();
		conductor.wait(%[ // コンダクタを待ちに
			history : function
			{
				// やることなし
			} incontextof this
			]);
		return -2; // break
	}

	//-------------------------------------------------------------- process --

	function process(file, label, countpage = true, immediate = false)
	{
		// 指定ファイル、指定ラベルから実行を開始する
		if(!usingExtraConductor) incRecordLabel(countpage);
		setUserSpeed();

		if(file != '')
		{
			// ファイルを読み込み
			conductor.loadScenario(file);
		}

		if(label != '')
		{
			// ラベルに移動する
			conductor.goToLabel(label);
		}

		if(isFirstProcess)
		{
			storeFlags(); // 一番最初の状態をストア
			isFirstProcess = false;
		}


		dm("処理を開始します");
		inSleep = false;
		notifyRun();
		if(conductor.status != conductor.mRun) conductor.run(immediate); // 実行開始
	}

	function processGo()
	{
		// コンダクタを現在位置から実行開始させる
		dm("処理を開始します");
		inSleep = false;
		notifyRun();
		conductor.run(false); // 実行開始
	}

	function processCall(file, label)
	{
		// 指定ファイル、指定ラベルを呼ぶ
		// incRecordLabel(); は呼ばないので注意

		if(file != '')
		{
			// ファイルを読み込み
			conductor.loadScenario(file);
		}

		inSleep = false;
		notifyRun();
		conductor.callLabel(label); // 実行開始
		dm("処理を開始します");
		if(conductor.status != conductor.mRun) conductor.run();
	}

	//------------------------------------------------- コンダクタのイベント --

	function onConductorScenarioLoad(name)
	{
		// コンダクタが新しいシナリオファイルを読み込む前によばれる。
		// name は読み込もうとしたシナリオファイル。
		// 戻り値に文字列を返すと、それをシナリオとして
		// ファイルの代わりに使うようになるので、ここにフィルタを書くこ
		// とができる。
		// true を返すと通常のシナリオファイル読み込みとなる。
		return true;
	}


	function onConductorScenarioLoaded(name)
	{
		// コンダクタが新しいシナリオファイルを読み込んだ
//		if(!usingExtraConductor) incRecordLabel(true);
		return true;
	}

	function onConductorLabel(label, page)
	{
		// コンダクタがラベルを通過した
		if(!usingExtraConductor)
		{
			incRecordLabel(true);
			setRecordLabel(conductor.curStorage, label);
		}
		setUserSpeed();
		if(!usingExtraConductor)
		{
			if(!getCurrentRead() && skipMode != 4)
				cancelSkip(); // 未読なのでスキップを停止
			dm("onConductorLabel: "+currentLabel+" → "+label+" / "+page+"("+(page !== void)+")");
			currentLabel = label;
		}
		if(page !== void && page !== '')
		{
			if(page[0] == '&') page = Scripts.eval((page.substring(1)));
			currentPageName = page;
		}
		if(page !== void)
		{
			pushHistoryOfStore();
			stablePosibility = false;
			dm(conductor.curStorage + " : ラベル/ページ : " + label + "/" + currentPageName);
			if(usingExtraConductor) throw new Exception("右クリックサブルーチン内/extraCondutor"
				"サブルーチン内では保存可能なラベルを記述できません");
			storeFlags(), storeLabelPassed = true, setMenuAccessibleAll();
			if(recordHistoryOfStore == 1) // 1 : 保存可能なラベルごと
				setToRecordHistory();
		}
		return true;
	}

	function onConductorJump(elm)
	{
		// コンダクタで jump タグを処理するとき
		if(!usingExtraConductor) incRecordLabel(elm.countpage === void || +elm.countpage);
		return true;
	}

	function onConductorCall(elm)
	{
		// コンダクタが call タグを処理するとき
		if(!usingExtraConductor) incRecordLabel(elm.countpage !== void && +elm.countpage);
		return true;
	}

	function onConductorReturn(elm)
	{
		// コンダクタが return タグを処理するとき
		if(!usingExtraConductor) incRecordLabel(elm.countpage === void || +elm.countpage);
		if(conductor === extraConductor)
		{
			// extraConductor サブルーチン用のコンダクタから呼ばれている
			if(conductor.callStackDepth == 1)
			{
				// つまり、最終の return が実行されたと言うこと
				dm("extraConductor サブルーチンから戻ります ...");
				var run;
				if(elm.storage !== void || elm.target !== void) run = true; else run = false;
				returnExtraConductor(run);
				if(elm.storage !== void) conductor.loadScenario(elm.storage);
				if(elm.target !== void) conductor.goToLabel(elm.target);
				dm("onConductorReturn: "+currentLabel+" → "+conductor.curLabel);
				setRecordLabel(conductor.curStorage, currentLabel = conductor.curLabel);
				if(run)
				{
					notifyRun();
					conductor.run();
				}
				isLeavePeriodEvent = false;
				if(elm.storage !== void || elm.target !== void)
				{	// returnで元の位置以外に戻る時はピリオドイベントをクリアする。
					holdPeriodEventQueue.clear();
					isWaitPeriodEvent = false;
				}
				if( isWaitPeriodEvent == true )
				{	// [wp]でピリオドイベント待ちをしている時のみ、トリガーする
					fireMoviePeriodFromQueue();
				}
				return false; // return は実行しない
			}
		}
		return true;
	}
	function purgeMoviePeriod()
	{
		isLeavePeriodEvent = false;
		holdPeriodEventQueue.clear();
		isWaitPeriodEvent = false;
		waitedPeriodEventStorageName = void;
	}
	function fireMoviePeriodFromQueue()
	{
		var retVal = false;
		if( holdPeriodEventQueue.count > 0 )
		{
			if( waitedPeriodEventStorageName == conductor.curStorage && conductor == mainConductor )
			{
				for( var i = 0; i < holdPeriodEventQueue.count; i++ )
				{
					conductor.trigger( holdPeriodEventQueue[i] );
					retVal = true;
				}
			}
			holdPeriodEventQueue.clear();
		}
		return retVal;
	}

	function onConductorAfterReturn()
	{
		// コンダクタが return タグを実行した後
		if(!usingExtraConductor)
		{
			dm("onConductorAfterReturn: "+currentLabel+" → "+conductor.curLabel);
			setRecordLabel(conductor.curStorage, currentLabel = conductor.curLabel);
		}
		setUserSpeed();
		if(!usingExtraConductor)
		{
			if(!getCurrentRead() && skipMode != 4)
				cancelSkip(); // 未読なのでスキップを停止
		}
	}


	function onConductorScript(script, scriptname, lineofs)
	{
		// iscript タグ
		try
		{
			Scripts.exec(script, scriptname, lineofs);
		}
		catch(e)
		{
			throw new Exception(scriptname + " の 行 " + lineofs + " から始まる"
				" iscript ブロックでエラーが発生しました。"
				"\n( 詳細はコンソールを参照してください )\n" + e.message);
		}
		return true;
	}

	function onConductorUnknownTag(tagname, elm)
	{
		// 不明なタグがあった場合
		throw new Exception("タグ/マクロ \"" + tagname + "\" は存在しません");
		return 0; // この戻り値は、各タグハンドラが返す物とおなじ
	}

	//----------------------------------------------------------- stable/run --

	function notifyStable()
	{
		// システムが安定(クリック待ち/停止)したときに、ハンドラを呼ぶ
		if(!inStable)
		{
			inStable = true;
			var handlers = stableHandlers;
			for(var i = handlers.count-1; i>=0; i--)
				handlers[i]();

			// stableHook
			forEachEventHook('onStableStateChanged',
				function(handler, f) { handler(f.stable); } incontextof this,
				%[stable:true]);
		}
	}

	function notifyRun()
	{
		// システムが走り始めたときに、ハンドラを呼ぶ
		if(inStable)
		{
			inStable = false;
			var handlers = runHandlers;
			for(var i = handlers.count-1; i>=0; i--)
				handlers[i]();

			// runHook
			forEachEventHook('onStableStateChanged',
				function(handler, f) { handler(f.stable); } incontextof this,
				%[stable:false]);

			if(autoMode) hideMouseCursor();
		}
	}

	function defaultStableHandler()
	{
		// デフォルトの stable ハンドラ
		setMenuAccessibleAll();
	}

	function defaultRunHandler()
	{
		// デフォルトの run ハンドラ
		hideHistory();
		hideClickGlyphs();
//		showMessageLayerByUser();	//	テキストが表示されるときにメッセージウィンドウが可視になるので、ここでは可視にしない(ロード時、必要ないタイミングで可視になるので)
		setMenuAccessibleAll();
	}

	//----------------------------------------------------------- 文字列入力 --

	var inputTemp;
	function inputString(elm)
	{
		// 文字列を入力する
		var name = elm.name;
		var initial = Scripts.eval(name);
		var res = System.inputString(elm.title, elm.prompt, initial);
		if(res !== void)
		{
			// name に res を代入する
			inputTemp = res;
			Scripts.eval(("(" + name + ") = kag.inputTemp"));
		}
	}

	//-------------------------------------------------- extraConductor 処理 --

	function callExtraConductor(storage, label, onreturn)
	{
		// extraConductor を使ってサブルーチンを呼び出す
		onExtraConductorReturn = onreturn;
		inSleepBeforeExtraConductor = inSleep; // inSleep 保存
		storeMessageLayerSelProcessLock(); // メッセージレイヤの storeSelProcessLock を呼ぶ
		conductor = extraConductor; // コンダクタを切り替える
		(Dictionary.assign incontextof extraConductor.macros)(mainConductor.macros);
			// マクロはコピー
		usingExtraConductor = true;
		if(storage == '')
		{
			// ストレージ指定がないので現在のストレージを読み込ませる
			storage = mainConductor.curStorage;
		}

		// 呼び出す
		conductor.clearCallStack();
		processCall(storage, label);
	}

	function returnExtraConductor(run)
	{
		// extraConductor のサブルーチンから戻る
		// run が true の場合は 待機状態の復帰は行わない

		conductor.sleep(); // 停止
		conductor.interrupt();
			// interrupt は コンダクタのイベント内でコンダクタの実行を
			// 停止させるためのメソッド
		conductor = mainConductor; // コンダクタを切り替え
		(Dictionary.assign incontextof mainConductor.macros)(extraConductor.macros);
			// マクロはコピー
		usingExtraConductor = false;
		if(!run)
		{	restoreClickGlyphState(); // クリック待ち記号の復帰
			inSleep = inSleepBeforeExtraConductor; // inSleep 復帰
			notifyStable();
		}
		restoreMessageLayerSelProcessLock(); // メッセージレイヤの restoreSelProcessLock を呼ぶ
		setMenuAccessibleAll();
		cancelSkip();

		if(onExtraConductorReturn !== void) onExtraConductorReturn();
	}

	//------------------------------------------------------- 右クリック処理 --

	function setRightClickOptions(elm)
	{
		// 右クリックのオプションを設定する
		rightClickEnabled = +elm.enabled if elm.enabled !== void;
		if(elm.exp !== void)
		{
			rightClickExp = elm.exp;
			if(rightClickExp != void) rightClickJump = rightClickCall = false;
		}
		else
		{
			if(elm.call !== void)
			{
				rightClickCall = +elm.call;
				if(rightClickCall) rightClickJump = rightClickExp = false;
			}
			if(elm.jump !== void)
			{
				rightClickJump = +elm.jump;
				if(rightClickJump) rightClickCall = rightClickExp = false;
			}
			rightClickTarget = elm.target if elm.target !== void;
			rightClickStorage = elm.storage if elm.storage !== void;
		}
		if(elm.name !== void)
		{
			if(typeof this.rightClickMenuItem != "undefined")
			{
				rightClickName = elm.name;
				if(rightClickName == "default")
					rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
				else
					rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickName;
			}
		}
	}

	function callRightClickSubRoutine()
	{
		isLeavePeriodEvent = true;

		// 右クリックサブルーチンを呼ぶ
		if(typeof this.rightClickMenuItem != "undefined")
		{
			rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
		}

		callExtraConductor(rightClickStorage, rightClickTarget, restoreFromRightClick);

		lockMessageLayerSelProcess(); // 選択肢ロック
	}

	function executeRightClickFunction()
	{
		if(rightClickExp == void)
			return;

		isLeavePeriodEvent = true;

		if(typeof this.rightClickMenuItem != "undefined")
		{
			rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
		}

		rightClickExp!;

		lockMessageLayerSelProcess(); // 選択肢ロック
	}

	function restoreFromRightClick()
	{
		// 右クリックサブルーチンから抜けるときに呼ばれる
		if(typeof this.rightClickMenuItem != "undefined")
		{
			if(rightClickName == "default")
				rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickDefaultName;
			else
				rightClickMenuItem.caption = rightClickCurrentMenuName = rightClickName;
		}
	}

	function setConductorToMain()
	{
		// restore の時に呼ばれ、コンダクタを main に切り替える
		if(usingExtraConductor)
		{
			extraConductor.sleep();
			extraConductor.interrupt();
			conductor= mainConductor;
			usingExtraConductor = false;
		}
	}

	function jumpToRightClickTarget()
	{
		process(rightClickStorage, rightClickTarget);
	}

	function onPrimaryRightClick()
	{
		// プライマリレイヤで右クリックされたときに呼ばれる
		if(!callHook(rightClickHook))
		{
@if(ATONCECLICK_TO_AUTOMODE==1)
			if(getKeyState(VK_LBUTTON))
			{
				enterAutoMode();
				return;
			}
@endif
			if(!rightClickEnabled) return;
			if(inStable)
			{
				if(rightClickJump)
					jumpToRightClickTarget();
				else if(rightClickCall && conductor == mainConductor)
					callRightClickSubRoutine();
				else if(rightClickExp != void)
					executeRightClickFunction();
				else
					switchMessageLayerHiddenByUser();
			}
			setMenuAccessibleAll();
		}
	}

	//------------------------------------------------------- 前景レイヤ処理 --

	function allocateCharacterLayers(num)
	{
		// 前景レイヤ数を num に設定する
		if(fore.layers.count > num)
		{
			// レイヤが減る
			for(var i = num; i<fore.layers.count; i++)
			{
				invalidate fore.layers[i];
				invalidate back.layers[i];
			}
			fore.layers.count = num;
			back.layers.count = num;
		}
		else if(fore.layers.count < num)
		{
			// レイヤが増える
			for(var i = fore.layers.count; i<num; i++)
			{
				fore.layers[i] = new CharacterLayer(this, fore.base, "表前景レイヤ" + i, i);
				back.layers[i] = new CharacterLayer(this, back.base, "裏前景レイヤ" + i, i);
				fore.layers[i].setCompLayer(back.layers[i]);
				back.layers[i].setCompLayer(fore.layers[i]);
			}
			reorderLayers();
		}
		numCharacterLayers = num;
	}

	//------------------------------------------------- メッセージレイヤ処理 --

	function allocateMessageLayers(num, setdefaultfont = true)
	{
		// メッセージレイヤ数を num に設定する
		if(fore.messages.count > num)
		{
			// レイヤが減る
			for(var i = num; i<fore.messages.count; i++)
			{
				if(current == fore.messages[i] || current == back.messages[i])
					current = fore.messages[0], currentNum = 0, currentPage = 0;
				invalidate fore.messages[i];
				invalidate back.messages[i];
			}
			fore.messages.count = num;
			back.messages.count = num;
		}
		else if(fore.messages.count < num)
		{
			// レイヤが増える
			for(var i = fore.messages.count; i<num; i++)
			{
				fore.messages[i] = new MessageLayer(this, fore.base, "表メッセージレイヤ" + i, i, true);
				back.messages[i] = new MessageLayer(this, back.base, "裏メッセージレイヤ" + i, i, true);
				fore.messages[i].setCompLayer(back.messages[i]);
				back.messages[i].setCompLayer(fore.messages[i]);
				fore.messages[i].clear();
				back.messages[i].clear();
			}
			reorderLayers();
			if(setdefaultfont) setMessageLayerUserFont();
		}
		numMessageLayers = num;
	}

	function setCurrentMessageLayer(elm)
	{
		// 現在のメッセージレイヤを設定
		var page = getMessageLayerPageFromElm(elm);
		var num = getMessageLayerNumberFromElm(elm);
		currentNum = num;
		currentPage = page;
		if(page) current = back.messages[num]; else current = fore.messages[num];
		currentWithBack = +elm.withback if elm.withback !== void;
	}

	function setMessageLayerPosition(elm)
	{
		// 現在のメッセージレイヤの位置、属性を設定
		var layer = getMessageLayerObjectFromElm(elm);
		elm.setPosition(elm);
	}

	function clearMessageLayers(resetcurrent)
	{
		// すべてのメッセージレイヤのクリア
		// ct タグから呼ばれる
		// resetcurrent が true の場合は現在のメッセージレイヤを
		// 表0に設定する

		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].clear();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].clear();
		if(resetcurrent)
		{
			currentNum = 0;
			currentPage = 0;
			current = fore.messages[0];
			currentWithBack = false;
		}
	}

	function lockMessageLayerSelProcess()
	{
		// すべてのメッセージレイヤに 選択とprocessを禁止させる
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(true);
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(true);
	}

	function unlockMessageLayerSelProcess()
	{
		// すべてのメッセージレイヤの選択を許可する
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(false);
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].setSelProcessLock(false);
	}

	function setMessageLayerUserFont()
	{
		// すべてのメッセージレイヤの defaultAntialiased と
		// userFace を設定する
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--)
			messages[i].defaultAntialiased = chDefaultAntialiased,
			messages[i].userFace = chDefaultFace;
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--)
			messages[i].defaultAntialiased = chDefaultAntialiased,
			messages[i].userFace = chDefaultFace;
	}

	function storeMessageLayerSelProcessLock()
	{
		// すべてのメッセージレイヤの storeSelProcessLock を呼び出す
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].storeSelProcessLock();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].storeSelProcessLock();
	}

	function restoreMessageLayerSelProcessLock()
	{
		// すべてのメッセージレイヤの restoreSelProcessLock を呼び出す
		var messages;
		messages = fore.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].restoreSelProcessLock();
		messages = back.messages;
		for(var i = messages.count-1; i >= 0; i--) messages[i].restoreSelProcessLock();
	}

	function setMessageLayerHiddenState(b)
	{
		var layers;
		layers = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].setHiddenStateByUser(b);
		layers = fore.layers;
		for(var i = layers.count-1; i >= 0; i--) layers[i].setHiddenStateByUser(b);

		// プラグインを呼ぶ
		forEachEventHook('onMessageHiddenStateChanged',
			function(handler, f) { handler(f.hidden); } incontextof this,
			%[hidden:b]);
	}

	function hideMessageLayerByUser()
	{
		// メッセージレイヤを一時的に隠す
		if(messageLayerHiding) return;
//		dmt("hideMessageLayerByUser()");
		setMessageLayerHiddenState(true);
		if(typeof this.rightClickMenuItem !== "undefined")
			rightClickMenuItem.checked = true;
		messageLayerHiding = true;
		fore.base.cursor = cursorWaitingClick;
		setMenuAccessibleAll();
	}

	function showMessageLayerByUser()
	{
		// 一時的に隠されていたメッセージレイヤを元に戻す
		if(!messageLayerHiding) return;
//		dmt("showMessageLayerByUser()");
		setMessageLayerHiddenState(false);
		if(typeof this.rightClickMenuItem !== "undefined")
			rightClickMenuItem.checked = false;
		messageLayerHiding = false;
		conductor.trigger('message'); // 'message' を送る
		if(clickWaiting)
			fore.base.cursor = cursorWaitingClick;
		else
			fore.base.cursor = cursorDefault;
		setMenuAccessibleAll();
	}

	function switchMessageLayerHiddenByUser()
	{
		// メッセージレイヤの非表示/表示を切り替える
		if(messageLayerHiding) showMessageLayerByUser(); else hideMessageLayerByUser();
	}

	function hideMessageLayerByScenario(elm)
	{
		// シナリオからメッセージを一時的に隠す
		hideMessageLayerByUser();
		conductor.wait(%[ // コンダクタを待ちに
			message : function
			{
				// やることなし
			} incontextof this
			]);
		return -2; // break
	}

	function selectFont()
	{
		// フォントを選択する
		fore.base.font.face = chDefaultFace;
		fore.base.font.height = -20;
		var flags = fsfSameCharSet | fsfNoVertical | fsfTrueTypeOnly | fsfUseFontFace;
		if(showFixedPitchOnlyInFontSelector) flags |= fsfFixedPitch;
		if(fore.base.font.doUserSelect(flags, "フォントの選択",
			"フォントを選択してください", "ABCDEFGHIあいうえお亜胃宇絵御"))
		{
			chDefaultFace = fore.base.font.face;
			setMessageLayerUserFont();
		}
	}

	function mapPrerenderedFont(storage)
	{
		// レンダリング済みフォントを現在の操作対象のレイヤに選択
		// されているフォントにマッピングする
		current.decideSizeChange();
		current.lineLayer.font.mapPrerenderedFont(storage);
	}

	//------------------------------------------------- レイヤを正しい順序に --

	function reorderLayers()
	{
		// レイヤを正しい順序に並び替える
		var index = 1000;
		for(var i = 0; i<fore.layers.count; i++)
		{
			fore.layers[i].absolute = index;
			back.layers[i].absolute = index;
			index += 1000;
		}
		index = 1000000;
		for(var i = 0; i<fore.messages.count; i++)
		{
			fore.messages[i].absolute = index;
			back.messages[i].absolute = index;
			index += 1000;
		}

		historyLayer.absolute = 2000000;

	}

	//--------------------------------------------- 属性->レイヤオブジェクト --

	function getLayerFromElm(elm, prefix = '')
	{
		// elm に指定されている page と layer 属性から、該当する
		// オブジェクトを返す
		// prefix には、属性名の前につけるプレフィクスを指定する
		var base;
		if(elm[prefix + 'page'] == 'back') base = back; else base = fore;
		var layer = elm[prefix + 'layer'];
		if(layer == 'base') return base.base; // 背景
		if(layer[0] == 'm')
		{
			// message? ( ? = 数値 )
			// ここではあまり厳密にエラーチェックはしない
			if(layer == 'message') return base.messages[currentNum];
			return base.messages[+layer.substr(7)];
		}
		return base.layers[+layer];
	}

	function getLayerPageFromElm(elm, backlay)
	{
		// getLayerFromElm と似ているが、page 属性まではみない。
		// backlay が true のときは裏、false の時は表のレイヤを返す。
		// elm.layer が void の時は背景レイヤを帰す
		var base = backlay?back:fore;
		var layer = elm.layer;
		if(layer === void || layer == 'base') return base.base; // 背景
		if(layer[0] == 'm')
		{
			if(layer == 'message') return base.messages[currentNum];
			return base.messages[+layer.substr(7)];
		}
		return base.layers[+layer];
	}

	function getMessageLayerPageFromElm(elm)
	{
		// elm から該当する表/裏画面のメッセージレイヤ配列を返す
		if(elm.page == 'back') return 1; else return 0;
	}

	function getMessageLayerNumberFromElm(elm)
	{
		// elm の layer 属性の示すメッセージレイヤ番号を返す
		var layer = elm.layer;
		if(layer === void || layer == 'message') return currentNum;
		return +layer.substr(7);
	}

	function getMessageLayerObjectFromElm(elm)
	{
		// elm の layer 属性の示すメッセージレイヤを返す
		var page = elm.page;
		var layer = elm.layer;
		if(page === void && layer === void) return current;
		var base;
		if(page == 'back') base = back; else base = fore;
		if(layer === void || layer == 'message') return base.messages[currentNum];
		return base.messages[+layer.substr(7)];
	}

	function getMessageLayerObjectFromPageAndNumber(page, num)
	{
		return (page?back:fore).messages[num];
	}

	//----------------------------------------------------- レイヤコピー関連 --

	function backupLayer(elm, toback)
	{
		// レイヤの表←→裏間のコピーを行う
		// toback = true の場合は表→裏、false の場合は裏→表
		if(elm.layer !== void)
		{
			// レイヤ指定がある
			getLayerPageFromElm(elm, toback).assignComp(); // 対のレイヤの内容をコピー
		}
		else
		{
			// レイヤ指定が無いので全部のレイヤをコピー
			var base = toback ? back:fore;
			base.base.assignComp();
			var layers = base.layers, messages = base.messages;
			for(var i = layers.count-1; i >= 0; i--) layers[i].assignComp();
			for(var i = messages.count-1; i >= 0; i--) messages[i].assignComp();

			forEachEventHook('onCopyLayer',
				function(handler, f) { handler(f.toback); } incontextof this,
				%[toback:toback]);
		}
	}

	function copyLayer(elm)
	{
		// elm に従って同種のレイヤ間のコピーを行う
		var src = getLayerFromElm(elm, 'src');
		var dest = getLayerFromElm(elm, 'dest');
		dest.assign(src);
	}

	//--------------------------------------------------- アニメーション関連 --

	function onAnimationStopped(name, segment)
	{
		// アニメーションが停止した
		conductor.trigger('anim:' + name + ':' + segment);
	}

	function waitAnimation(elm)
	{
		// アニメーションの停止をまつ
		var layer = getLayerFromElm(elm);
		var seg = +elm.seg;
		if(!layer.canWaitAnimStop(seg)) return 0; // アニメーションの停止を待つ
		conductor.wait(%[
			'anim:' + layer.name + ':' + seg => function
			{
			} incontextof this
			]);
		return -2;
	}

	//--------------------------------------------------- トランジション関連 --

	function onLayerTransitionCompleted(layer, dest, src)
	{
		// レイヤでトランジションが終了したときに呼ばれる
		conductor.trigger('trans'); // 'trans' を送る
	}

	function waitTransition(elm)
	{
		// トランジションを待つ
		if(transCount == 0) return 0; // トランジションを待てない
		if((elm.canskip === void || +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllTransitions();
				return 0; // トランジションを停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllTransitions(); // すべてのトランジションは停止
				} incontextof this,
				trans : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				trans : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	function stopAllTransitions()
	{
		// すべてのトランジションを停止させる
		var layers, messages;
		fore.base.stopTransition();
		layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopTransition();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopTransition();
		back.base.stopTransition();
		layers = back.layers, messages = back.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopTransition();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopTransition();
		transCount = 0; // 一応
	}

	function callExchangeInfo()
	{
		// すべての背景レイヤをのぞく表レイヤに対して
		// exchangeInfo を呼ぶ
		var layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].exchangeInfo();
		for(var i = messages.count-1; i >= 0; i--) messages[i].exchangeInfo();
	}

	function callAssignTransSrc()
	{
		// すべての背景レイヤをのぞく表レイヤに対して
		// assignTransSrc を呼ぶ
		var layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].assignTransSrc();
		for(var i = messages.count-1; i >= 0; i--) messages[i].assignTransSrc();
		forEachEventHook('onCopyLayer',
				function(handler, f) { handler(f.toback); } incontextof this,
				%[toback:false]);
	}

	function exchangeForeBack()
	{
		// レイヤの裏と表を取り替える
		var tmp = fore;
		fore = back;
		back = tmp;
		current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し
		forEachEventHook('onExchangeForeBack',
				function(handler, f) { handler(); } incontextof this);
	}

	function swapBaseLayer()
	{
		// 背景レイヤのみを取り替える
		var tmp = fore.base;
		fore.base = back.base;
		back.base = tmp;
		current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し
	}

	function swapCharacterLayer(id)
	{
		// 前景レイヤの表と裏を取り替える
		var fl = fore.layers, bl = back.layers;
		var tmp = fl[id];
		fl[id] = bl[id];
		bl[id] = tmp;
	}

	function swapMessageLayer(id)
	{
		// メッセージレイヤの表と裏を取り替える
		var fl = fore.messages, bl = back.messages;
		var tmp = fl[id];
		fl[id] = bl[id];
		bl[id] = tmp;
		current = (currentPage?back:fore).messages[currentNum]; // current は設定し直し
	}

	//--------------------------------------------------------- 自動移動関連 --

	function onLayerMoveStop()
	{
		// レイヤの自動移動が終了した
		conductor.trigger('move');
	}

	function waitMove(elm)
	{
		// 自動移動を待つ
		if(moveCount == 0) return 0; // 自動移動を待てない
		if((elm.canskip === void || +elm.canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllMoves();
				return 0; // 自動移動を停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllMoves(); // すべてのトランジションは停止
				} incontextof this,
				move : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				move : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	function stopAllMoves()
	{
		// すべての自動移動を停止させる
		var layers, messages;
		fore.base.stopMove();
		back.base.stopMove();
		layers = fore.layers, messages = fore.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopMove();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopMove();
		layers = back.layers, messages = back.messages;
		for(var i = layers.count-1; i >= 0; i--) layers[i].stopMove();
		for(var i = messages.count-1; i >= 0; i--) messages[i].stopMove();
		moveCount = 0; // 一応
	}

	//------------------------------------------------ ディレイ/スキップ関連 --

	function setDelay(elm)
	{
		// delay タグの処理
		var speed = elm.speed;
		if(speed == 'nowait')
		{
			chSpeed = 0;
			chUserMode = false;
		}
		else if(speed == 'user')
		{
			chUserMode = true;
			setUserSpeed();
		}
		else
		{
			chSpeed = +speed;
			chUserMode = false;
		}
		if(!skipMode) actualChSpeed = chSpeed;
	}

	function getCurrentRead()
	{
		// 現在のシナリオ部分が既読かどうかを判定する
		return autoRecordPageShowing && currentRecordName != "" &&
				+sflags[currentRecordName] || !autoRecordPageShowing;
	}

	function setUserSpeed()
	{
		// ユーザの選択した文字表示スピードを設定
		// この関数を読んだ時点ですでに userChSpeed には
		// あたらしい値が設定されているとみなす。
		// あるいは、ラベルごとに、その区域が既読か未読かで
		// 表示スピードを変える目的で呼ばれる
		if(chUserMode)
		{
			if(getCurrentRead())
				chSpeed = userCh2ndSpeed==-1?userChSpeed:userCh2ndSpeed; // 既読
			else
				chSpeed = userChSpeed; // 未読
		}
		if(!skipMode) actualChSpeed = chSpeed;
	}

	function skipToClick()
	{
		// クリック待ち記号までスキップ
		skipMode = 1;
		actualChSpeed = 0;
	}

	function skipToPage()
	{
		// 改ページ待ち記号までスキップ
		skipMode = 2;
		actualChSpeed = 0;
	}

	function skipToStop(force=false)
	{
		// 次の停止までスキップ
		kag.showMessageLayerByUser() if force;
		var	h	= messageLayerHiding;
		onPrimaryClick(); // クリックの動作をエミュレートする
		if(!h)
		{//	メッセージレイヤーが隠れていれば、スキップは開始しない
			skipMode = 3;
			actualChSpeed = 0;
			if(typeof this.skipToNextStopMenuItem != "undefined")
				skipToNextStopMenuItem.checked = true;
		}
	}

	function skipToStop2()
	{
		// 次の停止までスキップ(早送りモード)
		var	h	= messageLayerHiding;
		onPrimaryClick();
		if(!h)
		{//	メッセージレイヤーが隠れていれば、スキップは開始しない
			skipMode = 4;
			actualChSpeed = 0;
		}
	}

	function cancelSkip(byuser=false)
	{
		// スキップ動作をキャンセル
		if(skipMode == 4) skipKeyRepressed = false;
		skipMode = 0;
		actualChSpeed = chSpeed;
		if(typeof this.skipToNextStopMenuItem != "undefined")
			skipToNextStopMenuItem.checked = false;
	}

	function enterNoWait()
	{
		// nowait タグの処理
		beforeNoWaitActualChSpeed = actualChSpeed;
		beforeNoWaitChUserMode = chUserMode;
		actualChSpeed = 0;
	}

	function leaveNoWait()
	{
		// endnowait タグの処理
		actualChSpeed = beforeNoWaitActualChSpeed;
		chUserMode = beforeNoWaitChUserMode;
	}

	function setAutoWait(elm)
	{
		// 自動ウェイトを設定する
		autoWCEnabled = +elm.enabled if elm.enabled !== void;
		autoWCChars = elm.ch if elm.ch !== void;
		autoWCWaits = [].split(",", elm.time) if elm.time !== void;
	}

	function cancelAutoMode()
	{
		// 自動読みすすみモードのキャンセル
		if(autoMode)
		{
			autoMode = false;
			if(typeof this.autoModeMenuItem !== "undefined")
				autoModeMenuItem.checked = false;
			var t = conductor.lastTagName;
			if(t == 'p'){
				showPageBreak();
			}
			else if(t == 'l'){
				showLineBreak(%[canskip: false]);
			}
		}
	}

	function enterAutoMode()
	{
		// 自動読みすすみモードに入る
		if(typeof this.autoModeMenuItem !== "undefined")
			autoModeMenuItem.checked = true;
		if(inStable)
			onPrimaryClick();
		autoMode = true;
	}

	//--------------------------------------------------------- ウェイト関連 --

	function resetWait()
	{
		// 時間原点のリセット
		timeOrigin = System.getTickCount();
	}

	function waitTime(waittime, canskip)
	{
		// waittime 分待つ
		if(waittime == 0) return 0;
		if(canskip)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				return 0; // スキップ中の場合はなにもせずに返る
			}
			conductor.waitWithTimeOut(%[
				click : function
				{
					// やることなし
				} incontextof this,

				timeout : function
				{
					// やることなし
				} incontextof this
				], waittime);
		}
		else
		{
			// スキップできない場合
			conductor.waitWithTimeOut(%[
				timeout : function
				{
					// やることなし
				} incontextof this
				], waittime);
		}
		return -2; // break
		
	}

	function doWait(elm)
	{
		// wait タグの処理
		var waittime;
		if(elm.mode == 'until')
		{
			// until モード
			waittime = timeOrigin + +elm.time - System.getTickCount();
			if(waittime < 0) { lastWaitTime = 0; return 0; } // すでに時間が経過している
			lastWaitTime = waittime;
			if(waittime < 6) return 0; // あまりに待ち時間が短いので待たない
		}
		else
		{
			waittime = +elm.time;
		}
		return waitTime(waittime, (elm.canskip === void || +elm.canskip) && clickSkipEnabled);
	}

	function doWaitCh(elm)
	{
		// +elm.time のカウント分、待つ
		var t = elm.time;
		return waitTime(actualChSpeed * (t === void ? 1 : +t),
			(elm.canskip === void || +elm.canskip) && clickSkipEnabled);
	}

	//------------------------------------------------------------- クリック --

	function onPrimaryClick(button=mbLeft)
	{
		// プライマリレイヤで「クリックの動作」がなにもフィルタリングされなかった
		// とき、プライマリレイヤから呼ばれる。
		clickCount ++;
		if(!callHook(leftClickHook))
		{
			if(messageLayerHiding)
			{
				showMessageLayerByUser(); // メッセージレイヤを表示する
			}
			else
			{
				var st = conductor.status;
				var runst = conductor.mRun;
				var stopst = conductor.mStop;

//				if(st != stopst && autoMode)
				if(st != stopst && autoMode && (!cf.autoModeArrowClick || button==mbRight))
				{
					// 自動読みすすみの場合
					cancelAutoMode();
				}
				else if(st != stopst && canCancelSkipByClick && skipMode && skipMode != 4)
				{
					// クリックによるスキップの解除が可能
					cancelSkip(true);
				}
				else
				{
					// この時点でフィルタリングされないメッセージは待ち状態のクリアなので
					// conductor に 'click' を送り解除を伝える。

					if(!conductor.trigger('click')) // 待ち状態でない場合は単に無視される
					{
						// ハンドラが見つからないなど、処理されなかった場合
						if(st == runst && clickSkipEnabled && skipMode == 0)
						{
							// クリックによるスキップが可能
							skipToClick();
						}
					}
				}
			}
		}
	}

	function onPrimaryClickByKey()
	{
		// キーが押されたときプライマリレイヤをクリックしたのと
		// 同じ動作をするが、さらに一時的にマウスカーソルを隠す
		onPrimaryClick();
		hideMouseCursor();
	}

	function waitClick(elm)
	{
		// クリックを待つ
		conductor.wait(%[
			click : function
			{
			} incontextof this]);
		return -2;
	}

	function onMouseDown(x, y)
	{
		lastMouseDownX = x;
		lastMouseDownY = y;
		super.onMouseDown(...);
	}

	//------------------------------------------------------- キーボード操作 --

	function processKeys(key, shift)
	{
		if(checkProceedingKey(key, shift)) return;

		if(key == #'F')
		{
			// 次の選択肢/未読まで進む
			skipToNextStopByKey();
			return;
		}

		if(key == #'B')
		{
			// 前に戻る
			goBackByKey();
			return;
		}

		if(key == #'A')
		{
			// 自動的に読み進める
			switchAutoModeByKey();
			return;
		}

		if(freeSaveDataMode)
		{
			if(key == #'S')
			{
				// 栞をはさむ
				if(typeof this.storeMenu != "undefined" && storeMenu.enabled)
					storeMenu.click();
				return;
			}

			if(key == #'L')
			{
				// 栞をたどる
				if(typeof this.restoreMenu != "undefined" && restoreMenu.enabled)
					restoreMenu.click();
				return;
			}
		}

		if(key == #'R' || (key == VK_UP && (shift & ssShift)))
		{
			// メッセージ履歴を表示
			showHistoryByKey();
			return;
		}

		if(key == VK_ESCAPE)
		{
			// メッセージを消す
			if(typeof this.rightClickMenuItem != "undefined" &&
				rightClickMenuItem.enabled)
			{
				rightClickMenuItem.click(); // クリックをエミュレート
				return;
			}
		}
	}

	function preProcessKeys(key, shift)
	{
		return callHook(keyDownHook, key, shift);
	}

	function internalOnKeyDown(key, shift)
	{
		if(!preProcessKeys(key, shift)) processKeys(key, shift);
	}

	function checkProceedingKey(key, shift)
	{
		// key が読みすすみのキー ( スペースキーかReturnキー ) の場合は
		// キーを処理し、true を返す。そうでなければ false を返す
		if(key == VK_RETURN || key == VK_SPACE)
		{
			// キーがメッセージキューに溜まってる場合があるので
			// 実際にそのキーが押されているのかどうかを
			// getKeyState を用いて調べる
			var sg = getKeyState;
			if(sg(VK_RETURN) || sg(VK_SPACE))
			{
				// キーが押されてた
				if((shift & ssRepeat) && clickSkipEnabled)
				{
					// キーリピート
					if(skipMode != 4 && skipKeyRepressed)
						skipToStop2(); // まだskipMode 4に入っていない場合は早送りモードに入る
					// skipKeyRepressed をチェックするのは
					// 連続してキーリピートが発生しているときに
					// cancelSkip 後にスキップに突入するのを防ぐため
				}
				else
				{
					skipKeyRepressed = true;
					onPrimaryClickByKey();
				}
				return true;
			}
		}

		return false;
	}

	function skipCancelKeyPressing()
	{
		// スキップを解除する要因となるキーあるいはマウスボタンが押されているか
		var sg = getKeyState;
		return sg(VK_RETURN) || sg(VK_SPACE) || sg(VK_LBUTTON);
	}

	function skipKeyPressing()
	{
		// VK_RETURN あるいは VK_SPACE が押されているかどうか
		var sg = getKeyState;
		return sg(VK_RETURN) || sg(VK_SPACE);
	}

	function goBackByKey()
	{
		if(typeof this.goBackMenuItem != "undefined" &&
			goBackMenuItem.enabled)
			goBackMenuItem.click(); // クリックをエミュレート
	}

	function skipToNextStopByKey()
	{
		if(typeof this.skipToNextStopMenuItem != "undefined" &&
			skipToNextStopMenuItem.enabled)
			skipToNextStopMenuItem.click(); // クリックをエミュレート
	}

	function showHistoryByKey()
	{
		if(typeof this.showHistoryMenuItem != "undefined" &&
			showHistoryMenuItem.enabled)
			showHistoryMenuItem.click(); // クリックをエミュレート
	}

	function switchAutoModeByKey()
	{
		if(typeof this.autoModeMenuItem != "undefined" &&
			autoModeMenuItem.enabled)
			autoModeMenuItem.click(); // クリックをエミュレート
	}

	function onKeyDown(key, shift)
	{
		if(focusedLayer === null)
			internalOnKeyDown(key, shift);
		super.onKeyDown(...);
	}

	function onMouseWheel(shift, delta, x, y)
	{
		// ホイールが回転した
		super.onMouseWheel(...);
		// メッセージ窓のホイール処理
		if (inSleep && current.hasWheel()) {
			current.processWheel(shift, delta, x, y);
			return;
		}
		if(!historyLayer.visible)
		{
			if(delta > 0)
				showHistoryByKey(); // メッセージ履歴を表示
			else if(System.getTickCount() - lastHistoryHiddenTick > 150) 
					onPrimaryClick(); // クリックをエミュレート
			// ↑ tick を比較しているのは、メッセージ履歴を隠す操作とホイールを
			// 手前に回す操作が連続した場合に勝手に読み進むのをある程度防ぐ仕掛け
		}
		else
		{
			// メッセージ履歴にイベントを垂れ流す
			historyLayer.windowMouseWheel(shift, delta, x, y);
		}
	}

	//------------------------------------------------- クリック待ち記号処理 --

	function hideClickGlyphs()
	{
		// クリック待ち記号を非表示に
		if( current !== void && isvalid current )
		{
			current.hideGlyph();
			current.comp.hideGlyph() if currentWithBack && current.comp !== void && isvalid current.comp;
		}
		if(conductor == mainConductor)
		{
			// クリック待ち記号の状態を記録
			lastClickGlyphVisible = false;
		}
	}

	function storeClickGlyphState(which)
	{
		// クリック待ち記号の情報を一時的に待避
		// このデータは右クリックサブルーチンやextraConductorサブルーチンから戻るときに参照する
		if(conductor == mainConductor)
		{
			lastClickGlyphVisible = true;
			lastClickGlyphMessagePage = currentPage;
			lastClickGlyphMessageNum = currentNum;
			lastClickGlyphWhich = which;
		}
	}

	function restoreClickGlyphState()
	{
		// lastClickGlyph *** に一時的に待避したクリック待ち記号の情報
		// に基づいてクリック待ち記号を設定する
		if(lastClickGlyphVisible)
		{
			var layer = getMessageLayerObjectFromPageAndNumber
				(lastClickGlyphMessagePage, lastClickGlyphMessageNum);
			if(layer !== void)
			{
				switch(lastClickGlyphWhich)
				{
				case 'line':
					layer.showLineBreakGlyph(lineBreak);
					break;
				case 'page':
					layer.showPageBreakGlyph(pageBreak);
					break;
				}
			}
		}
	}

	function canIgnoreL()
	{
		// L タグを無視できるかどうか
		return chNonStopToPageBreak || (getCurrentRead() && ch2ndNonStopToPageBreak);
	}

	property breakWithBack	{ getter { return currentWithBack && transCount > 0; } }

	function showLineBreak(elm)
	{
		// 現在のメッセージレイヤに行待ち記号を表示する
		stablePosibility = true;
		if(canIgnoreL())
		{
			// l タグの無視
			if(elm.canskip === void || !+elm.canskip)
				return (skipMode==3 || skipMode==4) ? 0 : -4;
		}
		if(autoMode)
		{
			// 自動読みすすみの場合
			cancelSkip();
			if(cf.autoModeArrowClick)
				return doWait(%[time:autoModeLineWait,norapid:true,canskip:true]);
			else
				return autoModeLineWait;
		}
		if(skipMode == 1) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip(true);
		if(skipMode == 4) return -4;
		if(skipMode) return skipCancelKeyPressing()?-4:0;
			// スキップ中(スキップをキャンセルするようなキーがあればスキップ解除
			// のためのイベント処理の機会を与える)

		current.showLineBreakGlyph(lineBreak);
		current.comp.showLineBreakGlyph(lineBreak) if breakWithBack;
			//	トランジション中は逆のメッセージレイヤーにも待ち記号を表示する
		storeClickGlyphState("line");

		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"で行クリック待ちになりました");
		}

		// conductor を 'click' まで待ち状態に
		conductor.wait(%[
			click : function
			{
				clickWaiting = false;
				fore.base.cursor = cursorDefault;
				notifyRun();
			} incontextof this
			]);
		clickWaiting = true;
		fore.base.cursor = cursorWaitingClick;
		notifyStable();
		return -2;
	}

	function showPageBreak(elm)
	{
		// 現在のメッセージレイヤにページ待ち記号を表示する
		stablePosibility = true;
		if(skipMode == 1 || skipMode == 2) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip(true);
		if(skipMode) return -4; // いったんイベントを処理
		if(autoMode)
		{
			// 自動読みすすみの場合
			if(cf.autoModeArrowClick)
				return doWait(%[time:autoModePageWait,norapid:true,canskip:true]);
			else
				return autoModePageWait;
		}

		current.showPageBreakGlyph(pageBreak);
		current.comp.showPageBreakGlyph(lineBreak) if breakWithBack;
			//	トランジション中は逆のメッセージレイヤーにも待ち記号を表示する
		storeClickGlyphState("page");

		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"でページクリック待ちになりました");
		}

		// conductor を 'click' まで待ち状態に
		conductor.wait(%[
			click : function
			{
				clickWaiting = false;
				fore.base.cursor = cursorDefault;
				notifyRun();
			} incontextof this
			]);
		clickWaiting = true;
		fore.base.cursor = cursorWaitingClick;
		notifyStable();
		return -2;
	}

	function showPageBreakAndClear()
	{
		// メッセージレイヤが最終行まで達して自動改ページがされるときに
		// 呼ばれる。現在のメッセージレイヤにページ待ち記号を表示し、
		// 実行再開時には MessageLayer.clear2 を呼ぶ
		stablePosibility = true;
		if(skipMode == 1 || skipMode == 2) cancelSkip();
		if(skipMode == 4 && !skipKeyPressing()) cancelSkip(true);
		var lasttagname = conductor.lastTagName;
		if((!autoMode && ((!canIgnoreL() && lasttagname == 'l') || lasttagname == 'p')) || skipMode)
		{// いったんイベントを処理(タグは後回し)
			current.comp.clear2() if currentWithBack;
			current.clear2();
			return -5;
		}

		if(!current.nodeVisible)
		{
			dm("警告 : 非表示になっている" +
				(currentPage ? "裏" : "表") + "メッセージレイヤ" + currentNum +
				"で自動改ページクリック待ちになりました");
		}

		if(autoMode)
		{
			conductor.waitWithTimeOut(%[ // タイムアウト付きウェイト
				click : function
				{
					current.comp.clear2() if currentWithBack;
					current.clear2(); // clear2 を呼ぶ
					cancelAutoMode();
				} incontextof this,
				timeout : function
				{
					current.comp.clear2() if currentWithBack;
					current.clear2(); // clear2 を呼ぶ
				} incontextof this
				], autoModePageWait <= 0 ? 1 : autoModePageWait);
			return -3;
		}
		else
		{
			current.comp.showPageBreakGlyph(pageBreak) if currentWithBack;
			current.showPageBreakGlyph(pageBreak);
			storeClickGlyphState("page");

			// conductor を 'click' まで待ち状態に
			conductor.wait(%[
				click : function
				{
					clickWaiting = false;
					fore.base.cursor = cursorDefault;
					current.comp.clear2() if currentWithBack;
					current.clear2(); // clear2 を呼ぶ
					notifyRun();
				} incontextof this
				]);
			clickWaiting = true;
			fore.base.cursor = cursorWaitingClick;
			notifyStable();
			return -3;
		}
	}

	//------------------------------------------------------------- BGM 処理 --

	function onBGMFadeCompleted()
	{
		// BGM のフェードが完了した
		conductor.trigger('bgmfade');
	}

	// BGM停止処理
	var bgmStopExp;
	var bgmStopStorage;
	var bgmStopTarget;

	function handleBgmStop() {
		// BGM停止ハンドラ

		// パラメータを保持して破棄
		var exp		= bgmStopExp;
		var storage = bgmStopStorage;
		var target	= bgmStopTarget;
		clearBgmStop();
		
		// 処理実行
		if (exp !== void) {
			Scripts.eval(exp);
		}
		if (storage !== void || target !== void) {
			process(storage, target);
		}
	}
	
	function setBgmStop(elm) {
		// BGM停止時処理の登録
		bgmStopExp	   = elm.exp;
		bgmStopStorage = elm.storage;
		bgmStopTarget  = elm.target;
	}
	
	function clearBgmStop() {
		// BGM停止時処理の解除
		bgmStopExp	   = void;
		bgmStopStorage = void;
		bgmStopTarget  = void;
	}
	
	// BGM 停止時拡張ハンドラ
	var bgmStopHandler;
	
	function onBGMStop()
	{
		// BGM が停止した
		conductor.trigger('bgmstop');
		if (bgmStopHandler !== void) {
			bgmStopHandler();
		}
		if (bgmStopExp !== void || bgmStopStorage !== void || bgmStopTarget !== void) {
			global.stopBgmTrigger = new AsyncTrigger(handleBgmStop, '');
			global.stopBgmTrigger.cached = true;
			global.stopBgmTrigger.trigger();
		}
	}
	// ------------------------------------------
	
	var bgmLabelInfos = %[];
	var bgmLabelInfo;

	function handleBgmLabel() {
		if (bgmLabelInfo !== void) {
			if (bgmLabelInfo.exp !== void) {
				Scripts.eval(bgmLabelInfo.exp);
			}
			if (bgmLabelInfo.storage !== void || bgmLabelInfo.target !== void) {
				process(bgmLabelInfo.storage, bgmLabelInfo.target);
			}
		}
	}

	// BGM 停止時拡張ハンドラ
	var bgmLabelHandler;

	function onBGMLabel(label) {
		// ディレイ実行展開
		conductor.extractDelay(label);
		// BGM のラベル通過処理
		conductor.trigger('bgmlabel_' + label);
		if (bgmLabelHandler !== void) {
			bgmLabelHandler(label);
		}
		var obj = bgmLabelInfos[label];
		if (obj !== void) {
			bgmLabelInfo = obj;
			global.labelBgmTrigger = new AsyncTrigger(handleBgmLabel, '');
			global.labelBgmTrigger.cached = true;
			global.labelBgmTrigger.trigger();
		}
	}

	/**
	 * BGM ラベル処理の登録
	 */
	function setBgmLabel(elm) {
		if (elm.name !== void) {
			var obj = %[];
			obj.storage = elm.storage;
			obj.target	= elm.target;
			obj.exp		= elm.exp;
			bgmLabelInfos[elm.name] = obj;
		}
	}

	/**
	 * BGM ラベル処理の解除
	 */
	function clearBgmLabel() {
		bgmLabelInfos = %[];
		bgmLabelInfo = void;
	}

	// ----------------------------------------------------------------------
	
	function waitBGMFade(elm)
	{
		// BGM のフェード終了を待つ
		if(!bgm.inFading) return 0; // フェード中でなければ待たない
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				bgm.stopFade();
				return 0; // スキップ中の場合はフェードを停止させて返る
			}
			conductor.wait(%[
				click : function
				{
					bgm.stopFade(); // フェーディングは停止する
				} incontextof this,

				bgmfade : function
				{
					// やることなし
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				bgmfade : function
				{
					// やることなし
				} incontextof this
				]);
		}
		return -2;
	}

	function waitBGMStop(elm)
	{
		// BGM の再生終了を待つ
		if(!bgm.canWaitStop) return 0; // BGM 再生終了を待てなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				bgm.stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function
				{
					bgm.stop(); // 再生を終了する
				} incontextof this,

				bgmstop : function
				{
					// やることなし
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				bgmstop : function
				{
					// やることなし
				} incontextof this
				]);
		}
		return -2;
	}

	function waitBGMLabel(elm)
	{
		// BGM のラベル通過を待つ
		if(!bgm.canWaitLabel(elm.name)) return 0; // ラベルを待てなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode) {
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function {
				} incontextof this,
				"bgmlabel_" + elm.name => function {
				} incontextof this
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				"bgmlabel_" + elm.name => function {
				} incontextof this
				]);
		}
		return -2;
	}
	
	//----------------------------------------------------------- 効果音処理 --

	function onSELabel(label) {
		// ディレイ実行展開
		conductor.extractDelay(label);
	}
	
	function onSESoundBufferFadeCompleted(id)
	{
		// 効果音のフェードが終了した
		conductor.trigger('sefade' + id);
	}

	function onSESoundBufferStop(id)
	{
		// 効果音の再生が終了した
		conductor.trigger('sestop' + id);
		if (typeof this.seStopHandler == "Object") {
			seStopHandler(id);
		}
	}

	function waitSEFade(elm)
	{
		var id = +elm.buf;
		var buf = se[id];
		if(!buf.inFading) return 0; // フェード中でなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				buf.stopFade();
				return 0; // スキップ中の場合はフェードを停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					se[id].stopFade(); // フェードを終了する
				} incontextof this,

				click_arg : id, // ハンドラへの引数

				'sefade'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sefade'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'sefade'+id =>
					function (id)
					{
						// やることなし
					} incontextof this,

				'sefade'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	function waitSEStop(elm)
	{
		var id = +elm.buf;
		var buf = se[id];
		if(!buf.canWaitStop()) return 0; // 終了を待てなければそのまま返る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				buf.stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					se[id].stop(); // 再生を終了する
				} incontextof this,

				'click_arg' => id, // ハンドラへの引数

				'sestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'sestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'sestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	// 効果音タグ共通処理
	function commonSEmethod(elm, method, *) {
		var bufs = [];
		if (elm.buf == "all") {
			for (var i = 0; i <= numSEBuffers; i++) bufs.add(i);
			if (elm.except != "") {
				var rem = elm.except.split(",");
				for (var i = 0; i < rem.count; i++) bufs.remove(+rem[i]);
			}
		} else {
			if (elm.buf != "" && elm.buf.indexOf(",") > 0) bufs = elm.buf.split(",");
			else bufs.add(+elm.buf);
		}
		for (var i = 0; i < bufs.count; i++) {
			var num = +bufs[i];
			if (num >= 0 && num <= numSEBuffers) {
				//dm("commonSEmethod", method, num);
				se[num][method](*);
			}
		}
		return 0;
	}

	//--------------------------------------------------------- ムービー関連 --

	// 保持してるムービーレイヤ
	var movieLayers = [];

	// ムービーレイヤの取得
	function getLayerMovie() {
		var movie = new MovieControlLayer(this);
		movieLayers.add(movie);
		flipStart();
		return movie;
	}

	/**
	 * ムービーレイヤ情報の更新
	 */
	function updateLayerMovies() {
		if (movieLayers.count > 0) {
			for (var i=movieLayers.count-1;i>=0;i--) {
				var movie = movieLayers[i];
				if (!movie.isPlayingMovie) {
					// 特定ムービーの停止
					conductor.trigger("lmstop" + movie);
					invalidate movie;
					movieLayers.erase(i);
				}
			}
			if (movieLayers.count == 0) {
				conductor.trigger("lmstop");
			}
		}
	}

	/**
	 * 全レイヤムービーの停止
	 */
	function stopAllLayerMovies() {
		for (var i=movieLayers.count-1;i>=0;i--) {
			var movie = movieLayers[i];
			movie.stop();
		}
	}

	/**
	 * レイヤムービーを待ってみる
	 */
	function waitLayerMovie(target, canskip) {

		if (target === void ||
			!target instanceof "GraphicLayerEx" ||
			target.movie === void) {
			return 0;
		}

		var movie = target.movie;
		
		if (!movie.isPlayingMovie) return 0;
		if((canskip === void || +canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				movie.stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function (movie)
				{
					movie.stop(); // 再生を終了する
				} incontextof this,
				'click_arg' => movie, // ハンドラへの引数
				'lmstop'+movie =>
				function ()
				{
					// やることなし
				} incontextof this,
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'lmstop'+movie =>
				function ()
				{
					// やることなし
				} incontextof this,
				]);
		}
		return -2;
	}

	function waitAllLayerMovies(canskip)	{
		// アクションを待つ
		if (movieLayers.count == 0) return 0; // アクションを待てない
		if((canskip === void || +canskip) && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ動作中
				stopAllLayerMovies(false);
				return 0; // 自動移動を停止させてすぐに返る
			}
			conductor.wait(%[
				click : function
				{
					updateBeforeCh = 1;
					stopAllLayerMovies(false); // すべてのレイヤムービーを停止
				} incontextof this,
				lmstop : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		else
		{
			conductor.wait(%[
				lmstop : function
				{
					updateBeforeCh = 1;
				} incontextof this
				]);
		}
		return -2;
	}

	// スクリーン切り替え時にムービー再生を一時的に止めるロジック
	var	movieStore;
	function onMovieScreenChanging(full)
	{
		movieStore	= new AsyncTrigger(onMovieScreenChanged, "");
		var	states	= [];
		for (var i=0;i<numMovies;i++)
		{
			var movie = movies[i], st = %[];
			movie.internalStore(st);
			movie.stop();
			states.add(st);
		}
		movieStore.states	= states;
		movieStore.trigger();
	}

	function onMovieScreenChanged()
	{
		for(var i=0; i<numMovies; i++)
			movies[i].internalRestore(movieStore.states[i]);
		invalidate movieStore;
		movieStore	= void;
	}

	// プライマリの位置が変わった
	function onMoviePrimaryPosChanged(ox, oy) {
		if (!isMain) return;
		for (var i=0;i<numMovies;i++)
			with (movies[i]) .setOptions(%[ primox:ox, primoy:oy ]);
	}
	function onMovieStatusChanged(state, id)
	{
		// 拡張用スタブ（何もしない）
	}
	function onMoviePlay(id)
	{
		// ムービーの再生を開始した
		onMovieStatusChanged("play", id);
	}
	function onMovieStop(id)
	{
		// ムービーの再生が終了した
		conductor.trigger('moviestop'+id);
	}

	function waitMovieStop(elm)
	{
		var id = +elm.slot;

		// ムービーの再生終了を待つ
		if(!movies[id].canWaitStop) return 0; // ムービー再生終了を待てなければそのまま戻る
		if(elm.canskip !== void && +elm.canskip && clickSkipEnabled)
		{
			// スキップできる場合
			if(skipMode)
			{
				// スキップ中の場合
				movies[id].stop();
				return 0; // スキップ中の場合は再生を停止させて返る
			}
			conductor.wait(%[
				click : function (id)
				{
					movies[id].stop(); // 再生を終了する
				} incontextof this,

				'click_arg' => id, // ハンドラへの引数

				'moviestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'moviestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		else
		{
			// スキップできない場合
			conductor.wait(%[
				'moviestop'+id =>
				function (id)
				{
					// やることなし
				} incontextof this,

				'moviestop'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		return -2;
	}

	function onMoviePeriod(id,type)
	{
		// ムービーのピリオドイベントが発生した
		if( isLeavePeriodEvent != false )
		{
			holdPeriodEventQueue.add( 'movieperiod'+id+'_'+type );
		}
		else
		{
			conductor.trigger('movieperiod'+id+'_'+type);
		}
	}

	function waitMoviePeriod(elm)
	{
		isWaitPeriodEvent = true;
		waitedPeriodEventStorageName = conductor.curStorage;
	
		var id = +elm.slot;

		stablePosibility = true;

		if( holdPeriodEventQueue.count > 0 )
		{
			var		triggered = false;
			for( var i = 0; i < holdPeriodEventQueue.count; i++ )
			{
				if( elm.for !== void )
				{
					if( elm.for == 'loop' )
					{
						if( ('movieperiod'+id+'_'+perLoop) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'period' )
					{
						if( ('movieperiod'+id+'_'+perPeriod) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'prepare' )
					{
						if( ('movieperiod'+id+'_'+perPrepare) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else if( elm.for == 'segLoop' )
					{
						if( ('movieperiod'+id+'_'+perSegLoop) == holdPeriodEventQueue[i] )
							triggered = true;
					}
					else
					{
						triggered == true;
					}
				}
				else
				{
					triggered == true;
				}
			}
			holdPeriodEventQueue.clear();
			if( triggered == true )
			{
				isWaitPeriodEvent = false;
				return 0;
			}
		}

		// ムービーのピリオドイベントを待つ
		if(!movies[id].canWaitStop) return 0; // ムービーが再生中でなければそのまま戻る
		if( elm.for !== void )
		{
			if( elm.for == 'loop' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'period' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perPeriod => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'prepare' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perPrepare => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else if( elm.for == 'segLoop' )
			{
				conductor.wait(%[
					'movieperiod'+id+'_'+perSegLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
					'movieperiod'+id+'_arg' => id // ハンドラへの引数
					]);
			}
			else
			{
				return 0; // 引数が変
			}
		}
		else
		{
			conductor.wait(%[
				'movieperiod'+id+'_'+perLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perPeriod => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perPrepare => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_'+perSegLoop => function (id) { notifyRun(); isWaitPeriodEvent = false;} incontextof this,
				'movieperiod'+id+'_arg' => id // ハンドラへの引数
				]);
		}
		notifyStable();
		return -2;
	}

	//------------------------------------------------------- タグハンドラ群 --

	function getHandlers()
	{
		return %[ // 辞書配列オブジェクト

		/*
			タグハンドラ群は、名前とそれに対応する関数のペアを列挙するもので、
			関数名 : function(elm)
			{
				// 関数の中身
			} incontextof this,
			の書式を用いる。ただし、関数名が予約語の場合は、「関数名 : 」ではなく
			「"関数名" => 」を用いる。
			incontextof this は、関数が正しく このクラスの
			オブジェクトのコンテキスト上で動くようにするために必要。
		*/

	//--------------------------------------- タグハンドラ群(メッセージ操作) --

	ch : function(elm)
	{
		// 文字表示
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		var text = elm.text;
		if(currentWithBack) current.comp.processCh(text);
		if(current.processCh(text))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled) historyLayer.store(text);
		if(autoWCEnabled)
		{
			// 自動ウェイト
			var ind;
			if((ind = autoWCChars.indexOf(text)) != -1)
			{
				return int(acs * autoWCWaits[ind]);
			}
		}
		return acs;
	} incontextof this,

	graph : function(elm)
	{
		// グラフィックを文字として表示
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		if(currentWithBack) current.comp.processGraph(elm);
// 追加ここから
		elm.acs	= acs;	//	1文字の描画時間
		acs		*= elm.count if elm.count != void;	//	このグラフィックを何文字分として処理するか(指定がなければ1文字分)
// 追加ここまで
		if(current.processGraph(elm))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled && elm.alt !== void) historyLayer.store(elm.alt);
		return acs;
	} incontextof this,

	hch : function(elm)
	{
		// 縦中横
		var acs = actualChSpeed;
		if(updateBeforeCh)
		{
			if(acs) { updateBeforeCh--; return -5; } else { updateBeforeCh--; }
		}
		var text = elm.text;
		var expand = elm.expand !== void && +elm.expand;
		if(currentWithBack) current.comp.putHorizonCh(text, expand);
		if(current.putHorizonCh(text, expand))
		{
			return showPageBreakAndClear();
		}
		if(historyWriteEnabled) historyLayer.store(text);
		return acs;
	} incontextof this,

	r : function(elm)
	{
		// 改行
		if(historyWriteEnabled) historyLayer.reline();
		if(currentWithBack) current.comp.processReturn();
		if(current.processReturn())
		{
			var ret = showPageBreakAndClear();
			// 改行はpendingしない
			if(ret == -5)
				ret = -4;
			else if(ret == -3)
				ret = -2;
			return ret;
		}
		return actualChSpeed;
	} incontextof this,

	ruby : function(elm)
	{
		// 次の文字に対するルビ設定
		if(currentWithBack) current.comp.setRuby(elm.text);
		current.setRuby(elm.text);
		return 0;
	} incontextof this,

	font : function(elm)
	{
		// フォント設定
		if(currentWithBack) current.comp.setFont(elm);
		current.setFont(elm);
		return 0;
	} incontextof this,

	deffont : function(elm)
	{
		// デフォルトのフォント設定
		if(currentWithBack) current.comp.setDefaultFont(elm);
		current.setDefaultFont(elm);
		return 0;
	} incontextof this,

	resetfont : function(elm)
	{
		// フォントのリセット
		if(currentWithBack) current.comp.resetFont();
		current.resetFont();
		return 0;
	} incontextof this,

	style : function(elm)
	{
		// スタイル設定
		if(currentWithBack) current.comp.setStyle(elm);
		current.setStyle(elm);
		return 0;
	} incontextof this,

	defstyle : function(elm)
	{
		// デフォルトのスタイル設定
		if(currentWithBack) current.comp.setDefaultStyle(elm);
		current.setDefaultStyle(elm);
		return 0;
	} incontextof this,

	resetstyle : function(elm)
	{
		// スタイルのリセット
		if(currentWithBack) current.comp.resetStyle();
		current.resetStyle();
		return 0;
	} incontextof this,

	link : function(elm)
	{
		// ハイパーリンクの開始
		if(currentWithBack) current.comp.beginHyperLink(elm);
		current.beginHyperLink(elm);
		return 0;
	} incontextof this,

	endlink : function(elm)
	{
		// ハイパーリンクの終了
		if(currentWithBack) current.comp.endHyperLink(elm);
		current.endHyperLink(elm);
		return 0;
	} incontextof this,

	button : function(elm)
	{
		// グラフィカルボタン
		if(currentWithBack) current.comp.addButton(elm);
		current.addButton(elm);
		return 0;
	} incontextof this,

	edit : function(elm)
	{
		// 単一行編集
		if(currentWithBack) current.comp.addEdit(elm);
		current.addEdit(elm);
		return 0;
	} incontextof this,

	checkbox : function(elm)
	{
		// 単一行編集
		if(currentWithBack) current.comp.addCheckBox(elm);
		current.addCheckBox(elm);
		return 0;
	} incontextof this,

	commit : function(elm)
	{
		// フォーム要素のコミット
		current.commit();
		return 0;
	} incontextof this,

	timeout : function(elm)
	{
		// タイムアウト処理の登録(カレントのみ)
		current.addTimeout(elm);
		return 0;
	} incontextof this,

	ctimeout : function(elm)
	{
		// タイムアウト処理の解除（カレントのみ）
		current.clearTimeout();
		return 0;
	} incontextof this,

	wheel : function(elm)
	{
		// ホイール処理の登録(カレントのみ)
		current.addWheel(elm);
		return 0;
	} incontextof this,

	cwheel : function(elm)
	{
		// ホイール処理の解除（カレントのみ）
		current.clearWheel();
		return 0;
	} incontextof this,
				  
	click : function(elm)
	{
		// クリック処理の登録(カレントのみ)
		current.addClick(elm);
		return 0;
	} incontextof this,

	cclick : function(elm)
	{
		// クリック処理の登録(カレントのみ)
		current.clearClick(elm);
		return 0;
	} incontextof this,

	l : function(elm)
	{
		// 行クリック待ち
		return showLineBreak(elm);
	} incontextof this,

	p : function(elm)
	{
		// ページクリック待ち
		if(historyWriteEnabled) historyLayer.reline();
		return showPageBreak(elm);
	} incontextof this,

	current : function(elm)
	{
		// 操作対象のメッセージレイヤの指定
		setCurrentMessageLayer(elm);
		return 0;
	} incontextof this,

	position : function(elm)
	{
		// メッセージレイヤの位置、属性を設定
		getMessageLayerObjectFromElm(elm).setPosition(elm);
		return 0;
	} incontextof this,

	ct : function(elm)
	{
		// メッセージレイヤのリセット(すべてのメッセージレイヤのクリアと
		// current のリセット)
		if(historyWriteEnabled) historyLayer.repage();
		clearMessageLayers(true);
		return 0;
	} incontextof this,

	cm : function(elm)
	{
		// メッセージレイヤのリセットを行うが、ct のように
		// current のリセットは行わないもの
		if(historyWriteEnabled) historyLayer.repage();
		clearMessageLayers(false);
		return 0;
	} incontextof this,

	er : function(elm)
	{
		// 現在のメッセージレイヤのクリア
		if(historyWriteEnabled) historyLayer.repage();
		if(currentWithBack) current.comp.clear();
		current.clear();
		return 0;
	} incontextof this,

	indent : function(elm)
	{
		// インデントの設定
		if(currentWithBack) current.comp.setIndent();
		current.setIndent();
		if(historyWriteEnabled) historyLayer.beginIndent();
		return 0;
	} incontextof this,

	endindent : function(elm)
	{
		// インデントの解除
		if(currentWithBack) current.comp.resetIndent();
		current.resetIndent();
		if(historyWriteEnabled) historyLayer.endIndent();
		return 0;
	} incontextof this,

	delay : function(elm)
	{
		// 文字表示速度の指定
		setDelay(elm);
		return 0;
	} incontextof this,

	nowait : function(elm)
	{
		// 一時的にノーウェイトで実行
		enterNoWait();
		return 0;
	} incontextof this,

	endnowait : function(elm)
	{
		// nowait の解除
		leaveNoWait();
		return 0;
	} incontextof this,

	locate : function(elm)
	{
		// 文字表示位置を指定
		if(currentWithBack) current.comp.locate(elm.x, elm.y);
		current.locate(elm.x, elm.y);
		return 0;
	} incontextof this,

	glyph : function(elm)
	{
		// クリック待ち記号を指定
		current.setGlyph(elm);
		return 0;
	} incontextof this,

	locklink : function(elm)
	{
		// リンクのロック
		lockMessageLayerSelProcess();
		return 0;
	} incontextof this,

	unlocklink : function(elm)
	{
		// リンクのアンロック
		unlockMessageLayerSelProcess();
		return 0;
	} incontextof this,

	//----------------------------------------- タグハンドラ群(システム操作) --

	loadplugin : function(elm)
	{
		// プラグインの読み込み
		Plugins.link(elm.module);
		dm("プラグインを読み込みました : " + elm.module);
		return 0;
	} incontextof this,

	title : function(elm)
	{
		// タイトルの設定
		setTitle(elm.name);
		return 0;
	} incontextof this,

	s : function(elm)
	{
		// 実行停止
		stablePosibility = true;
		cancelSkip();
		if(!usingExtraConductor) incRecordLabel(true);
		inSleep = true;
		if(recordHistoryOfStore == 2) // 2 : 選択肢 ( @s タグ ) ごと
			setToRecordHistory();
		notifyStable();

		// メッセージレイヤタイムアウト呼び出し開始
		current.startTimeout();

		return -1;
	} incontextof this,

	clickskip : function(elm)
	{
		// クリックスキップの設定
		clickSkipEnabled = +elm.enabled;
		return 0;
	} incontextof this,

	nextskip : function(elm)
	{
		// 次の選択肢(/未読)まで進むの設定
		nextSkipEnabled = +elm.enabled;
		return 0;
	} incontextof this,

	cancelskip : function(elm)
	{
		// スキップの解除
		cancelSkip();
		return 0;
	} incontextof this,

	cancelautomode : function(elm)
	{
		// 「自動的に読み進む」の解除
		cancelAutoMode();
		return 0;
	} incontextof this,

	resetwait : function(elm)
	{
		// 時間原点の設定
		resetWait();
		return 0;
	} incontextof this,

	wait : function(elm)
	{
		// ウェイト
		return doWait(elm);
	} incontextof this,

	wc : function(elm)
	{
		// 指定文字分のウェイト
		return doWaitCh(elm);
	} incontextof this,

	waitclick : function(elm)
	{
		// クリックを待つ
		return waitClick(elm);
	} incontextof this,

	rclick : function(elm)
	{
		// 右クリックの動作設定
		setRightClickOptions(elm);
		return 0;
	} incontextof this,

	history : function(elm)
	{
		// メッセージ履歴レイヤの設定
		setHistoryOptions(elm);
		return 0;
	} incontextof this,

	showhistory : function(elm)
	{
		// メッセージ履歴レイヤの表示
		return showHistoryByScenario(elm);
	} incontextof this,

	hr : function(elm)
	{
		// メッセージ履歴レイヤに改行を出力
		if(historyWriteEnabled)
		{
			if(elm.repage !== void && +elm.repage)
				historyLayer.repage();
			else
				historyLayer.reline();
		}
		return 0;
	} incontextof this,

	hact : function(elm)
	{
		// メッセージ履歴にアクションを設定
		if(historyWriteEnabled)
			historyLayer.setNewAction(elm.exp);
		return 0;
	} incontextof this,

	endhact : function(elm)
	{
		// メッセージ履歴のアクションをクリア
		if(historyWriteEnabled)
			historyLayer.clearAction();
		return 0;
	} incontextof this,

	hidemessage : function(elm)
	{
		// メッセージを一時的に隠す
		return hideMessageLayerByScenario(elm);
	} incontextof this,

	autowc : function(elm)
	{
		// 自動ウェイト
		setAutoWait(elm);
		return 0;
	} incontextof this,

	cursor : function(elm)
	{
		// マウスカーソルの変更
		setCursor(elm);
		return 0;
	} incontextof this,

	close : function(elm)
	{
		// ウィンドウを閉じる
		closeByScript(elm);
		return -2;
	} incontextof this,

	copybookmark : function(elm)
	{
		// 栞をコピー
		copyBookMark(+elm.from, +elm.to);
		return 0;
	} incontextof this,

	erasebookmark : function(elm)
	{
		// 栞を削除
		eraseBookMark(+elm.place);
		return 0;
	} incontextof this,

	disablestore : function(elm)
	{
		// 栞を一時的に使用不可に
		tempDisableStore(elm);
		return 0;
	} incontextof this,

	store : function(elm)
	{
		// 栞の使用不可・使用可を設定する
		setStoreEnabled(+elm.enabled);
		return 0;
	} incontextof this,

	load : function(elm)
	{
		// 栞の読み込み
		if(elm.ask !== void && +elm.ask)
			loadBookMarkWithAsk(+elm.place);
		else
			loadBookMark(+elm.place);
		return -4;
	} incontextof this,

	save : function(elm)
	{
		// 栞の読み込み
		if(elm.ask !== void && +elm.ask)
			saveBookMarkWithAsk(+elm.place);
		else
			saveBookMark(+elm.place);
		return -4;
	} incontextof this,

	startanchor : function(elm)
	{
		// 「最初に戻る」の使用不可・使用可を設定する
		setStartAnchorEnabled(elm.enabled === void || +elm.enabled);
		return 0;
	} incontextof this,

	gotostart : function(elm)
	{
		// 「最初に戻る」
		if(elm.ask !== void && +elm.ask)
			goToStartWithAsk();
		else
			goToStart();
		return -4;
	} incontextof this,

	goback : function(elm)
	{
		// 通過記録を戻る
		if(elm.ask !== void && +elm.ask)
			goBackHistory(true);
		else
			goBackHistory(false);
		return -4;
	} incontextof this,

	record : function(elm)
	{
		// 通過記録をする
		setToRecordHistory();
		return 0;
	} incontextof this,

	tempsave : function(elm)
	{
		// 状態のメモリへの保存
		tempSave(+elm.place);
		return 0;
	} incontextof this,

	tempload : function(elm)
	{
		// 状態のメモリへの保存
		tempLoad(+elm.place, elm);
			//elm.se === void || +elm.se, elm.bgm === void || +elm.bgm,
			//elm.backlay !== void && +elm.backlay);
		return 0;
	} incontextof this,

	mappfont : function(elm)
	{
		// レンダリング済みフォントを現在のフォントにマッピング
		mapPrerenderedFont(elm.storage);
		return 0;
	} incontextof this,

	locksnapshot : function(elm)
	{
		// 画面のスナップショットをロックする
		lockSnapshot();
		return 0;
	} incontextof this,

	unlocksnapshot : function(elm)
	{
		// 画面のスナップショットのロックを解除する
		unlockSnapshot();
		return 0;
	} incontextof this,

	//------------------------------------------- タグハンドラ群(レイヤ操作) --

	image : function(elm)
	{
		// 画像読み込み
		updateBeforeCh = 1;
		var start = System.getTickCount();
		getLayerFromElm(elm).loadImages(elm);
		dm(elm.storage + " の読み込みに " + (System.getTickCount() - start) + "ms かかりました");
		return 0;
	} incontextof this,

	img : function(elm)
	{
		// 画像読み込み(imageとおなじ)
		updateBeforeCh = 1;
		var start = System.getTickCount();
		getLayerFromElm(elm).loadImages(elm);
		dm(elm.storage + " の読み込みに " + (System.getTickCount() - start) + "ms かかりました");
		return 0;
	} incontextof this,

	pimage : function(elm)
	{
		// 部分追加画像読み込み
		getLayerFromElm(elm).loadPartialImage(elm);
		return 0;
	} incontextof this,

	ptext : function(elm)
	{
		// 背景/前景レイヤへの文字描画
		getLayerFromElm(elm).drawReconstructibleText(elm);
		return 0;
	} incontextof this,

	freeimage : function(elm)
	{
		// 画像のクリア
		updateBeforeCh = 1;
		getLayerFromElm(elm).freeImage(elm);
		return 0;
	} incontextof this,

	animstart : function(elm)
	{
		// アニメーションの開始
		updateBeforeCh = 1;
		getLayerFromElm(elm).startAnim(elm);
		return 0;
	} incontextof this,

	animstop : function(elm)
	{
		// アニメーションの停止
		updateBeforeCh = 1;
		getLayerFromElm(elm).stopAnim(+elm.seg);
		return 0;
	} incontextof this,

	wa : function(elm)
	{
		// アニメーションの停止待ち
		return waitAnimation(elm);
	} incontextof this,

	mapimage : function(elm)
	{
		// クリッカブルマップの領域画像を読み込む
		getLayerFromElm(elm).loadProvinceImage(elm.storage);
		return 0;
	} incontextof this,

	mapaction : function(elm)
	{
		// クリッカブルマップの領域アクション定義を読み込む
		getLayerFromElm(elm).loadProvinceActions(elm.storage);
		return 0;
	} incontextof this,

	mapdisable : function(elm)
	{
		// クリッカブルマップを無効にする
		getLayerFromElm(elm).clearProvinceActions();
		return 0;
	} incontextof this,

	backlay : function(elm)
	{
		// レイヤを裏画面にコピー
		updateBeforeCh = 1;
		backupLayer(elm, true);
		return 0;
	} incontextof this,

	forelay : function(elm)
	{
		// レイヤを表画面にコピー
		updateBeforeCh = 1;
		backupLayer(elm, false);
		return 0;
	} incontextof this,

	copylay : function(elm)
	{
		// 同種のレイヤ同士のコピー
		updateBeforeCh = 1;
		copyLayer(elm);
		return 0;
	} incontextof this,

	layopt : function(elm)
	{
		// レイヤのオプションを設定
		updateBeforeCh = 1;
		getLayerFromElm(elm).setOptions(elm);
		return 0;
	} incontextof this,

	trans : function(elm)
	{
		// トランジションの開始
		getLayerPageFromElm(elm, false).beginTransition(elm);
		return 0;
	} incontextof this,

	wt : function(elm)
	{
		// トランジションを待つ
		return waitTransition(elm);
	} incontextof this,

	stoptrans : function(elm)
	{
		// トランジションを停止する
		stopAllTransitions();
		return 0;
	} incontextof this,

	move : function(elm)
	{
		// 自動移動の開始
		getLayerFromElm(elm).beginMove(elm);
		return 0;
	} incontextof this,

	wm : function(elm)
	{
		//	自動移動を待つ
		return waitMove(elm);
	} incontextof this,

	stopmove : function(elm)
	{
		// 自動移動を停止する
		stopAllMoves();
		return 0;
	} incontextof this,

	laycount : function(elm)
	{
		updateBeforeCh = 1;
		allocateCharacterLayers(+elm.layers) if elm.layers !== void;
		allocateMessageLayers(+elm.messages) if elm.messages !== void;
		return 0;
	} incontextof this,

	//------------------------------ タグハンドラ群(効果音・BGM・ビデオ操作) --

	playbgm : function(elm)
	{
		// BGM の演奏
		bgm.play(elm);
		clearBgmStop();
		clearBgmLabel();
		return 0;
	} incontextof this,

	stopbgm : function(elm)
	{
		// BGM の停止
		bgm.stop();
		return 0;
	} incontextof this,

	pausebgm : function(elm)
	{
		// BGM の一時停止
		bgm.pause();
		return 0;
	} incontextof this,

	resumebgm : function(elm)
	{
		// BGM の再開
		bgm.resume();
		return 0;
	} incontextof this,

	fadeinbgm : function(elm)
	{
		// BGM のフェードイン
		bgm.fadeIn(elm);
		return 0;
	} incontextof this,

	fadeoutbgm : function(elm)
	{
		// BGM のフェードアウト
		bgm.fadeOut(elm);
		return 0;
	} incontextof this,

	fadepausebgm : function(elm)
	{
		// BGM のフェードポーズ
		bgm.fadePause(elm);
		return 0;
	} incontextof this,

	fadebgm : function(elm)
	{
		// BGM の指定音量までのフェード
		bgm.fade(elm);
		return 0;
	} incontextof this,

	xchgbgm : function(elm)
	{
		// BGM の入れ替え/クロスフェード
		bgm.exchange(elm);
		clearBgmStop();
		clearBgmLabel();
		return 0;
	} incontextof this,

	bgmopt : function(elm)
	{
		// BGM のオプション設定
		bgm.setOptions(elm);
		return 0;
	} incontextof this,
	setbgmstop : function(elm)
	{
		// BGM の終了時コールバックの登録
		setBgmStop(elm);
		return 0;
	} incontextof this,

	clearbgmstop : function(elm)
	{
		// BGM の終了時コールバックの削除
		clearBgmStop();
		return 0;
	} incontextof this,

	setbgmlabel : function(elm) {
		// BGM のラベル時コールバックの登録
		setBgmLabel(elm);
		return 0;
	} incontextof this,

	clearbgmlabel : function(elm)
	{
		// BGM のラベル時コールバックの削除
		clearBgmLabel();
		return 0;
	} incontextof this,

	wb : function(elm)
	{
		// BGM のフェード終了待ち
		return waitBGMFade(elm);
	} incontextof this,

	wl : function(elm)
	{
		// BGM の再生終了待ち
		return waitBGMStop(elm);
	} incontextof this,

	playse : function(elm)
	{
		// 効果音の再生
		se[+elm.buf].play(elm);
		return 0;
	} incontextof this,

	stopse : function(elm)
	{
		// 効果音の停止
		se[+elm.buf].stop();
		return 0;
	} incontextof this,

	fadeinse : function(elm)
	{
		// 効果音のフェードイン再生
		se[+elm.buf].fadeIn(elm);
		return 0;
	} incontextof this,

	fadeoutse : function(elm)
	{
		// 効果音のフェードアウト
		se[+elm.buf].fadeOut(elm);
		return 0;
	} incontextof this,

	fadese : function(elm)
	{
		// 効果音のフェード
		se[+elm.buf].fade(elm);
		return 0;
	} incontextof this,

	seopt : function(elm)
	{
		// 効果音のフェード
		se[+elm.buf].setOptions(elm);
		return 0;
	} incontextof this,

	wf : function(elm)
	{
		// 効果音のフェード終了待ち
		return waitSEFade(elm);
	} incontextof this,

	ws : function(elm)
	{
		// 効果音の再生終了待ち
		return waitSEStop(elm);
	} incontextof this,

	video : function(elm)
	{
		// ムービーのオプションを設定する
		movies[+elm.slot].setOptions(elm);
		return 0;
	} incontextof this,

	playvideo : function(elm)
	{
		// ムービーを再生する
		movies[+elm.slot].play(elm.storage);
		return 0;
	} incontextof this,

	stopvideo : function(elm)
	{
		// ムービーを停止する
		movies[+elm.slot].stop();
		return 0;
	} incontextof this,

	openvideo : function(elm)
	{
		// ムービー再生の準備をする
		movies[+elm.slot].open(elm.storage);
		return 0;
	} incontextof this,

	wv : function(elm)
	{
		// ムービーの再生終了を待つ
		return waitMovieStop(elm);
	} incontextof this,

// Start: Add: T.Imoto
	wp : function(elm)
	{
		// ムービーのピリオドイベントを待つ
		return waitMoviePeriod(elm);
	} incontextof this,

	pausevideo : function(elm)
	{
		movies[+elm.slot].pause();
		return 0;
	} incontextof this,

	resumevideo : function(elm)
	{
		movies[+elm.slot].resume();
		return 0;
	} incontextof this,

	preparevideo : function(elm)
	{
		movies[+elm.slot].prepare();
		return 0;
	} incontextof this,

	rewindvideo : function(elm)
	{
		movies[+elm.slot].rewind();
		return 0;
	} incontextof this,

	videolayer : function(elm)
	{
		movies[+elm.slot].setVideoLayer(getLayerFromElm(elm),elm);
		return 0;
	} incontextof this,

	clearvideolayer : function(elm)
	{
		movies[+elm.slot].setVideoLayer(null,elm);
		return 0;
	} incontextof this,

	videosegloop : function(elm)
	{
		movies[+elm.slot].setSegment(elm);
		return 0;
	} incontextof this,

	cancelvideosegloop : function(elm)
	{
		movies[+elm.slot].cancelSegmentLoop();
		return 0;
	} incontextof this,

	videoevent : function(elm)
	{
		movies[+elm.slot].setPeriod(elm);
		return 0;
	} incontextof this,

	cancelvideoevent : function(elm)
	{
		movies[+elm.slot].cancelPeriodEvent();
		return 0;
	} incontextof this,
// End: Add: T.Imoto

	//--------------------------------------- タグハンドラ群(変数・TJS 操作) --

	eval : function(elm)
	{
		// 式の評価
		Scripts.eval(elm.exp);
		return 0;
	} incontextof this,

	trace : function(elm)
	{
		// 式のトレース表示
		var exp = elm.exp;
		var result = Scripts.eval(exp);
		
		if (result instanceof "Dictionary") {
			dm("▼[trace] expression=\"" + exp + "\"");
			var names = [];
			names.assign(result);
			for (var i=0; i<names.count; i+= 2) {
				var name = names[i];
				var value = names[i+1];
				dm("▼[trace] name=\"" + name + "\" type of value=" + typeof value + 
				   " value=" + value);
			}
		} else if (result instanceof "Array") {
			dm("▼[trace] expression=\"" + exp +  "\"");
			for (var i=0; i<result.count; i++) {
				var value = result[i];
				dm("▼[trace] idx=\"" + i + "\" type of value=" + typeof value + 
				   " value=" + value);
			}
		} else {
			dm("▼[trace] expression=\"" + exp + "\" type of result=" + typeof result + 
			   " result=" + result);
		}
		return 0;
	} incontextof this,

	input : function(elm)
	{
		// 文字列の入力
		inputString(elm);
		return 0;
	} incontextof this,

	clearsysvar : function(elm)
	{
		// システム変数のクリア
		clearSystemVariables();
		return 0;
	} incontextof this,

	clearvar : function(elm)
	{
		// ゲーム変数のクリア
		clearVariables();
		return 0;
	} incontextof this,

	waittrig : function(elm)
	{
		// トリガを待つ
		return waitTrigger(elm);
	} incontextof this,

	//----------------------------------------------- タグハンドラ群の終わり --

		interrupt : function(elm) { return -2; } incontextof this ];
	}

	// ----------------------------------------------------------
	// エラーログ処理
	// ----------------------------------------------------------

	// デバッグレベル初期値
	var _debugLevel = tkdlNone;
	
	/**
	 * デバッグレベル
	 */
	property debugLevel {
		setter(v) {
			_debugLevel = v;
			if (mainConductor !== void) {
				mainConductor.debugLevel = v;
				extraConductor.debugLevel = v;
			}
		}
		getter() {
			return _debugLevel;
		}
	}

	function onDebugLevelNoneMenuItemClick(sender)
	{
		debugLevel = tkdlNone;
		if(typeof this.debugLevelNoneMenuItem != "undefined")
			debugLevelNoneMenuItem.checked = true;
		saveSystemVariables();
	}

	function onDebugLevelSimpleMenuItemClick(sender)
	{
		debugLevel = tkdlSimple;
		if(typeof this.debugLevelSimpleMenuItem != "undefined")
			debugLevelSimpleMenuItem.checked = true;
		saveSystemVariables();
	}

	function onDebugLevelVerboseMenuItemClick(sender)
	{
		debugLevel = tkdlVerbose;
		if(typeof this.debugLevelVerboseMenuItem != "undefined")
			debugLevelVerboseMenuItem.checked = true;
		saveSystemVariables();
	}
	
	var logMode = false;
	var logPad = void;
	var cmdLog = [];
	var imageLog = [];
	var soundLog = [];
	var voiceLog = [];

	function error(msg) {
		if (debugLevel >= tkdlSimple) dm(msg);
	}
	
	function errorLine(target, msg) {
		var filename = conductor.curStorage;
		var exename	 = System.exePath;
		if (filename.substring(0,exename.length) == exename) {
			filename = filename.substring(exename.length);
		}
		msg = "%s:%s: %s".sprintf(filename, conductor.curLine, msg);
		if (debugLevel >= tkdlSimple) dm(msg);
		if (logMode && target !== void) {
			target.add(msg);
			if (logPad !== void) with (logPad) {
				var stat = "上が最新ログ";
				.text = "" if (.statusText != stat);
				.text = msg + "\n" +.text;
				.statusText = stat;
				.visible = true;
			}
		}
	}

	/**
	 * 未知の命令
	 */
	function errorCmd(msg) {
		errorLine(cmdLog, msg);
	}

	
	/**
	 * 画像ファイルがロードできない場合
	 */
	function errorImage(msg) {
		errorLine(imageLog, msg);
	}

	/**
	 * ボイスファイルがロードできない場合
	 */
	function errorSound(msg) {
		errorLine(soundLog, msg);
	}

	/**
	 * ボイスファイルがロードできない場合
	 */
	function errorVoice(msg) {
		errorLine(voiceLog, msg);
	}

	/**
	 * ログを初期化する
	 */
	function initLog() {
		cmdLog.clear();
		imageLog.clear();
		soundLog.clear();
		voiceLog.clear();
	}

	/**
	 * ダイアログを表示する
	 */
	var _errorInformMessageMap = %[
	savefail: "ファイルに保存できません (ファイルを開けないか、書き込み禁止です)",
	loadfail:  "他のシステムのデータを読み込もうとしました",
	loadexception: %[ exp:function(mes) { return @"栞を読み込めないか、栞が壊れているか、あるいは他の形式の栞データです(${mes})"; } ],
	savemydoc: %[ message:"書き込み権限がなくファイル保存できません。MyDocument以下にデータを保存します", caption:"Information" ],
	readonly:  %[ message:"書き込み権限がなくファイル保存できません。ReadOnlyMode で動作します",		  caption:"Warning" ],
		];
	function errorInform(tag, *) {
		if (tag == "" || _errorInformMessageMap[tag] == "") return;
		var msg = _errorInformMessageMap[tag];
		var cap = "Error";
		if (typeof msg == "Object") with (msg) {
			cap = .caption if (typeof .caption != "undefined");
			msg = .exp(*)  if (typeof .exp	   != "undefined");
			msg = .message if (typeof .message != "undefined");
		}
		System.inform(msg, cap);
	}
	/**
	 * デバッグ窓表示内容の更新
	 */
	function updateDebugInfo() {
		if (_debugwin !== void && debugwin.visible) {
			var filename = conductor.curStorage;
			var exename	 = System.exePath;
			if (filename.substring(0,exename.length) == exename) {
				filename = filename.substring(exename.length);
			}
			var voicename = "";
			if (currentVoice !== void && currentVoice.count > 0) {
				for (var i=0;i<currentVoice.count;i++) {
					voicename += currentVoice[i].name + ":" + currentVoice[i].voice + ",";
				}
			}
			var title = "%06d:%s %s %s".sprintf(conductor.runLine, filename, conductor.runLabel, voicename);
			debugwin.fillRect(0, 0, debugwin.width, debugwin.height, 0xa0000000);
			debugwin.drawText(10, 10, title , 0xffffff);
			debugwin.drawText(10, 30, conductor.runLineStr, 0xffffff);
		}
		if (skipNoDispWin !== void) {
			skipNoDispWin.visible = true;
			var title = "次の選択肢までスキップ中:%s".sprintf(currentPageName);
			skipNoDispWin.fillRect(0, 0, skipNoDispWin.width, skipNoDispWin.height, 0xa0000000);
			skipNoDispWin.drawText(10, 10, title , 0xffffff);
		}
	}

	/**
	 * デバッグ窓の ON/OFF
	 */
	function onDebugWinMenuItemClick(sender)
	{
		debugwin.visible = !debugwin.visible;
		if(typeof this.debugWinMenuItem != "undefined")
			debugWinMenuItem.checked = debugwin.visible;
		if (debugwin.visible) {
			updateDebugInfo();
		}
		saveSystemVariables();
	}

	// -------------------------------------------------------------

	// 外部制御機構
	var debugControl;

	// デバッグ制御可能かどうかの判定
	function canDebugControl() {
		if (debugControl === void) {
			if (typeof global.wmrStart != "undefined") {
				wmrStart(this);
				debugControl = true;
			} else {
				debugControl = false;
			}
		}
		//dm("デバッグ制御判定:" + debugControl);
		return debugControl;
	}

	// 外部制御
	function onCopyData(msg) {
		if (debugControl) {
			// タブ区切り
			var args = msg.split("\t");
			if (autoLabelSaveMode) {
				if (args[0] == "jump") {
					try {
						loadBookMarkFromFile(getBookMarkFileNameAtLabel(args[1], args[2]));
						if (args[3] == "next") {
							skipToLabel();
						}
					} catch (e) {
						System.inform("該当ファイル＆ラベルはロードできませんでした " + args[1] + ":" + args[2]);
					}
				}
			}
		}
	}

	// -------------------------------------------------------------

	/**
	 * システムのリセット（不完全）
	 */
	function resetAll() {
		forEachEventHook('onResetAll',
						 function(handler) { handler(); } incontextof this);

		clearLayers(this.fore);

		stablePosibility = true;
		cancelSkip();
		inSleep = true;
		notifyStable();

		conductor.sleep();
		conductor.interrupt();

		setMenuAccessibleAll();
	}
}



// TJS スクリプトはここで終わり
"
END_OF_TJS_SCRIPT
# "; /*

# assign でコピーすべき変数の再生成を行う perl スクリプト

open FH, "MainWindow.tjs" or die;
undef($/);
$content = <FH>;

$list_store = '';
$list_restore = '';
while($content =~ /\/\*C\*\/var\s+(\w+)/gs)
{
	$list_store .= "\t\tf.$1 = $1;\n";
	$list_restore .= "\t\t$1 = f.$1 if f.$1 !== void;\n";
}

$content =~
s/\t\t\/\/ \[start_store_vars\]\n.*?\t\t\/\/ \[end_store_vars\]/\t\t\/\/ \[start_store_vars\]\n$list_store\t\t\/\/ \[end_store_vars\]/s;
$content =~
s/\t\t\/\/ \[start_restore_vars\]\n.*?\t\t\/\/ \[end_restore_vars\]/\t\t\/\/ \[start_restore_vars\]\n$list_restore\t\t\/\/ \[end_restore_vars\]/s;

open FH, ">MainWindow.tjs" or die;
print FH $content;


# */

