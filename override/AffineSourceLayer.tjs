//makeworld版AffineLayerより抜粋	更新矩形情報を元にアフィン描画する機能をもった _image の提供

//	orgimage を assignImages して、展開の時間が極力発生しないようにする
@set(SHARE_IMAGE_RESOURCES=1)

var	imageResources	= %[];
@if(DEBUG)
//	_image は構造化レイヤーとする
Storages.addAutoPath("composition/");
Scripts.execStorage("CompositionLayer.tjs");
function dispImageResources()
{
	var	keys	= [];
	keys.assign(imageResources);
	var	invalid	= false;
	for(var i=0; i<keys.count; i+=2)
	{
		var	fn		= keys[i];
		var	list	= keys[i+1], text;
		for(var i=0; i<list.count; i++)
		{
			text	+= list[i].owner.name+"("+list[i].storage+"), ";
			if(list[i].storage != fn)
				invalid	= true;
		}
		dm("・"+fn);
		dm("    → "+text);
	}
	if(invalid)
		throw new Exception("画像キャッシュに不整合が見つかりました。");
}
@endif
@if(!DEBUG)
Scripts.execStorage("CompositionLayer.tjs");
@endif

class AffineSourceLayer extends CompositionLayer
{
	var _clearRegion; //< 前回描画時の消去領域

	//	元々のleft,topはInteger固定なので、Realを入れられるよう追加した
	var	left, top;
	var	_width = 32, _height = 32;	//	width, height も

	//	読み込み時の画像サイズ
	var	realImageWidth, realImageHeight;

	//	画像拡張サイズ
	var	margin	= 0;

	/**
	 * コンストラクタ
	 */
	function AffineSourceLayer()
	{
		super.CompositionLayer(...);
		_clearRegion = new UpdateRegion();
		_clearRegion.clear();
	}

	function finalize()
	{
		freeImage();
		super.finalize();
	}
/*
	var	_storage;
	property storage
	{
		setter(v)
		{
			if(storage !== v)
			{
//				dm(owner.name+".storage = "+storage+" → "+v+" / "+Scripts.getTraceString());
				_storage	= v;
				dispImageResources();
			}
		}
		getter	{ return _storage; }
	}
*/
	function getFileName(st=storage)
	{
		var	fn	= Storages.chopStorageExt(Storages.extractStorageName(st));
		var	pos	= fn.indexOf(__Layer_partsSeparateKey);
		fn		= fn.substr(0, pos) if pos >= 0;
		return fn;
	}

	var	divideArea;			//	分割描画もしくは一部領域の利用を行うときの矩形リスト
	var	optionalDisplay;	//	分割描画を行うかどうか(一部領域の利用のみ行う場合は false にすること)
	function loadImages(storage)
	{
		if(storage == this.storage)
			return orgTag;
@if(SHARE_IMAGE_RESOURCES)
		//	同じ画像を読み込んでいるレイヤーが存在すれば、assignImages する
		var	fn	= getFileName(storage);
		var	list= imageResources[fn];
		var	ret;
		if(list)
			assignImages(list[0],,,, list, false) if list.find(this) < 0;	//	リストの中に自身が含まれていないなら
			//	リソースから assignImages するときは、_clearRegion はコピーされて欲しくない
			//	→	描画している画像を消去できなくなってしまうので
			//		ただし、backlay などで assign されたときはコピーされるべき

		//	無ければ、今現在の画像をリソースリストから取り除く
		else
		{
			removeFromResource();	//	現在読み込んでいる画像をリソースリストから削除
			imageResources[fn]	= [ this ];
		}
@endif
		margin	= 0;
		var	ret	= super.loadImages(...);	//	読み込みを行う(パーツが変わっているかもしれないので)
		realImageWidth	= imageWidth;
		realImageHeight	= imageHeight;

		//	分割データを処理
		divideArea	= void;
		if(orgTag != null && orgTag != void)
		{
			if(orgTag.divideArea != void)
			{
				var	da	= orgTag.divideArea.split("/");
				for(var i=0; i<da.count; i++)
				{
					da[i]	= da[i].split(",");
					for(var j=0; j<da[i].count; j++)
						da[i][j]	= +da[i][j];
				}
				divideArea	= da;
			}
			optionalDisplay	= orgTag.optionalDisplay !== "0";	//	文字列として格納されているため
		}

		return ret;
	}

	function reload()
	{
		if(storage == "")
			return;
		var	fn	= getFileName();
		var	list= imageResources[fn];
		if(list)
			global.Layer.assignImages(list[0]);
		else
			super.loadImages(storage,, true);	//	強制再読込
	}

	function assignImages(src, a, b, c, list, assignClearRegion=true)
	{
		if( src === void || ! isvalid src )
			return;
@if(SHARE_IMAGE_RESOURCES)
		//	読み込んでいる画像がassignされるので、読み込んでいる画像のリソースリストから取り除く
		removeFromResource();
@endif
		//	assign する
		src.orgTag = void if typeof src.orgTag != "undefined" && src.orgTag == null;
		margin	= src.margin if typeof src.margin != "undefined";
		_clearRegion.assign(src._clearRegion) if typeof src._clearRegion != "undefined" && assignClearRegion;
		if(typeof src.divideArea != "undefined")
		{
			if(src.divideArea != void)
			{
				divideArea = [];
				divideArea.assignStruct(src.divideArea);
			}
			else
				divideArea	= void;
		}
		optionalDisplay	= src.optionalDisplay if typeof src.optionalDisplay != "undefined";
		super.assignImages(...);

@if(SHARE_IMAGE_RESOURCES)
		//	assign された画像のリソースリストへ追加する
		if(list == void)
		{
			var	fn	= getFileName();
			list	= imageResources[fn] if fn != "";
		}
		if(list != void)
			list.add(this);
@endif
	}

	function removeFromResource()
	{
@if(SHARE_IMAGE_RESOURCES)
		var	fn	= getFileName();
		var	list;
		if(fn != "" && (list = imageResources[fn]) != void)
		{
			list.remove(this);
			delete imageResources[fn] if list.count == 0;
		}
@endif
	}

	function freeImage()
	{
		removeFromResource();
		margin	= 0;
		storage	= "";
	}

	function setPos(l, t, w, h)
	{
		super.setPos(l, t);
		setSize(w, h);
	}

	property width
	{
		setter(v)	{ _width = +v; super.width = Math.min(+v, imageWidth); }
		getter		{ return _width; }
	}

	property height
	{
		setter(v)	{ _height = +v; super.height = Math.min(+v, imageHeight); }
		getter		{ return _height; }
	}

	function setSize(w, h)
	{
		width	= w;
		height	= h;
	}

	function setRealSize(w, h)
	{
		super.setSize(w, h);
	}

	function setSizeToImageSize()
	{
		setSize(imageWidth, imageHeight);
	}

	/**
	 *	画像領域の拡張.
	 */
	function expandImage(org, size)
	{
		setImageSize(org.imageWidth + size * 2, org.imageHeight + size * 2);
		setSizeToImageSize();
		fillRect(0, 0, width, size, 0);
		fillRect(0, size, size, height - size * 2, 0);
		copyRect(size, size, org, 0, 0, org.imageWidth, org.imageHeight);
		fillRect(width - size, size, size, height - size * 2, 0);
		fillRect(0, height - size, width, size, 0);
		margin	= size;
	}

	/**
	 *	描画領域のクリア
	 */
	function clear(target)
	{
		(global.Layer.fillRect incontextof target)(_clearRegion.left, _clearRegion.top,
												   _clearRegion.width, _clearRegion.height, neutralColor);
		_clearRegion.clear();
//		_clearRegion.lasttarget	= target;
@if(0)
		init(false);
@endif
	}

	/**
	 * 描画処理.
	 * このレイヤーの opacity が 255 以外なら、半透明描画される
	 * @param left 描画位置
	 * @param top  描画位置
	 * @param width 描画サイズ
	 * @param height 描画サイズ
	 * @param afx  そのレイヤ中での回転中心
	 * @param afy  そのレイヤ中での回転中心
	 * @param rotate 回転量
	 * @param zoomx ズームX
	 * @param zoomy ズームY
	 * @param aorder Affine順序
	 * @param type 拡大種別
	 */
	function drawAffine(target, left, top, width, height, afx, afy, rotate, zoomx, zoomy, aorder, type=stFastLinear)
	{

		/**
		 * 旧描画領域の消去
		 */
//		dmt(target.name+": clear = "+_clearRegion.left+", "+_clearRegion.top+", "+_clearRegion.width+", "+_clearRegion.height);
		if(opacity == 255)
		{
			(global.Layer.fillRect incontextof target)(_clearRegion.left, _clearRegion.top,
													   _clearRegion.width, _clearRegion.height, neutralColor);
		}
		_clearRegion.clear();
//		_clearRegion.lasttarget	= target;

		//dm(name + ":画像位置:" + imageLeft + "," + imageTop + " " + this.width  + "," + this.height);
		if (rotate == 0 &&
			zoomx == 100 &&
			zoomy == 100 &&
			left == (int)left &&
			top  == (int)top)
		{
			// 単純コピー
			var	area;
			if(divideArea != void && optionalDisplay)
			{//	分割された領域のいずれか一つのみが転送先領域内に入るなら、そこだけ転送する
				var	iw, ih;
				if(typeof target.realImageWidth != "undefined")
					iw = target.realImageWidth, ih = target.realImageHeight;
				else
					iw = target.imageWidth, ih = target.imageHeight;
				for(var i=0; i<divideArea.count; i++)
				{
					var	da	= divideArea[i];
					var	l	= left - margin + da[0], t = top - margin + da[1];
					if(l < iw && t < ih && l + da[2] >= 0 && t + da[3] >= 0)
					{
						if(area != void)
						{
							area	= void;	//	複数転送する必要のある領域が見つかった
							break;
						}
						area	= da;
					}
				}
			}
			if(area != void)
			{//	一部分のみ転送
				var	l	= left - margin + area[0], t = top - margin + area[1];
				var	il	= area[0] - imageLeft, it = area[1] - imageTop;
				var	w	= area[2], h = area[3];
				if (width == this.width && height == this.height)
				{
					if(opacity == 255)
						(global.Layer.copyRect incontextof target)(l, t, this, il, it, w, h);
					else
						(global.Layer.pileRect incontextof target)(l, t, this, il, it, w, h, opacity);
				}
				else
				{
					w	*= width / this.width;
					h	*= height / this.height;
					if(opacity == 255)
						(global.Layer.stretchCopy incontextof target)(l, t, w, h, this, il, it, area[2], area[3], stCubic /*type*/);
					else
						(global.Layer.stretchBlend incontextof target)(l, t, w, h, this, il, it, area[2], area[3], opacity, stCubic /*type*/);
				}
				_clearRegion.update(l, t, w, h);
			}
			else
			{//	全体を転送
				var	l	= left - margin, t = top - margin;
				if (width == this.width && height == this.height)
				{
					if(opacity == 255)
						(global.Layer.copyRect incontextof target)(l, t, this, -imageLeft, -imageTop, this.width, this.height);
					else
						(global.Layer.pileRect incontextof target)(l, t, this, -imageLeft, -imageTop, this.width, this.height, opacity);
				}
				else
				{
					if(opacity == 255)
						(global.Layer.stretchCopy incontextof target)(l, t, width, height, this, -imageLeft, -imageTop, this.width, this.height, stCubic /*type*/);
					else
						(global.Layer.stretchBlend incontextof target)(l, t, width, height, this, -imageLeft, -imageTop, this.width, this.height, opacity, stCubic /*type*/);
				}
				_clearRegion.update(l, t, width, height);
			}
//			dm(target.name+": "+l+", "+t+", "+width+", "+height);
//			dm(name + "描画領域更新:" + l + "," + t + ","  +width + "," + height);
		}
		else
		{
			// 回転角と拡大率からAffine値計算
			var rad, sn, cs, rad, stepx, stepy;
			rad = (Math.PI * rotate)/180.0;
			sn = Math.sin(rad);
			cs = Math.cos(rad);
			stepx = zoomx / 100.0;
			stepy = zoomy / 100.0;

			var	dxh, dxv, dyh, dyv;
			if(aorder == "rm")
			{
				dxh = stepx * cs;
				dxv = stepx * sn;
				dyh = -stepy * sn;
				dyv = stepy * cs;
			}
			else
			{
				dxh = stepx*cs;
				dxv = stepy*sn;
				dyh = -stepx*sn;
				dyv = stepy*cs;
			}

			var	lx, ly, rx, ry;
			var x = [];
			var y = [];
			var	il = -imageLeft, it = -imageTop;

			var	area;
			if(divideArea != void && optionalDisplay)
			{//	一部分だけの描画で済ませることができるかチェック
				var	iw, ih;
				if(typeof target.realImageWidth != "undefined")
					iw = target.realImageWidth, ih = target.realImageHeight;
				else
					iw = target.imageWidth, ih = target.imageHeight;
				var	tx = [], ty = [];
				var	px = [], py = [];
				for(var i=0; i<divideArea.count; i++)
				{
					var	da	= divideArea[i];
					lx = da[0] -(afx + margin);
					ly = da[1] -(afy + margin);
					rx = da[2] + lx + margin;
					ry = da[3] + ly + margin;

					var	_afx = left + afx, _afy = top + afy;
					tx[0] = lx*dxh+ly*dxv + _afx;
					ty[0] = lx*dyh+ly*dyv + _afy;
					tx[1] = rx*dxh+ly*dxv + _afx;
					ty[1] = rx*dyh+ly*dyv + _afy;
					tx[2] = lx*dxh+ry*dxv + _afx;
					ty[2] = lx*dyh+ry*dyv + _afy;
					tx[3] = rx*dxh+ry*dxv + _afx;
					ty[3] = rx*dyh+ry*dyv + _afy;

					px.assign(tx);
					px.sort();
					py.assign(ty);
					py.sort();

//					dm(i, px[0], py[0], px[3], py[3], iw, ih+" = "+(px[0] < iw && py[0] < ih && px[3] >= 0 && py[3] >= 0));
					if(px[0] < iw && py[0] < ih && px[3] >= 0 && py[3] >= 0)
					{
						if(area !== void)
						{
							area	= void;
							break;
						}
						area	= i;
						x.assign(tx);
						y.assign(ty);
					}
				}
			}
			if(area !== void)
			{//	一部を転送
				var	da	= divideArea[area];
				il		+= da[0];
				it		+= da[1];
				width	= da[2] + margin;
				height	= da[3] + margin;
			}
			else
			{//	全体を転送
				lx = -(afx + margin);
				ly = -(afy + margin);
				rx = width  + lx;
				ry = height + ly;

				// 更新エリア4隅の座標を求める
				x[0] = left + lx*dxh+ly*dxv + afx;
				y[0] = top  + lx*dyh+ly*dyv + afy;
				x[1] = left + rx*dxh+ly*dxv + afx;
				y[1] = top  + rx*dyh+ly*dyv + afy;
				x[2] = left + lx*dxh+ry*dxv + afx;
				y[2] = top  + lx*dyh+ry*dyv + afy;
				x[3] = left + rx*dxh+ry*dxv + afx;
				y[3] = top  + rx*dyh+ry*dyv + afy;
			}

			// アフィン変形して描画
			if(opacity == 255)
			{
				(global.Layer.affineCopy incontextof target)(this,
															 il, it, width, height,
															 false,
															 x[0]-0.5,y[0]-0.5,
															 x[1]-0.5,y[1]-0.5,
															 x[2]-0.5,y[2]-0.5,
															 type|stRefNoClip,true);
			}
			else
			{
				(global.Layer.operateAffine incontextof target)(this,
															 il, it, width, height,
															 false,
															 x[0]-0.5,y[0]-0.5,
															 x[1]-0.5,y[1]-0.5,
															 x[2]-0.5,y[2]-0.5,
															 omOpaque,
															 opacity,
															 type|stRefNoClip);
			}

			// 描画領域の保存
			x.sort();
			y.sort();
			_clearRegion.update2(x[0], y[0], x[3], y[3]);
		}
	};
@if(0)
	//	一つのレイヤーから複数のレイヤーへ描画を行う
	var	_regions, _regionCount = 0;
	function init(realInitialize=true)
	{
		if(_regions != void)
		{
			for(var i=0; i<_regionCount; i++) with(_regions[i])
			{
				(global.Layer.fillRect incontextof .target)(.left, .top, .width, .height, neutralColor);
				.clear();
			}
		}
		else if(realInitialize)
			_regions	= [];
		_regionCount	= 0;
	}

	function draw(target, destleft, desttop, srcleft, srctop, width, height, afx, afy, rotate, zoomx, zoomy, aorder, type=stFastLinear)
	{
		_regions[_regionCount]	= new UpdateRegion() if _regions[_regionCount] == void;

		if (rotate == 0 &&
			zoomx == 100 &&
			zoomy == 100 &&
			left == (int)left &&
			top  == (int)top)
		{
			// 単純コピー
			var	l	= destleft - margin, t = desttop - margin;
			if(opacity == 255)
				(global.Layer.copyRect incontextof target)(l, t, this, srcleft-imageLeft, srctop-imageTop, width, height);
			else
				(global.Layer.pileRect incontextof target)(l, t, this, srcleft-imageLeft, srctop-imageTop, width, height, opacity);
			_regions[_regionCount].update(l, t, width, height);
		}
		else
		{
			// 回転角と拡大率からAffine値計算
			var rad, sn, cs, rad, stepx, stepy;
			rad = (Math.PI * rotate)/180.0;
			sn = Math.sin(rad);
			cs = Math.cos(rad);
			stepx = zoomx / 100.0;
			stepy = zoomy / 100.0;

			var	dxh, dxv, dyh, dyv;
			if(aorder == "rm")
			{
				dxh = stepx * cs;
				dxv = stepx * sn;
				dyh = -stepy * sn;
				dyv = stepy * cs;
			}
			else
			{
				dxh = stepx*cs;
				dxv = stepy*sn;
				dyh = -stepx*sn;
				dyv = stepy*cs;
			}

			var lx = srcleft -(afx + margin);
			var ly = srctop -(afy + margin);
			var rx = width  + lx;
			var ry = height + ly;
			
			// 更新エリア4隅の座標を求める
			var x = [];
			var y = [];
			x.add(destleft + lx*dxh+ly*dxv + afx - srcleft);
			y.add(desttop  + lx*dyh+ly*dyv + afy - srctop);
			x.add(destleft + rx*dxh+ly*dxv + afx - srcleft);
			y.add(desttop  + rx*dyh+ly*dyv + afy - srctop);
			x.add(destleft + lx*dxh+ry*dxv + afx - srcleft);
			y.add(desttop  + lx*dyh+ry*dyv + afy - srctop);
			x.add(destleft + rx*dxh+ry*dxv + afx - srcleft);
			y.add(desttop  + rx*dyh+ry*dyv + afy - srctop);

			// アフィン変形して描画
			if(opacity == 255)
			{
				(global.Layer.affineCopy incontextof target)(this,
															 srcleft-imageLeft, srctop-imageTop,
															 width, height,
															 false,
															 x[0]-0.5,y[0]-0.5,
															 x[1]-0.5,y[1]-0.5,
															 x[2]-0.5,y[2]-0.5,
															 type|stRefNoClip,true);
			}
			else
			{
				(global.Layer.operateAffine incontextof target)(this,
															 srcleft-imageLeft, srctop-imageTop,
															 width, height,
															 false,
															 x[0]-0.5,y[0]-0.5,
															 x[1]-0.5,y[1]-0.5,
															 x[2]-0.5,y[2]-0.5,
															 omOpaque,
															 opacity,
															 type|stRefNoClip);
			}

			// 描画領域の保存
			x.sort();
			y.sort();
			_regions[_regionCount].update2(x[0], y[0], x[3], y[3]);
		}
		_regions[_regionCount].target	= target;
		_regionCount++;
	}
@endif
};

