// Conductor.tjs - KAG シナリオ進行処理
// Copyright (C)2001-2008, W.Dee and contributors  改変・配布は自由です

//	タグ属性の未定義チェックを行うか
@set(USE_CHECK_TAG_PARAM=1)

//	デバッグレベルの設定
@set(CONDUCTOR_VERBOSE=1)

class ConductorException extends Exception
{
	// ConductorException - Conductor がタグハンドラを処理中に発生した例外を
	// 投げる時に使われる例外クラス
	function ConductorException() { super.Exception(...); }
	function finalize() { super.finalize(...); }
};

var	isStopTag	= %[
	l:1, lr:1, p:1, pg:1, s:1, stopcache:1, autocache:1,	//	コンダクタが解釈してしまうタグ以外(macro を登録しても、先にコンダクタが元のタグに分解してしまう)
];
var	isSoundTags	= %[
	se:1, sestop:1, fadese:1, seact:1,
	play:1, playstop:1, bgmact:1,
];
var	isActionTags= %[
	action:1, bgact:1, fgact:1, partbgact:1
];
var	imageExts	= %[".jpg"=>1, ".bmp"=>1, ".png"=>1, ".tlg"=>1];
//	トランジションを行うタグ
var	isTransTag	= %[
	trans:1, bg:1, fg:1, clfg:1, chgfg:1, partbg:1, clpartbg:1, chgpartbg:1,
	monocro:1, red:1, green:1, blue:1, sepia:1, nega:1, contrast:1, blur:1, bluroff:1,
];

//	タグ属性の未定義チェック
@if(DEBUG)
@if(USE_CHECK_TAG_PARAM)
var	mytaglistStorage= "mytaglist.ksc";
var	taglistStorage	= "taglist.ksc";
var	taglist;
taglist	= Scripts.evalStorage(taglistStorage) if Storages.isExistentStorage(taglistStorage);
taglist	= %[ALL:[]] if taglist == void;
if(Storages.isExistentStorage(mytaglistStorage))
{//	オリジナルのタグと元々のタグをマージする
	var	mytaglist	= Scripts.evalStorage(mytaglistStorage);
	var	names		= mytaglist.ALL;
	for(var i=0; i<names.count; i++)
	{
		var	name	= names[i];
		var	params	= mytaglist[name].param;
		if(params == void)
			continue;
		if(taglist[name] == void)
		{
			taglist.ALL.add(name);
			taglist[name]	= %[];
		}
		var	tag	= taglist[name];
		tag.param	= [] if tag.param == void;
		for(var i=0; i<params.count; i++)
			tag.param.add(params[i]) if tag.param.find(params[i]) < 0;
		tag.comment	= mytaglist[name].comment if mytaglist[name].comment != "";
	}
}
var	undefinedTagParams	= %[];	//	一度見つかったものは二度表示しない

//	チェックを行う一部タグ
var	checkTags	= %[
	action:1, stopaction:1, wact:1, bg:1, bgopt:1, condoff:1, monocro:1, blur:1, bluroff:1,
	quake:1, stopquake:1, shake:1, stopshake:1, shock:1, wshock:1, haze:1, stophaze:1,
	fg:1, clfg:1, chgfg:1, movefg:1, partbg:1, clpartbg:1, chgpartbg:1, partbgopt:1, movepartbg:1, 
	bgact:1, fgact:1, partbgact:1, seact:1, bgmact:1,
	focusline:1, startfocusline:1, stopfocusline:1, pausefocusline:1, focuslineact:1, movefocusline:1, 
	hearttone:1, hearttoneact:1, 
	noise:1, noise_back:1, noise_noback:1, pausenoise:1, resumenoise:1, stopnoise:1, noiseact:1, 
	startsnow:1, snowopt:1, stopsnow:1, snowact:1, movesnow:1, 
];

//	未定義タグを使用していないかチェックする
function checkTagParams(tag)
{
	var	keys	= [];
	keys.assign(tag);
	if(!checkTags[tag.tagname])
		return;
	var	taginfo	= taglist[tag.tagname];
	if(taginfo == void)
	{
//		dm("※未定義のタグ: "+tag.tagname);
		return;
	}
	for(var i=0; i<keys.count; i+=2)
	{
		if(keys[i] == "tagname" || keys[i] == "created" || keys[i] == "needlayer")
			continue;
		if((taginfo.param == void || taginfo.param.find(keys[i]) < 0) &&
			(undefinedTagParams[tag.tagname] == void || !undefinedTagParams[tag.tagname][keys[i]]))
		{
			dm("※未定義のタグ属性: "+tag.tagname+"."+keys[i]);
//			dm("◆◆◆未定義のタグ属性: "+tag.tagname+"."+keys[i]);
//			System.inform("未定義のタグ属性\r\n"+tag.tagname+"."+keys[i]);
			undefinedTagParams[tag.tagname]	= %[] if undefinedTagParams[tag.tagname] == void;
			undefinedTagParams[tag.tagname][keys[i]]	= true;
		}
	}
}

Plugins.link("savestruct.dll");
//配列になおしてファイル出力
function outputUndefinedTagParams()
{
	var curName = Storages.extractStorageName(Storages.chopStorageExt(kag.conductor.curStorage));
	var fn = System.exePath+"ss/undefinedTagParams&"+curName+".txt";
	var output = [];
	var tags = [];
	tags.assign(undefinedTagParams);
	
	for( var i=0; i<tags.count; i+=2 )
	{
		var tagname = tags[i];
		var params = [];
		params.assign(tags[i+1]);
		for( var j=0; j<params.count; j+=2 )
		{
			output.add(tagname + "." + params[j]);
		}
	}
	
	if( output.count )
	{
		output.save2(fn);
	}
}
@endif
@endif

class BaseConductor extends KAGParser
{
	// BaseConductor - シナリオ進行処理のベースクラス
	var timer;
	var oneshot;
	var _interrupted = false; // 中断中か
	var timerEnabled = false; // タイマが起動中か
	var pendings; // 後回しにされたタグ
	var inProcessing = false; // timerCallback を処理中かどうか
	var reentered = false; // timerCallback 中に 再入したか
	var nextTimerTick = 0; // 次にタイマーが発動されるはずの tick
	var autoCache = false; // 自動キャッシュの有効/無効

	function BaseConductor()
	{
		// コンストラクタ
		super.KAGParser(...);

		timer = new Timer(timerCallback, '');
			// Timerの第二引数に空文字列を指定すると
			// 第１引数に指定した関数を直接呼び出すようになる
		oneshot = new AsyncTrigger(timerCallback, '');
			// これも同様
		oneshot.cached = true; // イベントのキャッシュを有効に

		pendings = [];
	}

	function finalize()
	{
		// finalize()
		invalidate timer;
		invalidate oneshot;
		super.finalize(...);
	}

	function clear()
	{
		// clear オーバーライド
		pendings.clear();
		super.clear();
	}

	function doOneshot(mode)
	{
		oneshot.mode= mode;
		oneshot.trigger(); // トリガ
		_doOneshot	= true;
	}

	function cancelOneshot()
	{
		oneshot.cancel();
		_doOneshot	= false;
	}

	var	_doOneshot	= false;	//	timer.enabled=false でも、oneshot で実行されたときは処理を行うためのフラグ
	function timerCallback()
	{
		if(!timer.enabled)
		{
			if(!_doOneshot)
			{
				dmt("timerCallback: conductor.timer.enabled = "+timer.enabled);
				return;
			}
			else
			{
				dm("do oneshot");
				_doOneshot	= false;
			}
		}

		// 次の要素を得る
		nextTimerTick = timer.interval + System.getTickCount();
		var obj;
		try
		{
			if(inProcessing)
			{
				// 再入
				reentered = true;
				timer.interval = 0;
				return;
			}
			inProcessing = true;
			for(;;)
			{
				if(pendings.count > 0)
				{
					// 後回しにされたタグがある場合
					obj = pendings[0];
					pendings.erase(0);
				}
				else
				{
					// 後回しにされたタグがないので次のタグを得る
@if(DEBUG)
					try
					{
@endif
					obj = getNextTag(); // 次のタグを得る
@if(DEBUG)
					}
					catch(e)
					{
						if(e.message == "return タグが call タグと対応していません ( return タグが多い )")
							obj	= void;
						else
							throw e;
					}
@endif
					// getNextTag() の中で、pendings に追加された (iscript など)
					if(pendings.count > 0)
					{
						pendings.add(obj);
						continue;
					}
				}

				if(obj === void)
				{
					// シナリオ終了
					timer.enabled = false;
					timerEnabled =false;
					onStop();
					inProcessing = false;
					reentered = false;
					return;
				}
				else
				{
@if(DEBUG)
@if(USE_CHECK_TAG_PARAM)
					//	タグの属性値をチェック
					checkTagParams(obj);
@endif
@endif
					// onTag を呼ぶ
					var step = onTag(obj);
					if(step === void)
						throw new Exception("onTag が void を返しました (" + obj.tagname + ")"
							"( おそらくタグハンドラの戻り値を返し忘れた )");
					step = int step; // step を数値に
//					dm(obj.tagname+" = "+step) if obj.tagname != "copy" && obj.tagname != "ch" && obj.tagname != "wait";
					if(step == 0)
					{
						// ウェイトを掛けずに次へ
						timer.interval = 0;
						continue;
					}
					else if(step < 0)
					{
						switch(step)
						{
						case -5: // いったんイベントを処理(現在のタグは後回し)
							pendings.insert(0, obj);
							doOneshot(atmAtIdle);
							timer.interval = 0; // タイマは停止
							inProcessing = false;
							reentered = false;
							return;
						case -4: // いったんイベントを処理
							doOneshot(atmAtIdle);
							timer.interval = 0; // タイマは停止
							inProcessing = false;
							reentered = false;
							touchNextImages() if isStopTag[obj.tagname]; // タグを先読みして次で使用する画像をキャッシュする
							return;
						case -3: // 後回ししてブレーク
							pendings.insert(0, obj);
							cancelOneshot();
							timer.interval = 0; // タイマは停止
							inProcessing = false;
							reentered = false;
							touchNextImages() if isStopTag[obj.tagname]; // タグを先読みして次で使用する画像をキャッシュする
							return;
						case -2: // ブレーク
							cancelOneshot();
							timer.interval = 0; // タイマは停止
							inProcessing = false;
							reentered = false;
							touchNextImages() if isStopTag[obj.tagname]; // タグを先読みして次で使用する画像をキャッシュする
							return;
						case -1: // シナリオ終了
							timer.interval = 0; 
							timer.enabled = false;
							timerEnabled = false;
							onStop();
							inProcessing = false;
							reentered = false;
							return;
						}
					}
					else
					{
						// 次へ
						if(timer.interval != step)
						{
							timer.interval = step;
							nextTimerTick = step + System.getTickCount();
						}
						// 処理したのが p タグなら時間が指定されていても自動実行中だと思われるので、タグの先読みだけ行う
						if(obj.tagname == "p")
							touchNextImages(step - 150);
						// 次の処理まで多少時間が出来たので、先ほど読み込みきれなかった画像を読み込む
						else if(step > 200 && lastTouchImages.count > 0)
							touchImages(lastTouchImages, step - 150);	//	立ち絵全だと150ミリ秒近く掛かってしまうので、余裕を見て

						inProcessing = false;
						reentered = false;
						return;
					}
				}
			}
			inProcessing = false;
			reentered = false;
		}
		catch(e)
		{
//			Debug.logAsError();
			timer.enabled = false;
			timerEnabled =false;
			onStop();
			inProcessing = false;
			var msg = "エラーが発生しました\n"
				"ファイル : " + curStorage + "   行 : " + (curLine+1) + "\n"
				"タグ : " + (obj === void ? "不明" : obj.tagname)
				+ " ( ← エラーの発生した前後のタグを示している場合もあります )\n"
				+ e.message;
			if((typeof e.trace) != "undefined") dm("trace : " + e.trace);
			dm(msg);
			throw new ConductorException(msg);
//			System.inform(msg, "エラー");
		}
	}

	property doCache
	{
		getter	{ return autoCache; }// && kag.actionCount == 0; }
	}

	//	次に停止するまでの間でタグを先読みし、画像をキャッシュする
	var	lastTouchImages	= [];
	function touchNextImages(wait=0)
	{
		if(!autoCache)
			return;

//		dm("touchNextImages() / "+Scripts.getTraceString());
//		dm("touchNextImages("+wait+"): pendings = "+pendings.count);
		var	list	= [];
		var	ext;
		for(;;)
		{
			//	キャッシュしないならスキップ
			//	アクションが実行されている間も
//			if(!doCache)
//				break;

			//	シナリオ終了だったら、次へ進む
			var ntag = getNextTag();
			if(ntag === void)
				break;
//			dm("touchNextImages: "+ntag.tagname);

			//	タグを複製して pendings へ
			var obj = %[];
			(Dictionary.assignStruct incontextof obj)(ntag); // 次のタグを得る
			pendings.add(obj); // すべて後回しにする

			// 実行停止するタグが見つかったら、次へ進む
			if(isStopTag[obj.tagname])
			{
//				dm("-- break --");
				break;
			}

			//	キャッシュしないならスキップ
			//	アクションが実行されている間も
			if(!doCache)
			{
//				dm("-- no cache --");
				continue;
			}

			// タグで使用する画像をリストへ追加
			if(isActionTags[obj.tagname] && obj.props !== void)
			{
				var	props	= obj.props.split(",");
				var	ii;
				for(var i=0; i<props.count; i++)
				{
					if(props[i] == "-storage")
					{
						ii	= i + 3;
						break;
					}
				}
				if(ii !== void)
				{
					var	keys	= obj.keys.split(/\)\(/);
					for(var i=0; i<keys.count; i++)
						addTouchList(list, (keys[i].split(","))[ii]);
				}
			}
			else if(obj.tagname == "playtimeline")
				timeline_object.getCacheStorageList(obj.scene, list);	//	シーンで使われる画像
			else if(obj.storage != void && !isSoundTags[obj.tagname] &&	//	storage があり、サウンド関連のタグでなく、
				((ext = Storages.extractStorageExt(obj.storage)) == "" || imageExts[ext]))	//	拡張子がない場合は、画像としておく
				addTouchList(list, obj.storage);	// storage 属性は画像の可能性がある
		}

		// 次で使用する画像をキャッシュへ読み込む
		for(var i=0; i<list.count; i++)
		{
			if(list[i] == "")
				list.erase(i--);
		}
		if(list.count > 0)
		{
			touchImages(list, wait) if wait > 0 || !timer.enabled;
//			System.touchImages(list,, wait) if wait > 0 && kag.transCount == 0;
			lastTouchImages	= list;
		}
		else
			lastTouchImages.clear();
	}

	function touchImages(storages, timeout)
	{
//		dm("touchImages("+timeout+"): "+storages.join(", "));
		System.touchImages(storages,, timeout);
	}

	function onTag()
	{
		// オーバーライドすること
		return -1;
	}

	function onStop()
	{
		// (シナリオの)停止時に呼ばれる。
		// stop() から呼ばれるわけではない。
		// オーバーライドすること。
	}

	function startProcess(immediate = false)
	{
		// シナリオ進行開始
		// immediate = false の場合は非同期で実行を開始するので、
		// このメソッド内でタグハンドラが呼ばれることはない
		// 次のイベント配信のタイミングで最初のタグハンドラが呼ばれる。
		// immediate = true の場合は、このメソッド内で初回のタグハンドラが
		// 処理されるため、呼び出し側はこのメソッドの実行が終わったら
		// すぐに吉里吉里に制御を戻す(すべての関数から抜ける)ようにするべき。
		resetInterrupt();
		timer.interval = 0; // 初期インターバル
		timerEnabled = true;
		if(!_interrupted)
		{
			timer.enabled = true; // タイマー開始
			if(immediate)
			{
				timerCallback();
			}
			else
			{
				doOneshot(atmExclusive);
					// イベントが配信されるまで他の非同期イベントをブロック
			}
		}
	}

	function start()
	{
		// タイマ開始
		timerEnabled = true;
		timer.enabled = true;
	}

	function stop()
	{
		// タイマ停止
		timer.enabled = false;
		timerEnabled = false;
	}

	property interrupted
	{
		getter() { return _interrupted; }
		setter(x)
		{
			if(!x)
			{
				// enable
				if(timerEnabled)
				{
					timer.interval = 0;
					timer.enabled = true;
					doOneshot(atmExclusive);
						// イベントが配信されるまで他の非同期イベントをブロック
				}
			}
			else
			{
				// disable
				cancelOneshot();
				timer.enabled = false;
			}
			_interrupted = x;
		}
	}

	function assign(src)
	{
		// src の状態をこのオブジェクトにコピー
		var t = timer;
		var st = src.timer;
		t.enabled = false;
		t.interval = st.interval;
		nextTimerTick = src.nextTimerTick;
		if(st.enabled && st.interval != 0)
		{
			// タイマ interval の調整
			var delta = nextTimerTick - System.getTickCount();
			if(delta > 0) t.interval = delta; else t.interval = 1;
		}
		t.enabled = st.enabled;
		timerEnabled = src.timerEnabled;
		_interrupted = src._interrupted;
		if(src.pendings.count > 0)
			pendings.assignStruct(src.pendings);
		else
			pendings.clear();
		super.assign(src);
	}

	function store()
	{
		// store オーバーライド
		var	dic	= super.store(...);
		dic.autoCache	= autoCache;
		return dic;
	}

	function restore(dic)
	{
		// restore オーバーライド
		super.restore(...);
		autoCache	= dic.autoCache;
		pendings.clear();
	}

	function loadScenario()
	{
		// loadScenario オーバーライド
		pendings.clear();
		super.loadScenario(...);
	}

	function goToLabel()
	{
		// goToLabel オーバーライド
		pendings.clear();
		super.goToLabel(...);
	}

	function enqueueTag(tag)
	{
		pendings.add(tag);
	}
@if(DEBUG)
	function dispPendings()
	{
		for(var i=0; i<pendings.count; i++)
		{
			var	tag	= pendings[i];
			dm(i+": "+tag.tagname);
		}
	}
@endif
}


class Conductor extends BaseConductor
{
	// Conductor - シナリオ進行処理
	/*const*/ var mStop = 0; // 停止
	/*const*/ var mRun = 1; // 動作中
	/*const*/ var mWait = 2; // 待ち

	var owner;
	var handlers;
	var status = mStop;
	var timeOutTimer;
	var waitUntil = %[];
	var lastTagName = ''; // 直前のタグ名

	function Conductor(owner, handlers)
	{
		// コンストラクタ
		super.BaseConductor();
		ignoreCR = global.ignoreCR;
@if(CONDUCTOR_VERBOSE)
		debugLevel = tkdlVerbose;
@endif
@if(!CONDUCTOR_VERBOSE)
		debugLevel = tkdlNone;
@endif
		this.owner = owner;
		this.handlers = handlers;
		timeOutTimer = new Timer(onTimeOut, '');
		timeOutTimer.enabledPause	= false;
	}

	function finalize()
	{
		// finalize()
		invalidate timeOutTimer;
		super.finalize(...);
	}

	function run(immediate = false)
	{
		// 実行の開始
		// immediate=true の場合は、
		// このメソッドを実行したらすぐに吉里吉里に制御を戻す
		// (すべての関数から戻る)こと
		status = mRun;
		startProcess(immediate);
	}

	function sleep()
	{
		// 実行の停止
		status = mStop;
		stop();
	}

	function wait(until)
	{
		// 待ち
		// until = trigger で用いるシグナル名とコールバック関数の
		// 辞書配列
		status = mWait;
		stop();
		(Dictionary.assign incontextof waitUntil)(until);
	}

	function waitWithTimeOut(until, timeout)
	{
		// 待ちを行うが、タイムアウトがある
		// タイムアウト時には 'timeout' がトリガされるので
		// ハンドラを定義すること。
		if(timeout == 0) timeout = 1; // timeout が 0 の場合は 1 に
		status = mWait;
		stop();
		(Dictionary.assign incontextof waitUntil)(until);
		timeOutTimer.interval = timeout;
		timeOutTimer.enabled = true;
		timeOutTimer.enabledPause = false;
	}

	function onTimeOut()
	{
		// timeOutTimer がタイムアウトした
		timeOutTimer.enabled = false;
		trigger('timeout'); // 自分自身で timeout をトリガする
	}

	function waitWithTimeOutAndPause(until, timeout)
	{
		// 待ちを行うが、タイムアウトとタイムアウトの一時停止がある
		waitWithTimeOut(...);
		timeOutTimer.enabledPause	= true;
		timeOutTimer.startTick		= System.getTickCount();	//	pause したときのため、開始時刻を記録
	}

	function pauseTimeout()
	{
		if(timeOutTimer.enabledPause)
		{
			timeOutTimer.enabled	= false;
			timeOutTimer.interval	-= System.getTickCount() - timeOutTimer.startTick;	//	経過時間を引いて、resume したときに残り時間分だけ待つように
		}
	}

	function resumeTimeout()
	{
		if(timeOutTimer.enabledPause)
		{
			timeOutTimer.enabled	= true;
			timeOutTimer.startTick	= System.getTickCount();	//	resume した時刻を記録
		}
	}

	function trigger(name)
	{
		// waitUntil 内にシグナル名 name が存在すれば、実行再開、
		// 同時に waitUntil に登録されたメソッド(リスタートハンドラ)を呼ぶ
		// シグナル名に _arg がついたものが waitUntil 内にあれば、
		// それを引数としてハンドラに渡す
		// waitUntil はクリアされる
		if(status != mWait) return false;
@if(0)
		//	引かれたトリガと待っているものを表示する
		var	keys	= [];
		keys.assign(waitUntil);
		for(var i=0; i<keys.count; i++)
			keys.erase(i+1);
		dm("trigger("+name+"): "+keys.join(", "));
@endif
		var func = waitUntil[name];
		if(func !== void)
		{
			var arg = waitUntil[name + '_arg'];
			if(arg !== void) func(arg); else func();
			(Dictionary.clear incontextof waitUntil)();
			run();
			return true;
		}
		else
		{
			return false;
		}
	}
	
@if(DEBUG)
	//デバッグ用の高速セーブ／ロードでペンディングせず即時実施するタグかどうか確認する
	//	ペンディングで良い:true, 即時実行しないといけない:false
	function isNotPriorityTag(tagname)
	{
/*
		var priList = ["eval","ch","wt","wact","wshock","wpanse","wtimeline",
					   "wdash","wsplinemove","waitclick","wa","wm","wb","wf","wp",
					   "ws","wv","waittrig","clfg","clpartbg","clall"];
*/
		var priList = ["eval","ch","wait"];
		
		for( var i=0; i<priList.count; i++ )
		{
			if( priList[i] === void || priList[i] == "" ) continue;
			if( priList[i] == tagname )
				return false;
		}
		return true;
	}
@endif

	function onTag(elm)
	{
//		dm("onTag("+elm.tagname+")");
@if(DEBUG)
		if( typeof global.load_by_ss == "undefined" )
			global.load_by_ss = false;
		if( typeof global.ss_by_label == "undefined" )
			global.ss_by_label = false;
		//自動ロードテスト時の読み込み完了(onTag処理開始)タイミングでSS採取
		if(load_by_ss && kag.fnSaveFilesBySS.count || ss_by_label)
		{
			if( kag.waitForOnPaint )
			{
				if( isNotPriorityTag(elm.tagname) || kag.transCount )
				{
					dm("＠・・・waiting onPaint * / pending... " + elm.tagname);
					var newelm = %[];
					(Dictionary.assignStruct incontextof newelm)(elm);
					pendings.insert(0, newelm);
					elm = %[tagname:"l"];
				}
			}
			else
			{

				if( load_by_ss && ! ss_by_label )
				{
					if( typeof this.ss_phase == "undefined" )
					{
						dm("＠自動読み込みテスト開始＠＠＠＠＠＠＠＠");
						var msg_start = "自動読み込みテスト開始";
						this.ss_phase = 0;
						kag.caption = msg_start;
					}
				}
				
				if( kag.waitForBeforeSave &&
					( elm.tagname != "l" && elm.tagname != "lr" &&
					  elm.tagname != "p" && elm.tagname != "pg" ) )
				{
					if( elm.tagname != "eval" && elm.tagname != "ch" )
					{
						dm("＠・・・waiting stopTags / pending... " + elm.tagname);
						var newelm = %[];
						(Dictionary.assignStruct incontextof newelm)(elm);
						pendings.insert(0, newelm);
						elm = %[tagname:"l"];
					}
				}
				
				if( ( kag.waitForBeforeSave || kag.waitForAfterLoad ) &&
					( elm.tagname == "l" || elm.tagname == "lr" ||
					  elm.tagname == "p" || elm.tagname == "pg" ) )
				{
					dm("＠ onTag set waitForOnPaint elm.tagname=" + elm.tagname + " trans=" + kag.transCount);
					kag.stopAllTransitions();
					kag.cancelAutoMode();
					kag.waitForOnPaint = true;
					kag.fore.base.updateChildLayers();
					kag.back.base.updateChildLayers();
					
					dm("＠・・・waiting onPaint start / pending... " + elm.tagname);
					var newelm = %[];
					(Dictionary.assignStruct incontextof newelm)(elm);
					pendings.insert(0, newelm);
					elm = %[tagname:"wait", time:1];
				}
				
				
				if( load_by_ss && ! ss_by_label )
				{
					if(! kag.waitForLoadComplete)
					{
						//dm("onTag.waitForComplete phase=" + ss_phase);
						//次のセーブデータを読み込み
						//dm(" onTag: tagname= " + elm.tagname);
						kag.stopAllTransitions();
						kag.stopAllActions();
						clear();
						kag.caption = Storages.extractStorageName(f.autoexecfile) +
							" 自動読み込み中 [" + (kag.curSaveFilesBySS+1) +"/" + kag.fnSaveFilesBySS.count + "]";
						kag.captiontmp = kag.caption + " ";
						kag.loadNextSaveFileBySS();
						kag.waitForAfterLoad = true;
						dm("＠自動読み込み中:" + (kag.curSaveFilesBySS+1) +"/" + kag.fnSaveFilesBySS.count);
						return 0;
					}
					else
					{
						dm("＠・・・waiting next break");
						if( isNotPriorityTag(elm.tagname) || kag.transCount )
						{
							pendings.insert(0, %[tagname:"l"]);
							elm = %[tagname:"wait", time:1];
						}
					}
				}
			}
		}
		if( load_by_ss || ss_by_label )
			dm("＠ onTag exec tagname=" + elm.tagname) if elm.tagname != "ch";
@endif
		// タグの処理
		var tagname = elm.tagname;
		var handler = handlers[tagname];
		if(handler !== void)
		{
			var ret = handler(elm);
			lastTagName = tagname;
			return ret;
		}
		return onUnknownTag(tagname, elm);
	}
	
	property doCache
	{
		getter	{ return super.doCache && owner.previousCache; }
	}

	function touchNextImages()
	{
		super.touchNextImages(...);

		if(owner.asyncTransInChar)
		{
			//	前後を文字表示に挟まれた、トランジションを実行するタグがあれば、非同期トランジションに変更する
			var	islastch	= false;
			var	lasttrans;
			for(var i=0; i<pendings.count; i++)
			{
				var	tag	= pendings[i];
				if(tag.tagname == "ch")
				{
					islastch	= true;
					lasttrans	= void;
				}
				else if(isStopTag[tag.tagname])
					islastch	= false;
				else if(islastch && isTransTag[tag.tagname] && tag.time != void)
				{
					if(lasttrans !== void)
					{
						delete pendings[lasttrans].texton;	//	文字と文字の間に複数のトランジションが存在するので、同期トランジションに戻す
//						delete pendings[lasttrans].nowait;
						lasttrans	= void;
					}
					else
					{
						if(tag.textoff === void && tag.texton === void)
						{
							tag.texton	= true;	//	非同期トランジションへ変更
//							tag.nowait	= true;	//	nowait=true にすると、トランジション後の backlay が行われないため、意図した演出にならないことがある
						}
						lasttrans	= i;
					}
					islastch	= false;
				}
			}
		}
	}

	//	アクションやトランジションを実行していたら、処理を邪魔しないよう一枚ずつキャッシュする
	var	touchEndTick;
	var	touchAsyncCaller;
	function touchImages(storages, timeout)
	{
		//	アクション、トランジションが実行されていないので、まとめてキャッシュする
		if(owner.transCount == 0 && !owner.inAction())
			super.touchImages(storages, timeout);
		else
		{
			if(timeout > 0)
				touchEndTick	= System.getTickCount() + timeout;
			else
				touchEndTick	= -1;	//	タイマーが止まっているなら、動き出すまで読み込みを行う
			super.touchImages(storages, 1);
			storages.erase(0);
			var	tick	= System.getTickCount();
			if((tick < touchEndTick || (touchEndTick < 0 && !timer.enabled)) && storages.count > 0)
			{
				if(touchAsyncCaller == void)
				{
					touchAsyncCaller		= new AsyncTrigger(_touchImages, "");
					touchAsyncCaller.cached	= true;
				}
				touchAsyncCaller.trigger();
			}
		}
	}

	function _touchImages()
	{
		var	tick	= System.getTickCount();
		if((tick < touchEndTick || (touchEndTick < 0 && !timer.enabled)) && lastTouchImages.count > 0)
		{
			super.touchImages(lastTouchImages, 1);
			lastTouchImages.erase(0);
			touchAsyncCaller.trigger() if lastTouchImages.count > 0;
		}
	}

	function onStop()
	{
		// BaseConductor.onStop オーバーライド
		// 停止時に呼ばれるのでステータスを mStop にする
		status = mStop;
		if(owner.conductor == this) handlers.s(); // ハンドラの s (停止) を呼ぶ
	}

	function onScript(script, scriptname, lineofs)
	{
		// scirpt を実行する
		try
		{
			Scripts.exec(script, scriptname, lineofs);
		}
		catch(e)
		{
			throw new Exception(scriptname + " の 行 " + lineofs + " から始まる"
				" iscript ブロックでエラーが発生しました。"
				"\n( 詳細はコンソールを参照してください )\n" + e.message);
		}
		return true;
	}

	function store()
	{
		// store オーバーライド
		return super.store(...);
	}

	function restore(dic)
	{
		// restore オーバーライド
		super.restore(...);
		lastTagName = '';
	}

	function onScenarioLoad()
	{
		return owner.onConductorScenarioLoad(...);
	}

	function onScenarioLoaded()
	{
		return owner.onConductorScenarioLoaded(...);
	}

	function onLabel()
	{
		return owner.onConductorLabel(...);
	}

	function onJump()
	{
		return owner.onConductorJump(...);
	}

	function onCall()
	{
		return owner.onConductorCall(...);
	}

	function onReturn()
	{
		return owner.onConductorReturn(...);
	}

	function onAfterReturn()
	{
		return owner.onConductorAfterReturn(...);
	}

	function onScript()
	{
		return owner.onConductorScript(...);
	}

	function onUnknownTag()
	{
		return owner.onConductorUnknownTag(...);
	}
}

//	画像をリストへ入れる
//	立ち絵ならパーツ画像も入れる
function addTouchList(list, storage)
{
	if(storage == "")
		return;
//	dm("addTouchList("+storage+")");
	var	pos	= storage.indexOf(__Layer_partsSeparateKey);
	if(pos >= 0)
	{
		storage	= storage.substr(0, pos);
		list.add(storage) if list.find(storage) < 0;
		storage	= __Layer_monoPartsFormat.sprintf(storage);
	}
	list.add(storage) if list.find(storage) < 0;
}

