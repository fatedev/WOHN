// SE.tjs - 効果音管理
// Copyright (C)2001-2008, W.Dee and contributors  改変・配布は自由です

@set(VOLUME_VISIBLE=0)

class SESoundBufferOriginal extends WaveSoundBuffer
{
	// 効果音クラス ( WaveSoundBuffer を継承 )

	var owner; // オーナー
	var id; // 効果音バッファID
	var _inFading; // フェード中かどうか
	var prevstatus = "unload"; // 直前のステータス
	var currentStorage = ""; // 見かけの演奏中のストレージ
	var currentVolume = 100; // 見かけのボリューム
	var inFadeAndStop = false; // フェード終了時に停止するか

	function SESoundBufferOriginal(owner, id)
	{
		// コンストラクタ
		super.WaveSoundBuffer(owner);

		this.owner = owner;
		this.id = id;
		super.volume = 0;
	}

	function finalize()
	{
		// finalize()
		super.finalize(...);
	}

	//サウンドデバイスが動作していない状態でゼロ除算ハード例外が出る問題の回避
	property totalTime
	{
		getter()
		{
			if(status == "unload")
				return 0;	//	未読込なので
			try
			{
				var tt;
				tt = super.totalTime;
				return tt;
			}
			catch(e)
			{
				dm("SESoundBufferOriginal：メディアの総再生時間取得に失敗しました(実行は続行できます) : " + e.message);
				return 0;
			}
		}
	}
	
	function play(elm, resetvolume = true)
	{
		// play オーバーライド
		super.stop();
		stopFade();
		asyncCaller.cancel(_onFadeCompleted);	//	予約されているフェード後の停止をキャンセル
		var storage = elm.storage;
		var start = elm.start;
		var found = true;
		if(!Storages.isExistentStorage(storage))
		{
			var test;
			if(test = storage + ".wav", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".ogg", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".tcw", Storages.isExistentStorage(test))
				storage = test;
			else
				found = false;
		}
		if(!found)
		{
			addLoadErrorFiles(storage) if typeof global.addLoadErrorFiles != "undefined";
			var	msg	= "効果音 \"" + storage + "\" が見つかりません";
@if(POPUP_NOTFOUND)
			(typeof global.popupMessage != "undefined" ? popupMessage : dm)(msg);
@endif
@if(!POPUP_NOTFOUND)
			dm(msg);
@endif
			return false;
		}
		var loop = elm.loop === void ? false : +elm.loop;
		looping = loop;
		if(loop)
			currentStorage = storage;
		else
			currentStorage = "";
		try
		{
			super.open(storage);
			if(resetvolume) super.volume = currentVolume * 1000;
			// 再生位置指定
			if (start !== void &&
				super.labels !== void &&
				(start = super.labels[start]) !== void &&
				(start = start.samplePosition) !== void) {
				super.samplePosition = start;
			}
			super.play();//	dm("se["+id+"].play / volume = "+volume);
		}
		catch(e)
		{
			dm("効果音の再生に失敗しました(実行は続行できます) : " + e.message);
		}
	}

	function stop()
	{
		/*
		 *	フェードインして再生開始した効果音を停止して、直後に同じバッファでフェードイン再生を開始すると
		 *	最初にポップノイズの聞こえる環境がある。この問題を回避するため、効果音再生を停止するときは
		 *	必ずフェードアウトして停止するようにした。
		 */
//		dmt("se["+id+"].stop()");
		fadeOut(%[time:1]);
	}

	function stopFade()
	{
		// stopFade オーバーライド
		try
		{
			super.stopFade();
		}
		catch(e)
		{
			dm("効果音のフェードに失敗しました(実行は続行できます) : " + e.message);
		}
		inFadeAndStop = false;
	}

	function fade(elm)
	{
		// fade オーバーライド
		inFading++;
		var time = elm.time === void ? 5000 : +elm.time;
		time = 1 if time < 1;
		var vol = +elm.volume * 1000;
//		dm("SE: fade "+(currentVolume*1000)+" → "+vol+" ("+time+"ms)");
		currentVolume = +elm.volume;
		try
		{
			super.fade(vol, time);
		}
		catch(e)
		{
			dm("効果音のフェードに失敗しました(実行は続行できます) : " + e.message);
		}
	}

	function fadeIn(elm)
	{
		// フェードインしながらの再生
		super.volume = 0;
		play(elm, false);
		inFading++;
		var time = elm.time === void ? 5000 : +elm.time;
		time = 1 if time < 1;
		var vol = currentVolume * 1000;
		try
		{
			super.fade(vol, time);
		}
		catch(e)
		{
			dm("効果音のフェードに失敗しました(実行は続行できます) : " + e.message);
		}
	}

	function fadeOut(elm)
	{
//		dm("se["+id+"].fadeOut(): begin");
		// フェードアウト後停止
		currentStorage = ""; // 状態としては停止扱い
		inFading++;
		inFadeAndStop = true;
		var time = elm.time === void ? 5000 : +elm.time;
		time = 1 if time < 1;
		try
		{
			super.fade(0, time);
		}
		catch(e)
		{
			dm("効果音のフェードに失敗しました(実行は続行できます) : " + e.message);
		}
//		dm("se["+id+"].fadeOut(): end");
	}

	property inFading
	{
		setter(v)
		{
			if(v !== inFading && v >= 0)
			{
				asyncCaller.cancel(_onFadeCompleted) if inFading == 0 && v > 0;	//	再度フェードを開始しはじめたら、停止をキャンセル
				_inFading	= v;
			}
		}
		getter	{ return _inFading; }
	}

	function onFadeCompleted()
	{
		// onFadeCompleted オーバーライド
//		dmt("se["+id+"].onFadeCompleted(): inFading = "+inFading, "inFadeAndStop = "+inFadeAndStop);
		inFading--;
		if(!inFading && inFadeAndStop)
		{
			asyncCaller.callOnce(_onFadeCompleted);
			inFadeAndStop = false;
		}
		super.onFadeCompleted(...);
		owner.onSESoundBufferFadeCompleted(id); // フェード終了
	}

	/*
	 *	フェードが終了したときにすぐ stop すると、ポップノイズが発生してしまうので
	 *	再生停止は遅延実行するようにした
	 */
	function _onFadeCompleted()
	{
//		dmt("se["+id+"]._onFadeCompleted()");
		try
		{
			super.volume = 0;	// 無音下でのノイズ発生を抑えるため
			super.stop(); // 再生停止
		}
		catch(e)
		{
			dm("効果音の停止に失敗しました(実行は続行できます) : " + e.message);
		}
	}

	function onStatusChanged()
	{
		// onStatusChanged オーバーライド
		// ステータスが変更された
		super.onStatusChanged(...);
		var ps = prevstatus;
		var cs = status;
		prevstatus = cs;
		if(ps == "play" && cs == "stop")
		{
			currentStorage = "";
			owner.onSESoundBufferStop(id); // play => stop : 演奏が停止した
			super.volume = 0;	// 無音下でトランジションするとノイズが流れるため、再生していない間は音量を0にしておく
		}
@if(VOLUME_VISIBLE)
		if(status == "play")
			startDisplayVolume();
		else
			stopDisplayVolume();
	}

	function startDisplayVolume()
	{
		System.addContinuousHandler(displayVolume);
	}

	function stopDisplayVolume()
	{
		System.removeContinuousHandler(displayVolume);
	}

	function displayVolume()
	{
		dm("se["+id+"].volume = "+(super.volume \ 1000));
@endif
	}

	function canWaitStop()
	{
		// 終了を待てるか
		return status == "play" && !looping;
	}

	property volume
	{
		setter(x)
		{
//			dm("se["+id+"].volume = "+currentVolume+" → "+x+" / "+Scripts.getTraceString());
			currentVolume = x;
			super.volume = x * 1000;
		}
		getter
		{
			return super.volume \ 1000;
		}
	}

	property pan
	{
		setter(x)
		{
//			dmt("se["+id+"].pan = "+pan+" → "+x+"(isDelaying: "+isDelaying+")");
			super.pan = x * 1000;
		}
		getter
		{
			return super.pan \ 1000;
		}
	}

	function setOptions(elm)
	{
		if(elm.volume !== void) volume = +elm.volume;
		if(elm.gvolume !== void)
		{
			// 大域ボリューム
			var sysvar = owner.scflags; // システム(コア)変数
			if(sysvar.se === void) sysvar.se = [];
			sysvar = sysvar.se;
			if(sysvar[id] === void) sysvar[id] = %[];
			sysvar = sysvar[id];
			var v2 = +elm.gvolume;
			v2 = int(v2 * 1000);
			sysvar.globalVolume = v2;
			if (sysvar.enable === void || sysvar.enable) {
				volume2 = v2;
			} else {
				volume2 = 0;
			}
		}
		if(elm.pan !== void)
		{
			pan = +elm.pan;
		}
	}

	function store()
	{
		// 辞書配列に現在の状態を記録する
		var dic = %[];
		dic.currentStorage = currentStorage;
		dic.volume = currentVolume;
		dic.pan = pan;
		return dic;
	}

	function restore(dic)
	{
		// 辞書配列から状態を読み出し、復帰する
		currentVolume = dic.volume;
		pan = dic.pan;
		if(dic.currentStorage != "")
			play(%[storage : dic.currentStorage, loop : true]);
		else
			stop();
	}

	function restoreSystemState(dic)
	{
		// システム変数 dic から情報を設定する
		// 大域ボリュームの情報を得る
		var sysvar = dic.se;
		if(sysvar !== void)
		{
			sysvar = sysvar[id];
			if(sysvar !== void)
			{
				if (sysvar.enable === void || sysvar.enable) {
					var v2 = sysvar.globalVolume;
					if(v2 !== void) {
						volume2 = +v2;
					}
				} else {
					volume2 = 0;
				}
			}
		}
	}
}
