// YesNoDialog.tjs - はい/いいえを選択するダイアログボックス
// Copyright (C)2001-2008, W.Dee and contributors  改変・配布は自由です

sf.moveCursorToDialog	= "Center" if sf.moveCursorToDialog == void;

class YesNoDialogWindow extends Window
{
	var yesButton; // [はい] ボタン
	var noButton; // [いいえ] ボタン

	var result = false; // no:false yes:true

	var	inputDevice	= "mouse";

	//	表示設定
	var	fontHeight	= 16;
	var	textColor	= (219 << 16) | (252 << 8) | 253;
	var	spacing		= 2;		//	行間
	var	marginLeft	= 20;		//	メッセージ＋ボタンの領域の周り
	var	marginRight	= 20;
	var	marginTop	= 20;
	var	marginBottom= 10;
	var	tbSpacing	= 20;		//	メッセージとボタンの間
	var	buttonSpacing= 10;		//	ボタンの間
	var	minWidth	= 200;		//	最小幅
	var	bgImage		= "yesnodialog";
	var	yesImage	= "yesno_okbutton";
	var	noImage		= "yesno_cancelbutton";

	function YesNoDialogWindow(message, cap)
	{
		super.Window();

		// メインウィンドウから cursor**** の情報をとってくる
		if(global.Window.mainWindow !== null &&
			typeof global.Window.mainWindow.cursorDefault != "undefined")
			this.cursorDefault = global.Window.mainWindow.cursorDefault;
		if(global.Window.mainWindow !== null &&
			typeof global.Window.mainWindow.cursorPointed != "undefined")
			this.cursorPointed = global.Window.mainWindow.cursorPointed;

		// 外見の調整
		borderStyle = bsNone;
		innerSunken = false;
		caption = cap;
		showScrollBars = false;

		// プライマリレイヤの作成
		add(new Layer(this, null));

		// プライマリのマウスカーソルを設定
		if(typeof this.cursorDefault !== "undefined")
			primaryLayer.cursor = cursorDefault;

		// テキストサイズを決定
		primaryLayer.font.height	= fontHeight;
		var	lines	= message.split(/\r\n|\r|\n/);
		var	tw, th;
		var	fh	= primaryLayer.font.getTextHeight("あ");
		for(var i=0; i<lines.count; i++)
		{
			var	fw	= primaryLayer.font.getTextWidth(lines[i]);
			tw	= fw if fw > tw;
			th	+= fh + spacing;
		}
		th	-= spacing;

		// ボタンを作成
		add(yesButton = new AdvButtonLayer(this, primaryLayer));
		with(yesButton)
			.Butt_showDisableImage = .Butt_showFocusImage = .Butt_focusEqualEnter = true, .loadImages(yesImage);
		add(noButton = new AdvButtonLayer(this, primaryLayer));
		with(noButton)
			.Butt_showDisableImage = .Butt_showFocusImage = .Butt_focusEqualEnter = true, .loadImages(noImage);
/*		add(yesButton = new ExButtonLayer(this, primaryLayer, "yes",,, "yesno_okbutton",,, 0));
		add(noButton = new ExButtonLayer(this, primaryLayer, "no",,, "yesno_cancelbutton",,, 0));
*/		var	bw	= yesButton.width + noButton.width + buttonSpacing;
		var	bh	= Math.max(yesButton.height, noButton.height);

		// 内部サイズを決定
		var	w = Math.max(Math.max(tw + marginLeft + marginRight, bw + marginLeft + marginRight), minWidth);
		var	h = marginTop + th + tbSpacing + bh + marginBottom;

		// 拡大率の設定
		if (kag.fullScreen) {
			if (kag.innerWidth / kag.scWidth
				< kag.innerHeight / kag.scHeight)
				setZoom(kag.innerWidth, kag.scWidth);
			else
				setZoom(kag.innerHeight, kag.scHeight);
		} else {
		  setZoom(kag.zoomNumer, kag.zoomDenom);
		}
		// ウィンドウサイズを決定
		setInnerSize(w * zoomNumer / zoomDenom,
			 h * zoomNumer / zoomDenom);

		// プライマリレイヤのサイズを設定
		primaryLayer.width = w;
		primaryLayer.height = h;

		// プライマリレイヤを描画
		//	四隅が固定画像で、中間は1ピクセル幅の画像を拡大
		var	layer	= new Layer(this, primaryLayer);
		layer.loadImages(bgImage);
		var	cw2	= layer.imageWidth - 1;
		var	cw	= cw2 \ 2;
		var	ch2	= layer.imageHeight - 1;
		var	ch	= ch2 \ 2;
		with(primaryLayer)
		{
			.copyRect(0, 0, layer, 0, 0, cw, ch);
			.operateStretch(cw, 0, .width-cw2, ch, layer, cw, 0, 1, ch);
			.copyRect(.width-cw, 0, layer, cw+1, 0, cw, ch);
			.operateStretch(0, ch, cw, .height-ch2, layer, 0, ch, cw, 1);
			.fillRect(cw, ch, .width-cw2, .height-ch2, 0xFF000000 | layer.getMainPixel(cw, ch));
			.operateStretch(.width-cw, ch, cw, .height-ch2, layer, cw+1, ch, cw, 1);
			.copyRect(0, .height-ch, layer, 0, ch+1, cw, ch);
			.operateStretch(cw, .height-ch, .width-cw2, ch, layer, cw, ch+1, 1, ch);
			.copyRect(.width-cw, .height-ch, layer, cw+1, ch+1, cw, ch);
		}
		invalidate layer;

		//	リージョン設定
		setMaskRegion(64);

		// ウィンドウ位置の調整
		if(global.Window.mainWindow !== null && global.Window.mainWindow isvalid)
		{
			var win = global.Window.mainWindow;
			var l, t;
			l = ((win.width - width)>>1) + win.left;
			t = ((win.height - height)>>1) + win.top;

			//	マルチモニタ系のメソッドを利用して、画面内に入っているかを調べる(need: WindowEx.dll)
			var	info	= System.getMonitorInfo(true, mainWindow);
			with(info.monitor)
			{
				l	= .x if l < .x;
				t	= .y if t < .y;
				l	= .w - width if l + width > .w;
				t	= .h - height if t + height > .h;
			}
			setPos(l, t);
		}
		else
		{
			setPos((System.screenWidth - width)>>1, (System.screenHeight - height)>>1);
		}

		// メッセージの描画
		var	tl	= (w - tw) >> 1;
		var	tt	= marginTop;
		for(var i=0; i<lines.count; i++)
		{
			primaryLayer.drawText(tl, tt, lines[i], textColor);
			tt	+= fh + spacing;
		}

		// ボタンを配置
		yesButton.setPos(((w - buttonSpacing) >> 1) - yesButton.width, h - marginBottom - bh);
		yesButton.visible	= true;
		noButton.setPos((w + buttonSpacing) >> 1, h - marginBottom - bh);
		noButton.visible	= true;

		//	マウスを
		var	l, t;
		switch(sf.moveCursorToDialog)
		{
		//	両ボタンの間に置く
		case "Center":
			var	ml	= Math.min(yesButton.left, noButton.left);
			var	mt	= Math.min(yesButton.top, noButton.top);
			l	= ml+(Math.max(yesButton.left+yesButton.width, noButton.left+noButton.width)-ml) \ 2;
			t	= mt+(Math.max(yesButton.top+yesButton.height, noButton.top+noButton.height)-mt) \ 2;
			break;
		//	はい ボタンに置く
		case "Yes":
			l	= yesButton.left + yesButton.width \ 2;
			t	= yesButton.top + yesButton.height \ 2;
			break;
		//	いいえ ボタンに置く
		case "No":
			l	= noButton.left + noButton.width \ 2;
			t	= noButton.top + noButton.height \ 2;
			break;
		}
		primaryLayer.setCursorPos(l, t);
	}

	function finalize()
	{
		super.finalize(...);
	}

	function action(ev)
	{
		// action
		if(ev.type == "onClick")
		{
			if(ev.target == yesButton)
			{
				result = true;
				close();
			}
			else if(ev.target == noButton)
			{
				result = false;
				close();
			}
		}
		else if(ev.type == "onKeyDown" && ev.target === this)
		{
			// パッド入力に対応する処理
			switch(ev.key)
			{
			case VK_PADLEFT:
				yesButton.focus();
				break;
			case VK_PADRIGHT:
				noButton.focus();
				break;
			case VK_PAD1:
				if(focusedLayer == yesButton)
				{
					result = true;
					close();
				}
				else if(focusedLayer == noButton)
				{
					result = false;
					close();
				}
				break;
			case VK_PAD2:
				result = false;
				close();
				break;
			}
		}
	}

	function onKeyDown(key, shift)
	{
		super.onKeyDown(...);
		if(key == VK_ESCAPE)
		{
			// ESC キーが押された
			// 「いいえ」として処理
			result = false;
			close();
		}
	}
}

class AdvButtonLayer extends ButtonLayer
{
	var	Butt_showDisableImage = false;
	var	Butt_focusEqualEnter = false;

	function AdvButtonLayer()
	{
		super.ButtonLayer(...);
	}

	function loadImages(storage, key)
	{
		global.KAGLayer.loadImages(storage, key);
		var	div	= 3;
		div++ if Butt_showFocusImage;
		div++ if Butt_showDisableImage;
		global.KAGLayer.width	= imageWidth \ div;
		global.KAGLayer.height	= imageHeight;
		callOnPaint	= true;
		Butt_imageLoaded	= true;
	}

	function draw()
	{
		if(Butt_showDisableImage && !enabled)
			drawState(4);
		else if(Butt_mouseDown)
			drawState(1);
		else if(Butt_mouseOn)
			drawState(2);
		else if(Butt_showFocusImage && focused)
			drawState(Butt_focusEqualEnter ? 2 : 3);
		else
			drawState(0);
	}
}

// Yes か No かはっきりさせる関数
function askYesNo(message, caption = "確認", yesFunc=void, noFunc=void, param=void, doneFunc=void)
{
    var win = new YesNoDialogWindow(message, caption);
	win.showModal();
    var res = win.result;
    invalidate win;

    if (res) {
        if (yesFunc !== void) {
            yesFunc(param);
        }
    } else {
        if (noFunc !== void) {
            noFunc(param);
        }
    }

    if (doneFunc !== void) {
        doneFunc(param);
    }
}
